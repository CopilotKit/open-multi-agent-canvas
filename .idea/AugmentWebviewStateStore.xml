<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiIwOTYwMzExNi03MWI5LTRjNTgtODZjYi1hMzRlZmE4NmQ2YTkiLCJjb252ZXJzYXRpb25zIjp7ImMyNmIyNDYxLWJmOTMtNGNmMi1iYTRjLTQxMGZjYTM1ZDEyNiI6eyJpZCI6ImMyNmIyNDYxLWJmOTMtNGNmMi1iYTRjLTQxMGZjYTM1ZDEyNiIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDQtMjNUMDc6MTU6MjguNzk0WiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA0LTIzVDA3OjE1OjI4Ljc5NFoiLCJjaGF0SGlzdG9yeSI6W10sImZlZWRiYWNrU3RhdGVzIjp7fSwidG9vbFVzZVN0YXRlcyI6e30sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjpmYWxzZSwiZXh0cmFEYXRhIjp7Imhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9LCI2OWM0YWRmZi04ZGZlLTQyMWQtODA2ZS0wMDk2M2JhN2ZlOTAiOnsiaWQiOiI2OWM0YWRmZi04ZGZlLTQyMWQtODA2ZS0wMDk2M2JhN2ZlOTAiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA0LTIzVDA3OjE1OjI4Ljg5MVoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNC0yM1QwNzoxNToyOC44OTFaIiwiY2hhdEhpc3RvcnkiOltdLCJmZWVkYmFja1N0YXRlcyI6e30sInRvb2xVc2VTdGF0ZXMiOnt9LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6IiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgifV19LCJzdGF0dXMiOiJkcmFmdCJ9LCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6ZmFsc2UsImV4dHJhRGF0YSI6eyJoYXNEaXJ0eUVkaXRzIjpmYWxzZX0sInBlcnNvbmFUeXBlIjowfSwiMDk2MDMxMTYtNzFiOS00YzU4LTg2Y2ItYTM0ZWZhODZkNmE5Ijp7ImlkIjoiMDk2MDMxMTYtNzFiOS00YzU4LTg2Y2ItYTM0ZWZhODZkNmE5IiwibmFtZSI6IldlbGNvbWUgdG8gdGhlIEF1Z21lbnQgQWdlbnQiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA0LTIzVDA3OjE2OjA1Ljk4MloiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNC0yM1QwNzoxODoyNy41ODNaIiwiY2hhdEhpc3RvcnkiOlt7InJlcXVlc3RfaWQiOiJlMWM5MGM5Ny00ZDFiLTRjOGMtYjA1YS1mOTY2N2U5ZThhMDgiLCJ1dWlkIjoiNjY5NTVmODItNGM4Ni00MTQxLWIzNGYtZTIxYTk0YTRmMTMzIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjowLCJ0b1RpbWVzdGFtcCI6MTc0NTM5MjU2NTk4Mywic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMWRjNjNjZjAtYjg0Mi00ZjcxLWEyOGQtMzdlMzQ5NDNkYmZmIiwicmVxdWVzdF9tZXNzYWdlIjoiQ2hlY2sgb3VyIGFwcCBhbmQgcmVhZCBvdXIgb2xkIEAuY3Vyc29yICAgT3VyIGJhY2tlbmQgaXMgQGFnZW50ICBhbmQgZnJvbnRlbmQgaW4gQGZyb250ZW5kIGFuYWx5emUgd2hhdCB3ZSBoYXZlICIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJDaGVjayBvdXIgYXBwIGFuZCByZWFkIG91ciBvbGQgIn0seyJ0eXBlIjoibWVudGlvbiIsImF0dHJzIjp7ImlkIjoiLy5jdXJzb3IiLCJsYWJlbCI6Ii5jdXJzb3IiLCJkYXRhIjp7ImxhYmVsIjoiLmN1cnNvciIsIm5hbWUiOiIuY3Vyc29yIiwiaWQiOiIvLmN1cnNvciIsImZvbGRlciI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiLmN1cnNvciJ9LCJ0eXBlIjoiaXRlbSJ9fX0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICBPdXIgYmFja2VuZCBpcyAifSx7InR5cGUiOiJtZW50aW9uIiwiYXR0cnMiOnsiaWQiOiIvYWdlbnQiLCJsYWJlbCI6ImFnZW50IiwiZGF0YSI6eyJsYWJlbCI6ImFnZW50IiwibmFtZSI6ImFnZW50IiwiaWQiOiIvYWdlbnQiLCJmb2xkZXIiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImFnZW50In0sInR5cGUiOiJpdGVtIn19fSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgYW5kIGZyb250ZW5kIGluICJ9LHsidHlwZSI6Im1lbnRpb24iLCJhdHRycyI6eyJpZCI6Ii9mcm9udGVuZCIsImxhYmVsIjoiZnJvbnRlbmQiLCJkYXRhIjp7ImxhYmVsIjoiZnJvbnRlbmQiLCJuYW1lIjoiZnJvbnRlbmQiLCJpZCI6Ii9mcm9udGVuZCIsImZvbGRlciI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZnJvbnRlbmQifSwidHlwZSI6Iml0ZW0ifX19LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiIGFuYWx5emUgd2hhdCB3ZSBoYXZlICJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbeyJsYWJlbCI6Ii5jdXJzb3IiLCJuYW1lIjoiLmN1cnNvciIsImlkIjoiLy5jdXJzb3IiLCJmb2xkZXIiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Ii5jdXJzb3IifSwidHlwZSI6Iml0ZW0ifSx7ImxhYmVsIjoiYWdlbnQiLCJuYW1lIjoiYWdlbnQiLCJpZCI6Ii9hZ2VudCIsImZvbGRlciI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiYWdlbnQifSwidHlwZSI6Iml0ZW0ifSx7ImxhYmVsIjoiZnJvbnRlbmQiLCJuYW1lIjoiZnJvbnRlbmQiLCJpZCI6Ii9mcm9udGVuZCIsImZvbGRlciI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZnJvbnRlbmQifSwidHlwZSI6Iml0ZW0ifV0sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVhVcWV6S3dkWmR6akE1WWN3ZjJxUlEiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIkxpc3QgdGhlIG1haW4gZGlyZWN0b3JpZXMgYW5kIGZpbGVzIGluIHRoZSBwcm9qZWN0IHJvb3QgdG8gdW5kZXJzdGFuZCB0aGUgb3ZlcmFsbCBzdHJ1Y3R1cmVcIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkknbGwgaGVscCB5b3UgYW5hbHl6ZSB5b3VyIGFwcCBieSBleGFtaW5pbmcgdGhlIGNvZGViYXNlIHN0cnVjdHVyZS4gTGV0IG1lIGZpcnN0IGdldCBhbiBvdmVydmlldyBvZiB3aGF0J3MgYXZhaWxhYmxlLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJDaGVjayBvdXIgYXBwIGFuZCByZWFkIG91ciBvbGQgQC5jdXJzb3IgICBPdXIgYmFja2VuZCBpcyBAYWdlbnQgIGFuZCBmcm9udGVuZCBpbiBAZnJvbnRlbmQgYW5hbHl6ZSB3aGF0IHdlIGhhdmUgIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiQzovVXNlcnMva2V2aW4vT25lRHJpdmUvRGVza3RvcC9HRy9LQi1tdWx0aS1hZ2VudCIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9rZXZpbi9PbmVEcml2ZS9EZXNrdG9wL0dHL0tCLW11bHRpLWFnZW50In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkknbGwgaGVscCB5b3UgYW5hbHl6ZSB5b3VyIGFwcCBieSBleGFtaW5pbmcgdGhlIGNvZGViYXNlIHN0cnVjdHVyZS4gTGV0IG1lIGZpcnN0IGdldCBhbiBvdmVydmlldyBvZiB3aGF0J3MgYXZhaWxhYmxlLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjEwMzQyY2NhLTNhZTgtNDZjOC04ZWYzLTFiNmY5YTEzNjZlYiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUZhZFJ1dWpmVkJSdTg5Z01DNFJaYWciLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlNob3cgbWUgdGhlIG1haW4gZnJvbnRlbmQgY29tcG9uZW50cywgZXNwZWNpYWxseSBmb2N1c2luZyBvbiB0aGUgY2hhdCBpbnRlcmZhY2UgYW5kIGFnZW50IGNvbXBvbmVudHNcIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik5vdyBsZXQgbWUgbG9vayBhdCB0aGUgZnJvbnRlbmQgc3RydWN0dXJlIHRvIHVuZGVyc3RhbmQgdGhlIFVJIGNvbXBvbmVudHM6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBzdGFydC1hbGwuYmF0XG5AZWNobyBvZmZcblJFTSBMYXVuY2ggc2NyaXB0IGZvciBNdWx0aS1BZ2VudCBDYW52YXM6IHN0YXJ0cyBib3RoIGZyb250ZW5kIGFuZCBiYWNrZW5kXG5cblJFTSBTdGFydCBiYWNrZW5kIChhZ2VudCkgaW4gYSBuZXcgd2luZG93XG5zdGFydCBcIk1DUCBBZ2VudCBCYWNrZW5kXCIgY21kIC9rIFwiY2QgL2QgJX5kcDBhZ2VudCAmJiBwb2V0cnkgaW5zdGFsbCAmJiBwb2V0cnkgcnVuIGxhbmdncmFwaCBkZXYgLS1ob3N0IGxvY2FsaG9zdCAtLXBvcnQgODEyMyAtLW5vLWJyb3dzZXJcIlxuXG5SRU0gU3RhcnQgZnJvbnRlbmQgKE5leHQuanMpIGluIGEgbmV3IHdpbmRvd1xuc3RhcnQgXCJGcm9udGVuZFwiIGNtZCAvayBcImNkIC9kICV+ZHAwZnJvbnRlbmQgJiYgcG5wbSBpbnN0YWxsICYmIHBucG0gcnVuIGRldlwiXG5cblJFTSBPcHRpb25hbDogV2FpdCBmb3IgdXNlciB0byBjbG9zZVxuZWNobyBCb3RoIGJhY2tlbmQgYW5kIGZyb250ZW5kIGhhdmUgYmVlbiBzdGFydGVkIGluIG5ldyB3aW5kb3dzLlxucGF1c2Vcbi4uLlxuUGF0aDogLmN1cnNvci9ydWxlcy9mdWxsc3RhY2stYmVzdC1wcmFjdGljZXMubWRjXG4tLS1cbmRlc2NyaXB0aW9uOiBcbmdsb2JzOiBcbmFsd2F5c0FwcGx5OiB0cnVlXG4tLS1cbiMgRnVsbHN0YWNrIEJlc3QgUHJhY3RpY2VzIFJ1bGVcblxuVG8gZW5zdXJlIGEgY29tcGxldGUsIGJ1Zy1mcmVlIGFwcCBhY3Jvc3MgYm90aCBmcm9udGVuZCBhbmQgYmFja2VuZCwgZm9sbG93IHRoZXNlIHVuaWZpZWQgZ3VpZGVsaW5lczpcblxuIyMgUHJvamVjdCBTdHJ1Y3R1cmVcbi0gRnJvbnRlbmQgY29kZSBpcyBpbiBbYC9mcm9udGVuZGBdKG1kYzpmcm9udGVuZC9SRUFETUUubWQpLCB3aXRoIG1haW4gbG9naWMgaW4gW2BzcmMvYXBwL2BdKG1kYzpmcm9udGVuZC9zcmMvYXBwKSBhbmQgY29tcG9uZW50cyBpbiBbYHNyYy9jb21wb25lbnRzL2BdKG1kYzpmcm9udGVuZC9zcmMvY29tcG9uZW50cykuXG4tIEJhY2tlbmQgYWdlbnQgY29kZSBpcyBpbiBbYC9hZ2VudGBdKG1kYzphZ2VudC9SRUFETUUubWQpLCB3aXRoIG1haW4gbG9naWMgaW4gLkBgbWNwX2FnZW50XFxhZ2VudHMucHlgLlxuXG4jIyBDb2RlIFF1YWxpdHlcbi0gVXNlIFR5cGVTY3JpcHQgZm9yIGZyb250ZW5kIGFuZCB0eXBlIGhpbnRzIGZvciBiYWNrZW5kIFB5dGhvbi5cbi0gV3JpdGUgSlNEb2MgKGZyb250ZW5kKSBhbmQgZG9jc3RyaW5ncyAoYmFja2VuZCkgZm9yIGFsbCBmdW5jdGlvbnMgYW5kIGNsYXNzZXMuXG4tIFVzZSBjYW1lbENhc2UgZm9yIHZhcmlhYmxlcyBhbmQgUGFzY2FsQ2FzZSBmb3IgY29tcG9uZW50cy9jbGFzc2VzLlxuLSBQcmVmZXIgYXN5bmMvYXdhaXQgZm9yIGFsbCBhc3luY2hyb25vdXMgbG9naWMuXG4tIEtlZXAgY29tcG9uZW50cywgZnVuY3Rpb25zLCBhbmQgbW9kdWxlcyBzbWFsbCBhbmQgZm9jdXNlZC5cblxuIyMgRXh0ZW5zaWJpbGl0eVxuLSBSZWdpc3RlciBuZXcgYWdlbnRzIGFuZCB0b29scyB2aWEgY29uZmlnIGZpbGVzIChbYHNyYy9saWIvYXZhaWxhYmxlLWFnZW50cy50c2BdKG1kYzpmcm9udGVuZC9zcmMvbGliL2F2YWlsYWJsZS1hZ2VudHMudHMpIGZvciBmcm9udGVuZCwgYE1DUENvbmZpZ2AgZm9yIGJhY2tlbmQpLlxuLSBBZGQgbmV3IGZlYXR1cmVzIGFzIG5ldyBjb21wb25lbnRzLCBob29rcywgb3Igd29ya2Zsb3cgbm9kZXPigJRhdm9pZCBtb2RpZnlpbmcgZXhpc3RpbmcgbG9naWMgdW5sZXNzIG5lY2Vzc2FyeS5cbi0gVXNlIGNvbnRleHQgcHJvdmlkZXJzIChmcm9udGVuZCkgYW5kIHN0YXRlIGNsYXNzZXMgKGJhY2tlbmQpIGZvciBnbG9iYWwvc2hhcmVkIHN0YXRlLlxuXG4jIyBUZXN0aW5nICYgRGVidWdnaW5nXG4tIFRlc3QgYWxsIG5ldyBmZWF0dXJlcyBpbiBib3RoIGRldmVsb3BtZW50IGFuZCBwcm9kdWN0aW9uIGJ1aWxkcy5cbi0gVXNlIFJlYWN0IFF1ZXJ5IERldnRvb2xzIGFuZCBDb3BpbG90S2l0IERldiBDb25zb2xlIChmcm9udGVuZCkgYW5kIGxvZyB0b29sL2FnZW50IHJlc3BvbnNlcyAoYmFja2VuZCkuXG4tIFZhbGlkYXRlIGFsbCBmb3JtcyBhbmQgdXNlciBpbnB1dC5cbi0gQWRkIHVuaXQvaW50ZWdyYXRpb24gdGVzdHMgZm9yIGNyaXRpY2FsIHdvcmtmbG93cy5cblxuIyMgRG9jdW1lbnRhdGlvblxuLSBVcGRhdGUgW2BSRUFETUUubWRgXShtZGM6ZnJvbnRlbmQvUkVBRE1FLm1kKSBhbmQgW2BSRUFETUUubWRgXShtZGM6YWdlbnQvUkVBRE1FLm1kKSB3aXRoIGFueSBtYWpvciBjaGFuZ2VzIG9yIG5ldyBmZWF0dXJlcy5cbi0gRG9jdW1lbnQgbmV3IGFnZW50cywgdG9vbHMsIG1lbW9yeSBiYWNrZW5kcywgb3Igd29ya2Zsb3cgbm9kZXMgaW5saW5lIGFuZCBpbiB0aGUgUkVBRE1FLlxuXG4jIyBCYWNrd2FyZCBDb21wYXRpYmlsaXR5XG4tIERlZmF1bHQgdG8gZXhpc3RpbmcgY29uZmlnIGFuZCBtZW1vcnkgaWYgbmV3IGZlYXR1cmVzL3NldHRpbmdzIGFyZSBub3QgcHJvdmlkZWQuXG4tIE5ldmVyIHJlbW92ZSBvciByZW5hbWUgZXhpc3RpbmcgY29uZmlnIGZpZWxkcyB3aXRob3V0IGEgbWlncmF0aW9uIHBhdGguXG4tIFRlc3QgYWxsIGNoYW5nZXMgd2l0aCBleGlzdGluZyB3b3JrZmxvd3MgYmVmb3JlIG1lcmdpbmcuXG4uLi5cblBhdGg6IFJFQURNRS5tZFxuXG5cbjxkaXYgYWxpZ249XCJjZW50ZXJcIj5cblxuIyBPcGVuIE11bHRpLUFnZW50IENhbnZhc1xuICAgXG4hW0NvcGlsb3RLaXQtQmFubmVyXShodHRwczovL2dpdGh1Yi5jb20vdXNlci1hdHRhY2htZW50cy9hc3NldHMvODE2N2M4NDUtMDM4MS00NWQ5LWFkMWMtODNmOTk1ZDQ4MjkwKVxuPC9kaXY+XG5cblxuIVttdWx0aS1hZ2VudC1jYW52YXNdKGh0dHBzOi8vZ2l0aHViLmNvbS91c2VyLWF0dGFjaG1lbnRzL2Fzc2V0cy81OTUzYTVhNi01Njg2LTQ3MjItOTQ3Ny01Mjc5YjY3YjNkYmEpXG5cblxuT3BlbiBNdWx0aS1BZ2VudCBDYW52YXMsIGNyZWF0ZWQgYnkgW0NvcGlsb3RLaXRdKGh0dHBzOi8vZ2l0aHViLmNvbS9Db3BpbG90S2l0L0NvcGlsb3RLaXQpIGlzIGFuIG9wZW4tc291cmNlIG11bHRpLWFnZW50IGNoYXQgaW50ZXJmYWNlIHRoYXQgbGV0cyB5b3UgbWFuYWdlIG11bHRpcGxlIGFnZW50cyBpbiBvbmUgZHluYW1pYyBjb252ZXJzYXRpb24uIEl0J3MgYnVpbHQgd2l0aCBOZXh0LmpzLCBMYW5nR3JhcGgsIGFuZCBDb3BpbG90S2l0IHRvIGhlbHAgd2l0aCB0cmF2ZWwgcGxhbm5pbmcsIHJlc2VhcmNoLCBhbmQgZ2VuZXJhbC1wdXJwb3NlIHRhc2tzIHRocm91Z2ggTUNQIHNlcnZlcnMuXG5cbiMjIEV4aXN0aW5nIEFnZW50c1xuXG5DaGVjayBvdXQgdGhlc2UgYXdlc29tZSBhZ2VudHMgKHRoZXkgbGl2ZSBpbiBzZXBhcmF0ZSByZXBvc2l0b3JpZXMpLiBZb3UgY2FuIHJ1biB0aGVtIHNlcGFyYXRlbHkgb3IgZGVwbG95IHRoZW0gb24gTGFuZ1NtaXRoOlxuLSBbQ29BZ2VudHMgVHJhdmVsIEFnZW50XShodHRwczovL2dpdGh1Yi5jb20vQ29waWxvdEtpdC9Db3BpbG90S2l0L3RyZWUvbWFpbi9leGFtcGxlcy9jb2FnZW50cy10cmF2ZWwvYWdlbnQpXG4tIFtDb0FnZW50cyBBSSBSZXNlYXJjaGVyXShodHRwczovL2dpdGh1Yi5jb20vQ29waWxvdEtpdC9Db3BpbG90S2l0L3RyZWUvbWFpbi9leGFtcGxlcy9jb2FnZW50cy1haS1yZXNlYXJjaGVyL2FnZW50KVxuXG5BZGRpdGlvbmFsbHksIHRoaXMgcHJvamVjdCBub3cgaW5jbHVkZXMgYSBidWlsdC1pbiBNQ1AgKE11bHRpLUNoYW5uZWwgUHJvdG9jb2wpIEFnZW50OlxuLSAqKk1DUCBBZ2VudCoqOiBBIGdlbmVyYWwtcHVycG9zZSBhZ2VudCBjYXBhYmxlIG9mIGhhbmRsaW5nIHZhcmlvdXMgdGFza3MgdGhyb3VnaCBjb25maWd1cmFibGUgTUNQIHNlcnZlcnMuXG5cbiMjIENvcGlsb3QgQ2xvdWQgaXMgcmVxdWlyZWQgdG8gcnVuIHRoaXMgcHJvamVjdDogXG5cblxuXG5cbiMjIFF1aWNrIFN0YXJ0IPCfmoBcblxuIyMjIDEuIFByZXJlcXVpc2l0ZXNcbk1ha2Ugc3VyZSB5b3UgaGF2ZTpcbi0gW3BucG1dKGh0dHBzOi8vcG5wbS5pby9pbnN0YWxsYXRpb24pXG5cbiMjIyAyLiBBUEkgS2V5c1xuLSBbQ29waWxvdCBDbG91ZF0oaHR0cHM6Ly9jbG91ZC5jb3BpbG90a2l0LmFpKVxuXG4jIyBSdW5uaW5nIHRoZSBGcm9udGVuZFxuXG5SZW5hbWUgdGhlIGBleGFtcGxlLmVudmAgZmlsZSBpbiB0aGUgYGZyb250ZW5kYCBmb2xkZXIgdG8gYC5lbnZgOlxuXG5gYGBzaFxuTkVYVF9QVUJMSUNfQ1BLX1BVQkxJQ19BUElfS0VZPS4uLlxuYGBgXG5cbkluc3RhbGwgZGVwZW5kZW5jaWVzOlxuXG5gYGBzaFxuY2QgZnJvbnRlbmRcbnBucG0gaVxuYGBgXG5cblxuXG5OZWVkIGEgQ29waWxvdEtpdCBBUEkga2V5PyBHZXQgb25lIFtoZXJlXShodHRwczovL2Nsb3VkLmNvcGlsb3RraXQuYWkvKS5cblxuVGhlbiwgZmlyZSB1cCB0aGUgTmV4dC5qcyBwcm9qZWN0OlxuXG5gYGBzaFxucG5wbSBydW4gYnVpbGQgJiYgcG5wbSBydW4gc3RhcnRcbmBgYFxuXG4jIyBNQ1AgQWdlbnQgU2V0dXBcblxuIVttY3AtZGVtb10oLi9hZ2VudC9kZW1vL21jcC1kZW1vLmdpZilcblxuVGhlIE1DUCBBZ2VudCBhbGxvd3MgeW91IHRvIGNvbm5lY3QgdG8gdmFyaW91cyBNQ1AtY29tcGF0aWJsZSBzZXJ2ZXJzOlxuXG4xLiAqKkNvbmZpZ3VyaW5nIEN1c3RvbSBNQ1AgU2VydmVycyoqOlxuICAgLSBDbGljayB0aGUgXCJNQ1AgU2VydmVyc1wiIGJ1dHRvbiBpbiB0aGUgdG9wIHJpZ2h0IG9mIHRoZSBpbnRlcmZhY2VcbiAgIC0gQWRkIHNlcnZlcnMgdmlhIHRoZSBjb25maWd1cmF0aW9uIHBhbmVsOlxuICAgICAtICoqU3RhbmRhcmQgSU8qKjogUnVuIGNvbW1hbmRzIGxvY2FsbHkgKGUuZy4sIFB5dGhvbiBzY3JpcHRzKVxuICAgICAtICoqU1NFKio6IENvbm5lY3QgdG8gZXh0ZXJuYWwgTUNQLWNvbXBhdGlibGUgc2VydmVycyAodmlhIFNlcnZlci1TZW50IEV2ZW50cylcblxuMi4gKipQdWJsaWMgTUNQIFNlcnZlcnMqKjpcbiAgIC0gWW91IGNhbiBjb25uZWN0IHRvIHB1YmxpYyBNQ1Agc2VydmVycyBsaWtlIFttY3AuY29tcG9zaW8uZGV2XShodHRwczovL21jcC5jb21wb3Npby5kZXYvKSBhbmQgW21jcC5ydW5dKGh0dHBzOi8vd3d3Lm1jcC5ydW4vKVxuXG4jIyBSdW5uaW5nIHRoZSBNQ1AgQWdlbnQgQmFja2VuZCAoT3B0aW9uYWwpXG5cblJlbmFtZSB0aGUgYGV4YW1wbGUuZW52YCBmaWxlIGluIHRoZSBgYWdlbnRgIGZvbGRlciB0byBgLmVudmA6XG5cbmBgYHNoXG5PUEVOQUlfQVBJX0tFWT0uLi5cbkxBTkdTTUlUSF9BUElfS0VZPS4uLlxuYGBgXG5cbklmIHlvdSB3YW50IHRvIHVzZSB0aGUgaW5jbHVkZWQgTUNQIEFnZW50IHdpdGggdGhlIGJ1aWx0LWluIG1hdGggc2VydmVyOlxuXG5gYGBzaFxuY2QgYWdlbnRcbnBvZXRyeSBpbnN0YWxsXG5wb2V0cnkgcnVuIGxhbmdncmFwaCBkZXYgLS1ob3N0IGxvY2FsaG9zdCAtLXBvcnQgODEyMyAtLW5vLWJyb3dzZXJcbmBgYFxuXG4jIyBSdW5uaW5nIGEgdHVubmVsXG5cbkFkZCBhbm90aGVyIHRlcm1pbmFsIGFuZCBzZWxlY3QgUmVtb3RlIEVuZHBvaW50LlxuVGhlbiBzZWxlY3QgTG9jYWwgRGV2ZWxvcG1lbnQuXG5PbmNlIHRoaXMgaXMgZG9uZSwgY29weSB0aGUgY29tbWFuZCBpbnRvIHlvdXIgdGVybWluYWwgYW5kIGNoYW5nZSB0aGUgcG9ydCB0byBtYXRjaCB0aGUgTGFuZ0dyYXBoIHNlcnZlciBgODEyM2BcbiFbaW1hZ2VdKGh0dHBzOi8vZ2l0aHViLmNvbS91c2VyLWF0dGFjaG1lbnRzL2Fzc2V0cy82YmY0MTA0Mi05NTI5LTQ0NzAtOGJhZi1kZDA3NmFhZDMxYTEpXG5cblxuIyMgRG9jdW1lbnRhdGlvbiBcbi0gW0NvcGlsb3RLaXQgRG9jc10oaHR0cHM6Ly9kb2NzLmNvcGlsb3RraXQuYWkvY29hZ2VudHMpXG4tIFtMYW5nR3JhcGggUGxhdGZvcm0gRG9jc10oaHR0cHM6Ly9sYW5nY2hhaW4tYWkuZ2l0aHViLmlvL2xhbmdncmFwaC9jbG91ZC9kZXBsb3ltZW50L2Nsb3VkLylcbi0gW01vZGVsIENvbnRleHQgUHJvdG9jb2wgKE1DUCkgRG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2xhbmdjaGFpbi1haS9sYW5nZ3JhcGgvdHJlZS9tYWluL2V4YW1wbGVzL21jcClcblxuIyMgTGljZW5zZVxuRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmb3IgbW9yZSBpbmZvLlxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvcHJvdmlkZXJzL1Byb3ZpZGVycy50c3hcblwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBRdWVyeUNsaWVudCwgUXVlcnlDbGllbnRQcm92aWRlciB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcbmltcG9ydCB7IFJlYWN0UXVlcnlEZXZ0b29scyB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnktZGV2dG9vbHNcIjtcbmltcG9ydCB7IENvcGlsb3RLaXQgfSBmcm9tIFwiQGNvcGlsb3RraXQvcmVhY3QtY29yZVwiO1xuaW1wb3J0IHsgQ29BZ2VudHNQcm92aWRlciB9IGZyb20gXCJAL2NvbXBvbmVudHMvY29hZ2VudHMtcHJvdmlkZXJcIjtcblxuY29uc3QgcXVlcnlDbGllbnQgPSBuZXcgUXVlcnlDbGllbnQoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvdmlkZXJzKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e3F1ZXJ5Q2xpZW50fT5cbiAgICAgIDxDb3BpbG90S2l0XG4gICAgICAgIHNob3dEZXZDb25zb2xlPXtmYWxzZX1cbiAgICAgICAgcHVibGljQXBpS2V5PXtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DT1BJTE9UX0NMT1VEX0FQSV9LRVl9XG4gICAgICA+XG4gICAgICAgIDxDb0FnZW50c1Byb3ZpZGVyPntjaGlsZHJlbn08L0NvQWdlbnRzUHJvdmlkZXI+XG4gICAgICA8L0NvcGlsb3RLaXQ+XG4gICAgICA8UmVhY3RRdWVyeURldnRvb2xzIGluaXRpYWxJc09wZW49e2ZhbHNlfSAvPlxuICAgIDwvUXVlcnlDbGllbnRQcm92aWRlcj5cbiAgKTtcbn1cbi4uLlxuUGF0aDogLmN1cnNvci9ydWxlcy9mcm9udGVuZC1iZXN0LXByYWN0aWNlcy5tZGNcbi0tLVxuZGVzY3JpcHRpb246IGZyb250ZW5kLCB1aS5cbmdsb2JzOiBcbmFsd2F5c0FwcGx5OiBmYWxzZVxuLS0tXG4jIEZyb250ZW5kIEJlc3QgUHJhY3RpY2VzIFJ1bGVcblxuVG8gZW5zdXJlIHJvYnVzdCwgYnVnLWZyZWUgZGV2ZWxvcG1lbnQgaW4gdGhlIGZyb250ZW5kIChgL2Zyb250ZW5kYCksIGZvbGxvdyB0aGVzZSBndWlkZWxpbmVzOlxuXG4jIyBQcm9qZWN0IFN0cnVjdHVyZVxuLSBNYWluIGFwcCBlbnRyeSBhbmQgcm91dGluZyBhcmUgaW4gW2BzcmMvYXBwL2BdKG1kYzpmcm9udGVuZC9zcmMvYXBwKS5cbi0gUmV1c2FibGUgVUkgY29tcG9uZW50cyBhcmUgaW4gW2BzcmMvY29tcG9uZW50cy91aS9gXShtZGM6ZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvdWkpLlxuLSBBZ2VudC1zcGVjaWZpYyBVSXMgYXJlIGluIFtgc3JjL2NvbXBvbmVudHMvYWdlbnRzL2BdKG1kYzpmcm9udGVuZC9zcmMvY29tcG9uZW50cy9hZ2VudHMpLlxuLSBHbG9iYWwgc3RhdGUgcHJvdmlkZXJzIGFyZSBpbiBbYHNyYy9wcm92aWRlcnMvYF0obWRjOmZyb250ZW5kL3NyYy9wcm92aWRlcnMpLlxuLSBDdXN0b20gaG9va3MgYXJlIGluIFtgc3JjL2hvb2tzL2BdKG1kYzpmcm9udGVuZC9zcmMvaG9va3MpLlxuLSBVdGlsaXR5IGZ1bmN0aW9ucyBhbmQgYWdlbnQgY29uZmlnIHR5cGVzIGFyZSBpbiBbYHNyYy9saWIvYF0obWRjOmZyb250ZW5kL3NyYy9saWIpLlxuLi4uXG5cbiMjIEV4dGVuc2liaWxpdHlcbi0gUmVnaXN0ZXIgbmV3IGFnZW50cyBpbiBbYHNyYy9saWIvYXZhaWxhYmxlLWFnZW50cy50c2BdKG1kYzpmcm9udGVuZC9zcmMvbGliL2F2YWlsYWJsZS1hZ2VudHMudHMpLlxuLSBBZGQgbmV3IGFnZW50IFVJcyBpbiBbYHNyYy9jb21wb25lbnRzL2FnZW50cy9gXShtZGM6ZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvYWdlbnRzKS5cbi0gVXNlIHRoZSBhZ2VudC90ZWFtIGNyZWF0aW9uIFVJIChwbGFubmVkKSBmb3IgZHluYW1pYyBhZ2VudCBtYW5hZ2VtZW50LlxuXG4jIyBUZXN0aW5nICYgRGVidWdnaW5nXG4tIFRlc3QgYWxsIG5ldyBmZWF0dXJlcyBpbiBib3RoIGRldmVsb3BtZW50IGFuZCBwcm9kdWN0aW9uIGJ1aWxkcy5cbi0gVXNlIFJlYWN0IFF1ZXJ5IERldnRvb2xzIGFuZCBDb3BpbG90S2l0IERldiBDb25zb2xlIGZvciBkZWJ1Z2dpbmcuXG4tIFZhbGlkYXRlIGFsbCBmb3JtcyBhbmQgdXNlciBpbnB1dC5cblxuIyMgRG9jdW1lbnRhdGlvblxuLSBVcGRhdGUgW2BSRUFETUUubWRgXShtZGM6ZnJvbnRlbmQvUkVBRE1FLm1kKSB3aXRoIGFueSBtYWpvciBjaGFuZ2VzIG9yIG5ldyBmZWF0dXJlcy5cblxuIyMgU3VtbWFyeVxuRm9sbG93aW5nIHRoZXNlIHJ1bGVzIHdpbGwgaGVscCBtYWludGFpbiBhIGNsZWFuLCBzY2FsYWJsZSwgYW5kIGJ1Zy1yZXNpc3RhbnQgZnJvbnRlbmQgY29kZWJhc2UuXG5cbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL2FwcC9sYXlvdXQudHN4XG5pbXBvcnQgdHlwZSB7IE1ldGFkYXRhIH0gZnJvbSBcIm5leHRcIjtcbmltcG9ydCB7IEludGVyLCBKZXRCcmFpbnNfTW9ubyB9IGZyb20gXCJuZXh0L2ZvbnQvZ29vZ2xlXCI7XG5pbXBvcnQgXCIuL2dsb2JhbHMuY3NzXCI7XG5pbXBvcnQgUHJvdmlkZXJzIGZyb20gXCJAL3Byb3ZpZGVycy9Qcm92aWRlcnNcIjtcblxuY29uc3QgaW50ZXIgPSBJbnRlcih7XG4gIHZhcmlhYmxlOiBcIi0tZm9udC1pbnRlclwiLFxuICBzdWJzZXRzOiBbXCJsYXRpblwiXSxcbn0pO1xuXG5jb25zdCBqZXRicmFpbnNNb25vID0gSmV0QnJhaW5zX01vbm8oe1xuICB2YXJpYWJsZTogXCItLWZvbnQtamV0YnJhaW5zXCIsXG4gIHN1YnNldHM6IFtcImxhdGluXCJdLFxufSk7XG5cbmV4cG9ydCBjb25zdCBtZXRhZGF0YTogTWV0YWRhdGEgPSB7XG4gIHRpdGxlOiBcIk9wZW4gTXVsdGktQWdlbnQgQ2FudmFzXCIsXG4gIGRlc2NyaXB0aW9uOiBcIk9wZW4gTXVsdGktQWdlbnQgQ2FudmFzIGJ5IENvcGlsb3RLaXRcIixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvb3RMYXlvdXQoe1xuICBjaGlsZHJlbixcbn06IFJlYWRvbmx5PHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbn0+KSB7XG4gIHJldHVybiAoXG4gICAgPGh0bWwgbGFuZz1cImVuXCI+XG4gICAgICA8Ym9keVxuICAgICAgICBjbGFzc05hbWU9e2Ake2ludGVyLnZhcmlhYmxlfSAke2pldGJyYWluc01vbm8udmFyaWFibGV9IGFudGlhbGlhc2VkYH1cbiAgICAgID5cbiAgICAgICAgPFByb3ZpZGVycz57Y2hpbGRyZW59PC9Qcm92aWRlcnM+XG4gICAgICA8L2JvZHk+XG4gICAgPC9odG1sPlxuICApO1xufVxuLi4uXG5QYXRoOiAuY3Vyc29yL3J1bGVzL2FnZW50LWJlc3QtcHJhY3RpY2VzLm1kY1xuLS0tXG5kZXNjcmlwdGlvbjogQmFja2VuZFxuZ2xvYnM6IFxuYWx3YXlzQXBwbHk6IGZhbHNlXG4tLS1cbiMgQWdlbnQgQmFja2VuZCBCZXN0IFByYWN0aWNlcyBSdWxlXG5cblRvIGVuc3VyZSBlYXN5LCBub24tYnJlYWtpbmcgZGV2ZWxvcG1lbnQgaW4gdGhlIGFnZW50IGJhY2tlbmQgKGAvYWdlbnRgKSwgZm9sbG93IHRoZXNlIGd1aWRlbGluZXM6XG5cbiMjIFByb2plY3QgU3RydWN0dXJlXG4tIFRoZSBtYWluIGFnZW50IGxvZ2ljIGlzIGluIC5AYG1jcF9hZ2VudFxcYWdlbnRzLnB5YCAgICAgICAgXG4tIEFkZCBuZXcgYWdlbnQgbG9naWMgb3Igd29ya2Zsb3dzIGFzIG5ldyBub2RlcyBpbiB0aGUgd29ya2Zsb3cgZ3JhcGguXG4tIFBsYWNlIHN1cHBvcnRpbmcgc2NyaXB0cyAoZS5nLiwgbWF0aCBzZXJ2ZXIpIGluIHRoZSBhZ2VudCBkaXJlY3RvcnkgKGUuZy4sIFtgbWF0aF9zZXJ2ZXIucHlgXShtZGM6YWdlbnQvbWF0aF9zZXJ2ZXIucHkpKS5cbi4uLlxuXG4jIyBCYWNrd2FyZCBDb21wYXRpYmlsaXR5XG4tIERlZmF1bHQgdG8gZXhpc3RpbmcgY29uZmlnIGFuZCBtZW1vcnkgaWYgbmV3IGZlYXR1cmVzL3NldHRpbmdzIGFyZSBub3QgcHJvdmlkZWQuXG4tIE5ldmVyIHJlbW92ZSBvciByZW5hbWUgZXhpc3RpbmcgY29uZmlnIGZpZWxkcyB3aXRob3V0IGEgbWlncmF0aW9uIHBhdGguXG4tIFRlc3QgYWxsIGNoYW5nZXMgd2l0aCBleGlzdGluZyBhZ2VudCB3b3JrZmxvd3MgYmVmb3JlIG1lcmdpbmcuXG5cbiMjIERvY3VtZW50YXRpb25cbi0gVXBkYXRlIFtgUkVBRE1FLm1kYF0obWRjOmFnZW50L1JFQURNRS5tZCkgd2l0aCBhbnkgbWFqb3IgY2hhbmdlcyBvciBuZXcgZmVhdHVyZXMuXG4tIERvY3VtZW50IG5ldyB0b29scywgbWVtb3J5IGJhY2tlbmRzLCBvciB3b3JrZmxvdyBub2RlcyBpbmxpbmUgYW5kIGluIHRoZSBSRUFETUUuXG5cbiMjIFN1bW1hcnlcbkZvbGxvd2luZyB0aGVzZSBydWxlcyB3aWxsIGhlbHAgbWFpbnRhaW4gYSByb2J1c3QsIGV4dGVuc2libGUsIGFuZCBiYWNrd2FyZC1jb21wYXRpYmxlIGFnZW50IGJhY2tlbmQuXG5cbi4uLlxuUGF0aDogZnJvbnRlbmQvUkVBRE1FLm1kXG4jIE9wZW4gTXVsdGktQWdlbnQgQ2FudmFzXG5cbk9wZW4gTXVsdGktQWdlbnQgQ2FudmFzIGlzIGFuIG9wZW4tc291cmNlIG11bHRpLWFnZW50IGNoYXQgaW50ZXJmYWNlIHRoYXQgbGV2ZXJhZ2VzIHNwZWNpYWxpemVkIGFnZW50cyB0byBhc3Npc3Qgd2l0aCB0cmF2ZWwgcGxhbm5pbmcsIHJlc2VhcmNoLCBlbWFpbCBkcmFmdGluZywgYW5kIG1vcmUuIEJ1aWx0IHdpdGggTmV4dC5qcywgUmVhY3QsIGFuZCBDb3BpbG90S2l0LCB0aGlzIHByb2plY3Qgb2ZmZXJzIGFuIGludGVyYWN0aXZlLCB1bmlmaWVkIGV4cGVyaWVuY2UgYnkgbWFuYWdpbmcgbXVsdGlwbGUgYWdlbnRzIHdpdGhpbiBvbmUgZHluYW1pYyBjb252ZXJzYXRpb24uXG5cbiMjIEtleSBGZWF0dXJlc1xuXG4tICoqTXVsdGktQWdlbnQgQ2hhdCBJbnRlcmZhY2U6KiogIFxuICBDaGF0IHdpdGggYSByYW5nZSBvZiBzcGVjaWFsaXplZCBhZ2VudHM6XG4gIC0gKipUcmF2ZWwgQWdlbnQ6KiogUGxhbiB0cmlwcywgY3JlYXRlIGl0aW5lcmFyaWVzLCBhbmQgdmlldyB0cmF2ZWwgcmVjb21tZW5kYXRpb25zIG9uIGFuIGludGVyYWN0aXZlIG1hcCBwb3dlcmVkIGJ5IExlYWZsZXQuXG4gIC0gKipSZXNlYXJjaCBBZ2VudDoqKiBDb25kdWN0IHJlc2VhcmNoIHdpdGggcmVhbC10aW1lIGxvZ3MgYW5kIHByb2dyZXNzIHVwZGF0ZXMuXG4gIFxuLSAqKlJlYWwtVGltZSBJbnRlcmFjdGl2aXR5OioqICBcbiAgRW5qb3kgYSBsaXZlIGNoYXQgcG93ZXJlZCBieSBgQGNvcGlsb3RraXQvcmVhY3QtdWlgIHRoYXQgb3JjaGVzdHJhdGVzIGR5bmFtaWMgc3RhdGUgY2hhbmdlcyBhbmQgYWdlbnQgcmVzcG9uc2VzLlxuXG4tICoqU3RhdGUgTWFuYWdlbWVudCAmIEFnZW50IENvb3JkaW5hdGlvbjoqKiAgXG4gIExldmVyYWdlcyBgQGNvcGlsb3RraXQvcmVhY3QtY29yZWAgZm9yIHJvYnVzdCBhZ2VudCBzdGF0ZSBtYW5hZ2VtZW50IGFuZCBzbW9vdGggaW50ZWdyYXRpb24gb2YgdHJhdmVsIGFuZCByZXNlYXJjaCBmdW5jdGlvbmFsaXRpZXMuXG5cbi0gKipSZXNwb25zaXZlICYgTW9kZXJuIFVJOioqICBcbiAgRGVzaWduZWQgd2l0aCBUYWlsd2luZCBDU1MgdG8gZW5zdXJlIHlvdXIgZXhwZXJpZW5jZSBpcyBzbW9vdGggYW5kIGFkYXB0aXZlIGFjcm9zcyBhbGwgZGV2aWNlcy5cblxuIyMgVGVjaG5vbG9neSBTdGFja1xuXG4tICoqRnJhbWV3b3JrOioqIFtOZXh0LmpzXShodHRwczovL25leHRqcy5vcmcpXG4tICoqVUkgTGlicmFyeToqKiBSZWFjdCwgW0NvcGlsb3RLaXQgVUldKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0Bjb3BpbG90a2l0L3JlYWN0LXVpKVxuLSAqKlN0YXRlIE1hbmFnZW1lbnQ6KiogW0NvcGlsb3RLaXQgUmVhY3QgQ29yZV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGNvcGlsb3RraXQvcmVhY3QtY29yZSlcbi0gKipNYXBwaW5nOioqIFtMZWFmbGV0XShodHRwczovL2xlYWZsZXRqcy5jb20pIHdpdGggW1JlYWN0IExlYWZsZXRdKGh0dHBzOi8vcmVhY3QtbGVhZmxldC5qcy5vcmcpXG4tICoqU3R5bGluZzoqKiBUYWlsd2luZCBDU1NcblxuIyMgU2V0dXAgSW5zdHJ1Y3Rpb25zXG5cbjEuICoqUHJlcmVxdWlzaXRlczoqKiAgXG4gICAtIFtOb2RlLmpzXShodHRwczovL25vZGVqcy5vcmcpIChMVFMgdmVyc2lvbiByZWNvbW1lbmRlZClcbiAgIC0gbnBtIG9yIHlhcm5cblxuMi4gKipJbnN0YWxsYXRpb246KiogIFxuICAgYGBgYmFzaFxuICAgIyBDbG9uZSB0aGUgcmVwb3NpdG9yeVxuICAgZ2l0IGNsb25lIDxyZXBvc2l0b3J5LXVybD5cbiAgIFxuICAgIyBOYXZpZ2F0ZSB0byB0aGUgZnJvbnRlbmQgZGlyZWN0b3J5XG4gICBjZCBmcm9udGVuZFxuXG4gICAjIEluc3RhbGwgZGVwZW5kZW5jaWVzXG4gICBucG0gaW5zdGFsbFxuICAgIyBvclxuICAgeWFybiBpbnN0YWxsXG4gICBgYGBcblxuMy4gKipSdW5uaW5nIHRoZSBEZXZlbG9wbWVudCBTZXJ2ZXI6KiogIFxuICAgYGBgYmFzaFxuICAgbnBtIHJ1biBkZXZcbiAgICMgb3JcbiAgIHlhcm4gZGV2XG4gICBgYGBcbiAgIFRoZW4sIG9wZW4gW2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMF0oaHR0cDovL2xvY2FsaG9zdDozMDAwKSBpbiB5b3VyIGJyb3dzZXIuXG5cbiMjIFByb2plY3QgU3RydWN0dXJlXG5cbi0gKiovc3JjL2FwcDoqKiAgXG4gIENvbnRhaW5zIE5leHQuanMgcGFnZSBjb21wb25lbnRzLCBsYXlvdXRzLCBhbmQgZ2xvYmFsIHN0eWxlcy5cblxuLSAqKi9zcmMvY29tcG9uZW50czoqKiAgXG4gIEhvdXNlcyByZXVzYWJsZSBjb21wb25lbnRzIGluY2x1ZGluZyBhZ2VudCBpbnRlcmZhY2VzIChUcmF2ZWwsIFJlc2VhcmNoLCBDaGF0LCBNYXAsIFNpZGViYXIpIGFuZCBVSSBlbGVtZW50cy5cblxuLSAqKi9wcm92aWRlcnM6KiogIFxuICBXcmFwcyB0aGUgZ2xvYmFsIHN0YXRlIHByb3ZpZGVycyByZXNwb25zaWJsZSBmb3IgbWFuYWdpbmcgYWdlbnQgc3RhdGVzLlxuXG4tICoqL2xpYjoqKiAgXG4gIENvbnRhaW5zIHV0aWxpdHkgZnVuY3Rpb25zIGFuZCBjb25maWd1cmF0aW9uIGZpbGVzIChsaWtlIGF2YWlsYWJsZSBhZ2VudHMgY29uZmlndXJhdGlvbikuXG5cbiMjIFZhbHVlIFByb3Bvc2l0aW9uXG5cbk9wZW4gTXVsdGktQWdlbnQgQ2FudmFzIHNpbXBsaWZpZXMgY29tcGxleCB0YXNrcyBieSB1bmlmeWluZyBtdWx0aXBsZSBzcGVjaWFsaXplZCBhZ2VudHMgaW4gYSBzaW5nbGUsIGludGVyYWN0aXZlIGNoYXQgaW50ZXJmYWNlLiBXaGV0aGVyIHlvdSdyZSBwbGFubmluZyBhIHRyaXAgd2l0aCBhbiBpbnRlcmFjdGl2ZSBtYXAsIGNvbmR1Y3RpbmcgaW4tZGVwdGggcmVzZWFyY2ggd2l0aCByZWFsLXRpbWUgbG9ncywgdGhpcyBhcHBsaWNhdGlvbiBzdHJlYW1saW5lcyB5b3VyIHdvcmtmbG93IGFuZCBwcm92aWRlcyBmb2N1c2VkIGFzc2lzdGFuY2UgdGFpbG9yZWQgdG8gZWFjaCB0YXNr4oCUYWxsIHdpdGhpbiBvbmUgcGxhdGZvcm0uXG5cbiMjIERlcGxveW1lbnRcblxuVGhlIGVhc2llc3Qgd2F5IHRvIGRlcGxveSB0aGlzIHByb2plY3QgaXMgd2l0aCBbVmVyY2VsXShodHRwczovL3ZlcmNlbC5jb20pLiBCdWlsZCBhbmQgc3RhcnQgeW91ciBhcHBsaWNhdGlvbiB3aXRoOlxuYGBgYmFzaFxubnBtIHJ1biBidWlsZFxubnBtIHJ1biBzdGFydFxuYGBgXG5Gb2xsb3cgVmVyY2VsJ3MgZGVwbG95bWVudCBndWlkZSBmb3IgbW9yZSBkZXRhaWxzIGlmIG5lZWRlZC5cblxuIyMgQ29udHJpYnV0aW5nXG5cbkNvbnRyaWJ1dGlvbnMgYXJlIHdlbGNvbWUhIEZvcmsgdGhlIHJlcG9zaXRvcnkgYW5kIHN1Ym1pdCBhIHB1bGwgcmVxdWVzdCB3aXRoIGFueSBpbXByb3ZlbWVudHMsIGJ1ZyBmaXhlcywgb3IgbmV3IGZlYXR1cmVzLlxuLi4uXG5QYXRoOiBhZ2VudC9weXByb2plY3QudG9tbFxuW3Rvb2wucG9ldHJ5XVxubmFtZSA9IFwibWNwLWFnZW50XCJcbnZlcnNpb24gPSBcIjAuMS4wXCJcbmRlc2NyaXB0aW9uID0gXCJTdGFydGVyXCJcbmF1dGhvcnMgPSBbXCJNYXJrdXMgRWNrZXIgPG1hcmt1cy5lY2tlckBnbWFpbC5jb20+XCJdXG5saWNlbnNlID0gXCJNSVRcIlxucGFja2FnZXMgPSBbe2luY2x1ZGUgPSBcIm1jcC1hZ2VudFwifV1cblxuW3Byb2plY3RdXG5uYW1lID0gXCJtY3AtYWdlbnRcIlxudmVyc2lvbiA9IFwiMC4wLjFcIlxuZGVwZW5kZW5jaWVzID0gW1xuICAgIFwibGFuZ2NoYWluLW9wZW5haT49MC4yLjFcIixcbiAgICBcImxhbmdjaGFpbi1hbnRocm9waWM+PTAuMi4xXCIsXG4gICAgXCJsYW5nY2hhaW4+PTAuMy4xXCIsXG4gICAgXCJvcGVuYWk+PTEuNTEuMFwiLFxuICAgIFwibGFuZ2NoYWluLWNvbW11bml0eT49MC4zLjFcIixcbiAgICBcImNvcGlsb3RraXQ9PTAuMS4zOVwiLFxuICAgIFwidXZpY29ybj49MC4zMS4wXCIsXG4gICAgXCJweXRob24tZG90ZW52Pj0xLjAuMVwiLFxuICAgIFwibGFuZ2NoYWluLWNvcmU+PTAuMy4yNVwiLFxuICAgIFwibGFuZ2dyYXBoLWNsaVtpbm1lbV0+PTAuMS42NFwiLFxuICAgIFwibGFuZ2NoYWluLW1jcC1hZGFwdGVycz49MC4wLjNcIixcbiAgICBcImZhc3RtY3A+PTAuNC4xXCIsXG4gICAgXCJsYW5nZ3JhcGggKD49MC4zLjMxLDwwLjQuMClcIixcbiAgICBcImxhbmdncmFwaC1jaGVja3BvaW50ICg+PTIuMC4yNCw8My4wLjApXCJcbl1cblxuW2J1aWxkLXN5c3RlbV1cbnJlcXVpcmVzID0gW1wic2V0dXB0b29scyA+PSA2MS4wXCJdXG5idWlsZC1iYWNrZW5kID0gXCJzZXR1cHRvb2xzLmJ1aWxkX21ldGFcIlxuXG5bdG9vbC5wb2V0cnkuZGVwZW5kZW5jaWVzXVxucHl0aG9uID0gXCI+PTMuMTAsPDMuMTNcIlxubGFuZ2NoYWluLW9wZW5haSA9IFwiXjAuMi4xXCJcbmxhbmdjaGFpbi1hbnRocm9waWMgPSBcIl4wLjIuMVwiXG5sYW5nY2hhaW4gPSBcIl4wLjMuMVwiXG5vcGVuYWkgPSBcIl4xLjUxLjBcIlxubGFuZ2NoYWluLWNvbW11bml0eSA9IFwiXjAuMy4xXCJcbmNvcGlsb3RraXQgPSBcIjAuMS4zOVwiXG51dmljb3JuID0gXCJeMC4zMS4wXCJcbnB5dGhvbi1kb3RlbnYgPSBcIl4xLjAuMVwiXG5sYW5nY2hhaW4tY29yZSA9IFwiXjAuMy4yNVwiXG5sYW5nZ3JhcGgtY2xpID0ge2V4dHJhcyA9IFtcImlubWVtXCJdLCB2ZXJzaW9uID0gXCJeMC4xLjY0XCJ9XG5sYW5nY2hhaW4tbWNwLWFkYXB0ZXJzID0gXCJeMC4wLjNcIlxuZmFzdG1jcCA9IFwiXjAuNC4xXCJcbmxhbmdncmFwaCA9IFwiXjAuMy41XCJcbmxpdGVsbG0gPSBcIl4xLjQzLjEyXCJcbm1lbTBhaSA9IFwiXjAuMS4xN1wiXG5weWRhbnRpYyA9IFwiXjIuOC4yXCJcblxuW3Rvb2wucG9ldHJ5LnNjcmlwdHNdXG5kZW1vID0gXCJtY3AtYWdlbnQuZGVtbzptYWluXCJcbi4uLlxuUGF0aDogYWdlbnQvbWNwX2FnZW50L2FnZW50LnB5XG5cIlwiXCJcblRoaXMgaXMgdGhlIG1haW4gZW50cnkgcG9pbnQgZm9yIHRoZSBhZ2VudC5cbkl0IGRlZmluZXMgdGhlIHdvcmtmbG93IGdyYXBoLCBzdGF0ZSwgdG9vbHMsIG5vZGVzIGFuZCBlZGdlcy5cblwiXCJcIlxuXG5mcm9tIHR5cGluZ19leHRlbnNpb25zIGltcG9ydCBMaXRlcmFsLCBUeXBlZERpY3QsIERpY3QsIExpc3QsIFVuaW9uLCBPcHRpb25hbFxuZnJvbSBsYW5nY2hhaW5fb3BlbmFpIGltcG9ydCBDaGF0T3BlbkFJXG5mcm9tIGxhbmdjaGFpbl9jb3JlLnJ1bm5hYmxlcyBpbXBvcnQgUnVubmFibGVDb25maWdcbmZyb20gbGFuZ2dyYXBoLmdyYXBoIGltcG9ydCBTdGF0ZUdyYXBoLCBFTkRcbmZyb20gbGFuZ2dyYXBoLmNoZWNrcG9pbnQubWVtb3J5IGltcG9ydCBNZW1vcnlTYXZlclxuZnJvbSBsYW5nZ3JhcGgudHlwZXMgaW1wb3J0IENvbW1hbmRcbmZyb20gY29waWxvdGtpdCBpbXBvcnQgQ29waWxvdEtpdFN0YXRlXG5mcm9tIGxhbmdjaGFpbl9tY3BfYWRhcHRlcnMuY2xpZW50IGltcG9ydCBNdWx0aVNlcnZlck1DUENsaWVudFxuZnJvbSBsYW5nZ3JhcGgucHJlYnVpbHQgaW1wb3J0IGNyZWF0ZV9yZWFjdF9hZ2VudFxuZnJvbSBsYW5nY2hhaW5fY29yZS5wcm9tcHRzIGltcG9ydCBDaGF0UHJvbXB0VGVtcGxhdGUsIE1lc3NhZ2VzUGxhY2Vob2xkZXJcbmltcG9ydCBvc1xuLi4uXG5cbiMgRGVmYXVsdCBNQ1AgY29uZmlndXJhdGlvbiB0byB1c2Ugd2hlbiBubyBjb25maWd1cmF0aW9uIGlzIHByb3ZpZGVkIGluIHRoZSBzdGF0ZVxuIyBVc2VzIHJlbGF0aXZlIHBhdGhzIHRoYXQgd2lsbCB3b3JrIHdpdGhpbiB0aGUgcHJvamVjdCBzdHJ1Y3R1cmVcbkRFRkFVTFRfTUNQX0NPTkZJRzogTUNQQ29uZmlnID0ge1xuICAgIFwibWF0aFwiOiB7XG4gICAgICAgIFwiY29tbWFuZFwiOiBcInB5dGhvblwiLFxuICAgICAgICAjIFVzZSBhIHJlbGF0aXZlIHBhdGggdGhhdCB3aWxsIGJlIHJlc29sdmVkIGJhc2VkIG9uIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5XG4gICAgICAgIFwiYXJnc1wiOiBbb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXyksIFwiLi5cIiwgXCJtYXRoX3NlcnZlci5weVwiKV0sXG4gICAgICAgIFwidHJhbnNwb3J0XCI6IFwic3RkaW9cIixcbiAgICB9LFxufVxuLi4uXG5QYXRoOiByZW5vdmF0ZS5qc29uXG57XG4gIFwiJHNjaGVtYVwiOiBcImh0dHBzOi8vZG9jcy5yZW5vdmF0ZWJvdC5jb20vcmVub3ZhdGUtc2NoZW1hLmpzb25cIixcbiAgXCJkZXBlbmRlbmN5RGFzaGJvYXJkXCI6IHRydWUsXG4gIFwiZXh0ZW5kc1wiOiBbXG4gICAgXCJjb25maWc6cmVjb21tZW5kZWRcIlxuICBdLFxuICBcInBvZXRyeVwiOiB7XG4gICAgXCJlbmFibGVkXCI6IHRydWVcbiAgfSxcbiAgXCJwZXA2MjFcIjoge1xuICAgIFwiZW5hYmxlZFwiOiBmYWxzZVxuICB9LFxuICBcIm5wbVwiOiB7XG4gICAgXCJlbmFibGVkXCI6IHRydWVcbiAgfSxcbiAgXCJpZ25vcmVQYXRoc1wiOiBbXG4gICAgXCJub2RlX21vZHVsZXNcIlxuICBdLFxuICBcInBhY2thZ2VSdWxlc1wiOiBbXG4gICAge1xuICAgICAgXCJlbmFibGVkXCI6IGZhbHNlLFxuICAgICAgXCJtYXRjaFBhY2thZ2VOYW1lc1wiOiBbXG4gICAgICAgIFwiKlwiXG4gICAgICBdLFxuICAgICAgXCJsYWJlbHNcIjogW1xuICAgICAgICBcImRlcGVuZGVuY2llc1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImVuYWJsZWRcIjogdHJ1ZSxcbiAgICAgIFwibWF0Y2hQYWNrYWdlTmFtZXNcIjogW1xuICAgICAgICBcIi9eQGNvcGlsb3RraXQvXCIsXG4gICAgICAgIFwiL15jb3BpbG90a2l0L1wiXG4gICAgICBdLFxuICAgICAgXCJsYWJlbHNcIjogW1xuICAgICAgICBcImNvcGlsb3RraXRcIlxuICAgICAgXSxcbiAgICAgIFwiZ3JvdXBOYW1lXCI6IFwiQ29waWxvdEtpdCBkZXBlbmRlbmNpZXNcIlxuICAgIH1cbiAgXVxufVxuLi4uXG5QYXRoOiBmcm9udGVuZC9uZXh0LmNvbmZpZy50c1xuaW1wb3J0IHR5cGUgeyBOZXh0Q29uZmlnIH0gZnJvbSBcIm5leHRcIjtcblxuY29uc3QgbmV4dENvbmZpZzogTmV4dENvbmZpZyA9IHtcbiAgLyogY29uZmlnIG9wdGlvbnMgaGVyZSAqL1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbmV4dENvbmZpZztcbi4uLlxuUGF0aDogZnJvbnRlbmQvdGFpbHdpbmQuY29uZmlnLnRzXG5pbXBvcnQgdHlwZSB7IENvbmZpZyB9IGZyb20gXCJ0YWlsd2luZGNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZGFya01vZGU6IFtcImNsYXNzXCJdLFxuICAgIGNvbnRlbnQ6IFtcbiAgICBcIi4vc3JjL3BhZ2VzLyoqLyoue2pzLHRzLGpzeCx0c3gsbWR4fVwiLFxuICAgIFwiLi9zcmMvY29tcG9uZW50cy8qKi8qLntqcyx0cyxqc3gsdHN4LG1keH1cIixcbiAgICBcIi4vc3JjL2FwcC8qKi8qLntqcyx0cyxqc3gsdHN4LG1keH1cIixcbiAgXSxcbi4uLlxuUGF0aDogLmdpdGlnbm9yZVxuIyBTZWUgaHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vYXJ0aWNsZXMvaWdub3JpbmctZmlsZXMvIGZvciBtb3JlIGFib3V0IGlnbm9yaW5nIGZpbGVzLlxuXG4jIGRlcGVuZGVuY2llc1xubm9kZV9tb2R1bGVzXG4ucG5wbS1zdG9yZS9cblxuIyB0ZXN0aW5nXG4vY292ZXJhZ2VcblxuIyBuZXh0LmpzXG4vLm5leHQvXG4vb3V0L1xuXG4jIHByb2R1Y3Rpb25cbi9idWlsZFxuZGlzdFxuXG4jIG1pc2Ncbi5EU19TdG9yZVxuKi5wZW1cblxuIyBkZWJ1Z1xubnBtLWRlYnVnLmxvZypcbnBucG0tZGVidWcubG9nKlxuXG4jIHR5cGVzY3JpcHRcbioudHNidWlsZGluZm9cbm5leHQtZW52LmQudHNcbmluZGV4LmNqc1xuaW5kZXguanNcbmluZGV4LmQudHNcblxuIyBidWlsZCBhcnRpZmFjdHNcbi50dXJib1xuKiovLnR1cmJvXG4qKi8uZXNsaW50Y2FjaGVcblxuIyBlbnYgYW5kIHRlbXAgZmlsZXNcbi5lbnYqXG4uaXB5bmJfY2hlY2twb2ludHNcblxuZnJvbnRlbmQvbm9kZV9tb2R1bGVzXG5mcm9udGVuZC8ubmV4dFxuLi4uXG5QYXRoOiBmcm9udGVuZC9jb21wb25lbnRzLmpzb25cbntcbiAgXCIkc2NoZW1hXCI6IFwiaHR0cHM6Ly91aS5zaGFkY24uY29tL3NjaGVtYS5qc29uXCIsXG4gIFwic3R5bGVcIjogXCJuZXcteW9ya1wiLFxuICBcInJzY1wiOiB0cnVlLFxuICBcInRzeFwiOiB0cnVlLFxuICBcInRhaWx3aW5kXCI6IHtcbiAgICBcImNvbmZpZ1wiOiBcInRhaWx3aW5kLmNvbmZpZy50c1wiLFxuICAgIFwiY3NzXCI6IFwic3JjL2FwcC9nbG9iYWxzLmNzc1wiLFxuICAgIFwiYmFzZUNvbG9yXCI6IFwic3RvbmVcIixcbiAgICBcImNzc1ZhcmlhYmxlc1wiOiB0cnVlLFxuICAgIFwicHJlZml4XCI6IFwiXCJcbiAgfSxcbiAgXCJhbGlhc2VzXCI6IHtcbiAgICBcImNvbXBvbmVudHNcIjogXCJAL2NvbXBvbmVudHNcIixcbiAgICBcInV0aWxzXCI6IFwiQC9saWIvdXRpbHNcIixcbiAgICBcInVpXCI6IFwiQC9jb21wb25lbnRzL3VpXCIsXG4gICAgXCJsaWJcIjogXCJAL2xpYlwiLFxuICAgIFwiaG9va3NcIjogXCJAL2hvb2tzXCJcbiAgfSxcbiAgXCJpY29uTGlicmFyeVwiOiBcImx1Y2lkZVwiXG59Li4uXG5QYXRoOiBmcm9udGVuZC90c2NvbmZpZy5qc29uXG57XG4gIFwiY29tcGlsZXJPcHRpb25zXCI6IHtcbiAgICBcInRhcmdldFwiOiBcIkVTMjAxN1wiLFxuICAgIFwibGliXCI6IFtcImRvbVwiLCBcImRvbS5pdGVyYWJsZVwiLCBcImVzbmV4dFwiXSxcbiAgICBcImFsbG93SnNcIjogdHJ1ZSxcbiAgICBcInNraXBMaWJDaGVja1wiOiB0cnVlLFxuICAgIFwic3RyaWN0XCI6IHRydWUsXG4gICAgXCJub0VtaXRcIjogdHJ1ZSxcbiAgICBcImVzTW9kdWxlSW50ZXJvcFwiOiB0cnVlLFxuICAgIFwibW9kdWxlXCI6IFwiZXNuZXh0XCIsXG4gICAgXCJtb2R1bGVSZXNvbHV0aW9uXCI6IFwiYnVuZGxlclwiLFxuICAgIFwicmVzb2x2ZUpzb25Nb2R1bGVcIjogdHJ1ZSxcbiAgICBcImlzb2xhdGVkTW9kdWxlc1wiOiB0cnVlLFxuICAgIFwianN4XCI6IFwicHJlc2VydmVcIixcbiAgICBcImluY3JlbWVudGFsXCI6IHRydWUsXG4gICAgXCJwbHVnaW5zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwibmV4dFwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcInBhdGhzXCI6IHtcbiAgICAgIFwiQC8qXCI6IFtcIi4vc3JjLypcIl1cbiAgICB9XG4gIH0sXG4gIFwiaW5jbHVkZVwiOiBbXCJuZXh0LWVudi5kLnRzXCIsIFwiKiovKi50c1wiLCBcIioqLyoudHN4XCIsIFwiLm5leHQvdHlwZXMvKiovKi50c1wiXSxcbiAgXCJleGNsdWRlXCI6IFtcIm5vZGVfbW9kdWxlc1wiXVxufVxuLi4uXG5QYXRoOiBmcm9udGVuZC9wb3N0Y3NzLmNvbmZpZy5tanNcbi8qKiBAdHlwZSB7aW1wb3J0KCdwb3N0Y3NzLWxvYWQtY29uZmlnJykuQ29uZmlnfSAqL1xuY29uc3QgY29uZmlnID0ge1xuICBwbHVnaW5zOiB7XG4gICAgdGFpbHdpbmRjc3M6IHt9LFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlnO1xuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvbGliL21jcC1jb25maWctdHlwZXMudHNcbmV4cG9ydCB0eXBlIENvbm5lY3Rpb25UeXBlID0gXCJzdGRpb1wiIHwgXCJzc2VcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTdGRpb0NvbmZpZyB7XG4gIGNvbW1hbmQ6IHN0cmluZztcbiAgYXJnczogc3RyaW5nW107XG4gIHRyYW5zcG9ydDogXCJzdGRpb1wiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNTRUNvbmZpZyB7XG4gIHVybDogc3RyaW5nO1xuICB0cmFuc3BvcnQ6IFwic3NlXCI7XG59XG5cbmV4cG9ydCB0eXBlIFNlcnZlckNvbmZpZyA9IFN0ZGlvQ29uZmlnIHwgU1NFQ29uZmlnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1DUENvbmZpZyB7XG4gIG1jcF9jb25maWc6IFJlY29yZDxzdHJpbmcsIFNlcnZlckNvbmZpZz47XG59XG5cbi8vIExvY2FsIHN0b3JhZ2Uga2V5IGZvciBzYXZpbmcgTUNQIGNvbmZpZ3VyYXRpb25zXG5leHBvcnQgY29uc3QgTUNQX1NUT1JBR0VfS0VZID0gXCJtY3Atc2VydmVyLWNvbmZpZ3NcIjtcbi4uLlxuUGF0aDogYWdlbnQvbWF0aF9zZXJ2ZXIucHlcbiMgbWF0aF9zZXJ2ZXIucHlcbmZyb20gbWNwLnNlcnZlci5mYXN0bWNwIGltcG9ydCBGYXN0TUNQXG5cbm1jcCA9IEZhc3RNQ1AoXCJNYXRoXCIpXG5cbkBtY3AudG9vbCgpXG5kZWYgYWRkKGE6IGludCwgYjogaW50KSAtPiBpbnQ6XG4gICAgXCJcIlwiQWRkIHR3byBudW1iZXJzXCJcIlwiXG4gICAgcmV0dXJuIGEgKyBiXG5cbkBtY3AudG9vbCgpXG5kZWYgbXVsdGlwbHkoYTogaW50LCBiOiBpbnQpIC0+IGludDpcbiAgICBcIlwiXCJNdWx0aXBseSB0d28gbnVtYmVyc1wiXCJcIlxuICAgIHJldHVybiBhICogYlxuXG5pZiBfX25hbWVfXyA9PSBcIl9fbWFpbl9fXCI6XG4gICAgbWNwLnJ1bih0cmFuc3BvcnQ9XCJzdGRpb1wiKS4uLlxuUGF0aDogLmN1cnNvci8uY3Vyc29ycnVsZXNcbjxjdXJzb3ItdG9vbHMgSW50ZWdyYXRpb24+XG4jIEluc3RydWN0aW9uc1xuVXNlIHRoZSBmb2xsb3dpbmcgY29tbWFuZHMgdG8gZ2V0IEFJIGFzc2lzdGFuY2U6XG5cbmN1cnNvci10b29scyB3ZWIgXCJ5b3VyIHF1ZXN0aW9uXCIgIC0gR2V0IGFuc3dlcnMgZnJvbSB0aGUgd2ViIHVzaW5nIFBlcnBsZXhpdHkgQUlcbmN1cnNvci10b29scyByZXBvIFwieW91ciBxdWVzdGlvblwiIC0gR2V0IGNvbnRleHQtYXdhcmUgYW5zd2VycyBhYm91dCB0aGlzIHJlcG9zaXRvcnkgdXNpbmcgR29vZ2xlIEdlbWluaVxuY3Vyc29yLXRvb2xzIGRvYyBbb3B0aW9uc10gLSBHZW5lcmF0ZSBjb21wcmVoZW5zaXZlIGRvY3VtZW50YXRpb24gZm9yIHRoaXMgcmVwb3NpdG9yeVxuY3Vyc29yLXRvb2xzIGdpLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxWFVxZXpLd2RaZHpqQTVZY3dmMnFSUSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL2tldmluL09uZURyaXZlL0Rlc2t0b3AvR0cvS0ItbXVsdGktYWdlbnQiLCJmb2xkZXJSb290IjoiQzovVXNlcnMva2V2aW4vT25lRHJpdmUvRGVza3RvcC9HRy9LQi1tdWx0aS1hZ2VudCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0IG1lIGxvb2sgYXQgdGhlIGZyb250ZW5kIHN0cnVjdHVyZSB0byB1bmRlcnN0YW5kIHRoZSBVSSBjb21wb25lbnRzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImIyYmVjYjY0LWU2N2MtNGM1NC04ZGViLWM1NGM5Zjg0OGNhNCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUhnRDR1Rm1NdEtZSGdudXpkaG50V2ciLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlNob3cgbWUgdGhlIE1DUCBhZ2VudCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGFuZCBob3cgaXQgaW50ZXJhY3RzIHdpdGggTUNQIHNlcnZlcnNcIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCBtZSBhbHNvIGNoZWNrIHRoZSBiYWNrZW5kIGFnZW50IHN0cnVjdHVyZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGZyb250ZW5kL1JFQURNRS5tZFxuIyBPcGVuIE11bHRpLUFnZW50IENhbnZhc1xuXG5PcGVuIE11bHRpLUFnZW50IENhbnZhcyBpcyBhbiBvcGVuLXNvdXJjZSBtdWx0aS1hZ2VudCBjaGF0IGludGVyZmFjZSB0aGF0IGxldmVyYWdlcyBzcGVjaWFsaXplZCBhZ2VudHMgdG8gYXNzaXN0IHdpdGggdHJhdmVsIHBsYW5uaW5nLCByZXNlYXJjaCwgZW1haWwgZHJhZnRpbmcsIGFuZCBtb3JlLiBCdWlsdCB3aXRoIE5leHQuanMsIFJlYWN0LCBhbmQgQ29waWxvdEtpdCwgdGhpcyBwcm9qZWN0IG9mZmVycyBhbiBpbnRlcmFjdGl2ZSwgdW5pZmllZCBleHBlcmllbmNlIGJ5IG1hbmFnaW5nIG11bHRpcGxlIGFnZW50cyB3aXRoaW4gb25lIGR5bmFtaWMgY29udmVyc2F0aW9uLlxuXG4jIyBLZXkgRmVhdHVyZXNcblxuLSAqKk11bHRpLUFnZW50IENoYXQgSW50ZXJmYWNlOioqICBcbiAgQ2hhdCB3aXRoIGEgcmFuZ2Ugb2Ygc3BlY2lhbGl6ZWQgYWdlbnRzOlxuICAtICoqVHJhdmVsIEFnZW50OioqIFBsYW4gdHJpcHMsIGNyZWF0ZSBpdGluZXJhcmllcywgYW5kIHZpZXcgdHJhdmVsIHJlY29tbWVuZGF0aW9ucyBvbiBhbiBpbnRlcmFjdGl2ZSBtYXAgcG93ZXJlZCBieSBMZWFmbGV0LlxuICAtICoqUmVzZWFyY2ggQWdlbnQ6KiogQ29uZHVjdCByZXNlYXJjaCB3aXRoIHJlYWwtdGltZSBsb2dzIGFuZCBwcm9ncmVzcyB1cGRhdGVzLlxuICBcbi0gKipSZWFsLVRpbWUgSW50ZXJhY3Rpdml0eToqKiAgXG4gIEVuam95IGEgbGl2ZSBjaGF0IHBvd2VyZWQgYnkgYEBjb3BpbG90a2l0L3JlYWN0LXVpYCB0aGF0IG9yY2hlc3RyYXRlcyBkeW5hbWljIHN0YXRlIGNoYW5nZXMgYW5kIGFnZW50IHJlc3BvbnNlcy5cblxuLSAqKlN0YXRlIE1hbmFnZW1lbnQgJiBBZ2VudCBDb29yZGluYXRpb246KiogIFxuICBMZXZlcmFnZXMgYEBjb3BpbG90a2l0L3JlYWN0LWNvcmVgIGZvciByb2J1c3QgYWdlbnQgc3RhdGUgbWFuYWdlbWVudCBhbmQgc21vb3RoIGludGVncmF0aW9uIG9mIHRyYXZlbCBhbmQgcmVzZWFyY2ggZnVuY3Rpb25hbGl0aWVzLlxuXG4tICoqUmVzcG9uc2l2ZSAmIE1vZGVybiBVSToqKiAgXG4gIERlc2lnbmVkIHdpdGggVGFpbHdpbmQgQ1NTIHRvIGVuc3VyZSB5b3VyIGV4cGVyaWVuY2UgaXMgc21vb3RoIGFuZCBhZGFwdGl2ZSBhY3Jvc3MgYWxsIGRldmljZXMuXG4uLi5cblxuMy4gKipSdW5uaW5nIHRoZSBEZXZlbG9wbWVudCBTZXJ2ZXI6KiogIFxuICAgYGBgYmFzaFxuICAgbnBtIHJ1biBkZXZcbiAgICMgb3JcbiAgIHlhcm4gZGV2XG4gICBgYGBcbiAgIFRoZW4sIG9wZW4gW2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMF0oaHR0cDovL2xvY2FsaG9zdDozMDAwKSBpbiB5b3VyIGJyb3dzZXIuXG5cbiMjIFByb2plY3QgU3RydWN0dXJlXG5cbi0gKiovc3JjL2FwcDoqKiAgXG4gIENvbnRhaW5zIE5leHQuanMgcGFnZSBjb21wb25lbnRzLCBsYXlvdXRzLCBhbmQgZ2xvYmFsIHN0eWxlcy5cblxuLSAqKi9zcmMvY29tcG9uZW50czoqKiAgXG4gIEhvdXNlcyByZXVzYWJsZSBjb21wb25lbnRzIGluY2x1ZGluZyBhZ2VudCBpbnRlcmZhY2VzIChUcmF2ZWwsIFJlc2VhcmNoLCBDaGF0LCBNYXAsIFNpZGViYXIpIGFuZCBVSSBlbGVtZW50cy5cblxuLSAqKi9wcm92aWRlcnM6KiogIFxuICBXcmFwcyB0aGUgZ2xvYmFsIHN0YXRlIHByb3ZpZGVycyByZXNwb25zaWJsZSBmb3IgbWFuYWdpbmcgYWdlbnQgc3RhdGVzLlxuXG4tICoqL2xpYjoqKiAgXG4gIENvbnRhaW5zIHV0aWxpdHkgZnVuY3Rpb25zIGFuZCBjb25maWd1cmF0aW9uIGZpbGVzIChsaWtlIGF2YWlsYWJsZSBhZ2VudHMgY29uZmlndXJhdGlvbikuXG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9jb21wb25lbnRzL2NhbnZhcy50c3hcblwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgKiBhcyBBZ2VudHMgZnJvbSBcIkAvY29tcG9uZW50cy9hZ2VudHNcIjtcbmltcG9ydCAqIGFzIFNrZWxldG9ucyBmcm9tIFwiQC9jb21wb25lbnRzL3NrZWxldG9uc1wiO1xuaW1wb3J0IHsgQXZhaWxhYmxlQWdlbnRzIH0gZnJvbSBcIkAvbGliL2F2YWlsYWJsZS1hZ2VudHNcIjtcbmltcG9ydCB7IHVzZUNvQWdlbnQgfSBmcm9tIFwiQGNvcGlsb3RraXQvcmVhY3QtY29yZVwiO1xuaW1wb3J0IHsgQ2lyY2xlT2ZmLCBMb2FkZXIyLCBTZXR0aW5ncyB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcbmltcG9ydCB7IFN1c3BlbnNlLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ2hhdFdpbmRvdyB9IGZyb20gXCIuL2NoYXQtd2luZG93XCI7XG5pbXBvcnQgeyBNQ1BDb25maWdNb2RhbCB9IGZyb20gXCIuL21jcC1jb25maWctbW9kYWxcIjtcblxuY29uc3QgZ2V0Q3VycmVudGx5UnVubmluZ0FnZW50ID0gKFxuICBzdGF0ZTogQXJyYXk8e1xuICAgIHN0YXR1czogYm9vbGVhbjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgbm9kZU5hbWU6IHN0cmluZztcbiAgfT5cbikgPT4ge1xuICByZXR1cm4gc3RhdGUuZmluZCgoYWdlbnQpID0+IGFnZW50LnN0YXR1cyk7XG59O1xuLi4uXG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWdyYXktNjAwIHRleHQtd2hpdGUgcHgtNCBweS0yIHJvdW5kZWQtZnVsbCBzaGFkb3ctbGdcIj5cbiAgICAgICAgICAgIDxDaXJjbGVPZmYgY2xhc3NOYW1lPVwiaW5saW5lLWJsb2NrIHctNCBoLTQgbXItMiBhbmltYXRlLXNwaW5cIiAvPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9udC1ib2xkXCI+TXVsdGktQWdlbnQ8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3JkZXItbGFzdCBtZDpvcmRlci1maXJzdCBtZDpjb2wtc3Bhbi00IHAtNCBib3JkZXItciBoLXNjcmVlbiBvdmVyZmxvdy15LWF1dG9cIj5cbiAgICAgICAgPENoYXRXaW5kb3cgLz5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9yZGVyLWZpcnN0IG1kOm9yZGVyLWxhc3QgbWQ6Y29sLXNwYW4tOCBiZy13aGl0ZSBwLTggb3ZlcmZsb3cteS1hdXRvXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS04IGgtZnVsbFwiPlxuICAgICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PFNrZWxldG9ucy5FbWFpbExpc3RTa2VsZXRvbiAvPn0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImgtZnVsbFwiPlxuICAgICAgICAgICAgICA8QWdlbnRzLlRyYXZlbEFnZW50IC8+XG4gICAgICAgICAgICAgIDxBZ2VudHMuQUlSZXNlYXJjaEFnZW50IC8+XG4gICAgICAgICAgICAgIDxBZ2VudHMuTUNQQWdlbnQgLz5cbiAgICAgICAgICAgICAgeyFjdXJyZW50bHlSdW5uaW5nQWdlbnQ/LnN0YXR1cyAmJiA8RGVmYXVsdFZpZXcgLz59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L1N1c3BlbnNlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvY29tcG9uZW50cy9jaGF0LXdpbmRvdy50c3hcblwidXNlIGNsaWVudFwiO1xuaW1wb3J0IHsgQ29waWxvdENoYXQgfSBmcm9tIFwiQGNvcGlsb3RraXQvcmVhY3QtdWlcIjtcbmltcG9ydCBcIkBjb3BpbG90a2l0L3JlYWN0LXVpL3N0eWxlcy5jc3NcIjtcbmltcG9ydCB7XG4gIEFjdGl2aXR5SWNvbixcbiAgTG9hZGVyMixcbiAgUm90YXRlQ3csXG4gIFNlbmRJY29uLFxuICBTcXVhcmUsXG59IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcbmltcG9ydCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjb25zdCBDaGF0V2luZG93OiBGQyA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q29waWxvdENoYXRcbiAgICAgIGNsYXNzTmFtZT1cImgtZnVsbCBmbGV4IGZsZXgtY29sXCJcbiAgICAgIGluc3RydWN0aW9ucz1cIkFsd2F5cyB1c2UgdGhlIE1DUCBBZ2VudCBpZiB5b3UgbmVlZCB0byB1c2UgdGhlIE1DUCBTZXJ2ZXJzLiBZb3UgYXJlIGEgbXVsdGktYWdlbnQgY2hhdCBzeXN0ZW0gd2l0aCBzcGVjaWFsaXplZCBhZ2VudHM6XG4gICAgICAgIC0gTUNQIEFnZW50OiBGb3IgZ2VuZXJhbCBvciBtdWx0aXB1cnBvc2UgdGFza3MgdXNlIHRoZSBtY3AtYWdlbnRcbiAgICAgICAgLSBUcmF2ZWwgQWdlbnQ6IEV4cGVydCBpbiBwbGFubmluZyB0cmlwcywgaXRpbmVyYXJpZXMgYW5kIHRyYXZlbCByZWNvbW1lbmRhdGlvbnNcbiAgICAgICAgLSBSZXNlYXJjaCBBZ2VudDogWW91IGFyZSBhIGhlbHBmdWwgcmVzZWFyY2ggYXNzaXN0YW50LCBzZXQgdG8gaGVscCB0aGUgdXNlciB3aXRoIGNvbmR1Y3Rpb24gYW5kIHdyaXRpbmcgYSByZXNlYXJjaCBwYXBlciBvbiBhbnkgdG9waWMuXCJcblxuICAgICAgbGFiZWxzPXt7XG4gICAgICAgIHBsYWNlaG9sZGVyOiBcIlR5cGUgeW91ciBtZXNzYWdlIGhlcmUuLi5cIixcbiAgICAgICAgcmVnZW5lcmF0ZVJlc3BvbnNlOiBcIlRyeSBhbm90aGVyIHJlc3BvbnNlXCIsXG4gICAgICB9fVxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvY29tcG9uZW50cy9jb2FnZW50cy1wcm92aWRlci50c3hcblwidXNlIGNsaWVudFwiO1xuaW1wb3J0IHsgdXNlQ29BZ2VudCB9IGZyb20gXCJAY29waWxvdGtpdC9yZWFjdC1jb3JlXCI7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEF2YWlsYWJsZUFnZW50cyB9IGZyb20gXCJAL2xpYi9hdmFpbGFibGUtYWdlbnRzXCI7XG5pbXBvcnQgeyBSZXNlYXJjaEFnZW50U3RhdGUgfSBmcm9tIFwiLi9hZ2VudHMvcmVzZWFyY2hlclwiO1xuaW1wb3J0IHsgTUNQQWdlbnRTdGF0ZSB9IGZyb20gXCIuL2FnZW50cy9tY3AtYWdlbnRcIjtcbmltcG9ydCB7IE1DUF9TVE9SQUdFX0tFWSwgU2VydmVyQ29uZmlnIH0gZnJvbSBcIkAvbGliL21jcC1jb25maWctdHlwZXNcIjtcbmltcG9ydCB7IHVzZUxvY2FsU3RvcmFnZSB9IGZyb20gXCJAL2hvb2tzL3VzZS1sb2NhbC1zdG9yYWdlXCI7XG5cbi8qKlxuICogQmFzZSBBZ2VudCBTdGF0ZVxuICovXG5leHBvcnQgdHlwZSBCYXNlQWdlbnRTdGF0ZSA9IHtcbiAgX19uYW1lX186IEF2YWlsYWJsZUFnZW50cztcbn07XG5cbi8qKlxuICogVHJhdmVsIEFnZW50IFR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIFBsYWNlID0ge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGFkZHJlc3M6IHN0cmluZztcbiAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gIHJhdGluZzogbnVtYmVyO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbn07XG4uLi5cblxuZXhwb3J0IGNvbnN0IEFnZW50c0NvbnRleHQgPSBjcmVhdGVDb250ZXh0PFxuICBBcnJheTxUcmF2ZWxBZ2VudFN0YXRlIHwgUmVzZWFyY2hBZ2VudFN0YXRlIHwgTUNQQWdlbnRTdGF0ZT5cbj4oW10pO1xuXG4vKipcbiAqIFRoaXMgcHJvdmlkZXIgd3JhcHMgc3RhdGUgZnJvbSBhbGwgYWdlbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBDb0FnZW50c1Byb3ZpZGVyID0gKHtcbiAgY2hpbGRyZW4sXG59OiB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG59KSA9PiB7XG4gIC8vIFVzZSByZWYgdG8gYXZvaWQgcmUtcmVuZGVyaW5nIGlzc3Vlc1xuICBjb25zdCBjb25maWdzUmVmID0gdXNlUmVmPFJlY29yZDxzdHJpbmcsIFNlcnZlckNvbmZpZz4+KHt9KTtcbiAgXG4gIC8vIEdldCBzYXZlZCBNQ1AgY29uZmlndXJhdGlvbnMgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgY29uc3QgW3NhdmVkQ29uZmlnc10gPSB1c2VMb2NhbFN0b3JhZ2U8UmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPj4oTUNQX1NUT1JBR0VfS0VZLCB7fSk7XG4gIFxuICAvLyBTZXQgdGhlIHJlZiB2YWx1ZSBvbmNlIHdlIGhhdmUgdGhlIHNhdmVkIGNvbmZpZ3NcbiAgaWYgKE9iamVjdC5rZXlzKHNhdmVkQ29uZmlncykubGVuZ3RoID4gMCAmJiBPYmplY3Qua2V5cyhjb25maWdzUmVmLmN1cnJlbnQpLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbmZpZ3NSZWYuY3VycmVudCA9IHNhdmVkQ29uZmlncztcbiAgfVxuXG4gIGNvbnN0IHsgc3RhdGU6IHRyYXZlbEFnZW50U3RhdGUgfSA9IHVzZUNvQWdlbnQoe1xuICAgIG5hbWU6IEF2YWlsYWJsZUFnZW50cy5UUkFWRUxfQUdFTlQsXG4gIH0pO1xuXG4gIGNvbnN0IHsgc3RhdGU6IGFpUmVzZWFyY2hBZ2VudFN0YXRlIH0gPSB1c2VDb0FnZW50KHtcbiAgICBuYW1lOiBBdmFpbGFibGVBZ2VudHMuUkVTRUFSQ0hfQUdFTlQsXG4gICAgaW5pdGlhbFN0YXRlOiB7XG4gICAgICBtb2RlbDogXCJvcGVuYWlcIixcbiAgICAgIHJlc2VhcmNoX3F1ZXN0aW9uOiBcIlwiLFxuICAgICAgcmVzb3VyY2VzOiBbXSxcbiAgICAgIHJlcG9ydDogXCJcIixcbiAgICAgIGxvZ3M6IFtdLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHsgc3RhdGU6IG1jcEFnZW50U3RhdGUgfSA9IHVzZUNvQWdlbnQoe1xuICAgIG5hbWU6IEF2YWlsYWJsZUFnZW50cy5NQ1BfQUdFTlQsXG4gICAgaW5pdGlhbFN0YXRlOiB7XG4gICAgICByZXNwb25zZTogXCJcIixcbiAgICAgIGxvZ3M6IFtdLFxuICAgICAgbWNwX2NvbmZpZzogY29uZmlnc1JlZi5jdXJyZW50LFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPEFnZW50c0NvbnRleHQuUHJvdmlkZXJcbiAgICAgIHZhbHVlPXtbXG4gICAgICAgIHtcbiAgICAgICAgICAuLi50cmF2ZWxBZ2VudFN0YXRlLFxuICAgICAgICAgIF9fbmFtZV9fOiBBdmFpbGFibGVBZ2VudHMuVFJBVkVMX0FHRU5ULFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLi4uYWlSZXNlYXJjaEFnZW50U3RhdGUsXG4gICAgICAgICAgX19uYW1lX186IEF2YWlsYWJsZUFnZW50cy5SRVNFQVJDSF9BR0VOVCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC4uLm1jcEFnZW50U3RhdGUsXG4gICAgICAgICAgX19uYW1lX186IEF2YWlsYWJsZUFnZW50cy5NQ1BfQUdFTlQsXG4gICAgICAgIH0sXG4gICAgICBdfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0FnZW50c0NvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvcHJvdmlkZXJzL1Byb3ZpZGVycy50c3hcblwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBRdWVyeUNsaWVudCwgUXVlcnlDbGllbnRQcm92aWRlciB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcbmltcG9ydCB7IFJlYWN0UXVlcnlEZXZ0b29scyB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnktZGV2dG9vbHNcIjtcbmltcG9ydCB7IENvcGlsb3RLaXQgfSBmcm9tIFwiQGNvcGlsb3RraXQvcmVhY3QtY29yZVwiO1xuaW1wb3J0IHsgQ29BZ2VudHNQcm92aWRlciB9IGZyb20gXCJAL2NvbXBvbmVudHMvY29hZ2VudHMtcHJvdmlkZXJcIjtcblxuY29uc3QgcXVlcnlDbGllbnQgPSBuZXcgUXVlcnlDbGllbnQoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvdmlkZXJzKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e3F1ZXJ5Q2xpZW50fT5cbiAgICAgIDxDb3BpbG90S2l0XG4gICAgICAgIHNob3dEZXZDb25zb2xlPXtmYWxzZX1cbiAgICAgICAgcHVibGljQXBpS2V5PXtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DT1BJTE9UX0NMT1VEX0FQSV9LRVl9XG4gICAgICA+XG4gICAgICAgIDxDb0FnZW50c1Byb3ZpZGVyPntjaGlsZHJlbn08L0NvQWdlbnRzUHJvdmlkZXI+XG4gICAgICA8L0NvcGlsb3RLaXQ+XG4gICAgICA8UmVhY3RRdWVyeURldnRvb2xzIGluaXRpYWxJc09wZW49e2ZhbHNlfSAvPlxuICAgIDwvUXVlcnlDbGllbnRQcm92aWRlcj5cbiAgKTtcbn1cbi4uLlxuUGF0aDogLmN1cnNvci9ydWxlcy9mcm9udGVuZC1iZXN0LXByYWN0aWNlcy5tZGNcbi0tLVxuZGVzY3JpcHRpb246IGZyb250ZW5kLCB1aS5cbmdsb2JzOiBcbmFsd2F5c0FwcGx5OiBmYWxzZVxuLS0tXG4jIEZyb250ZW5kIEJlc3QgUHJhY3RpY2VzIFJ1bGVcblxuVG8gZW5zdXJlIHJvYnVzdCwgYnVnLWZyZWUgZGV2ZWxvcG1lbnQgaW4gdGhlIGZyb250ZW5kIChgL2Zyb250ZW5kYCksIGZvbGxvdyB0aGVzZSBndWlkZWxpbmVzOlxuXG4jIyBQcm9qZWN0IFN0cnVjdHVyZVxuLSBNYWluIGFwcCBlbnRyeSBhbmQgcm91dGluZyBhcmUgaW4gW2BzcmMvYXBwL2BdKG1kYzpmcm9udGVuZC9zcmMvYXBwKS5cbi0gUmV1c2FibGUgVUkgY29tcG9uZW50cyBhcmUgaW4gW2BzcmMvY29tcG9uZW50cy91aS9gXShtZGM6ZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvdWkpLlxuLSBBZ2VudC1zcGVjaWZpYyBVSXMgYXJlIGluIFtgc3JjL2NvbXBvbmVudHMvYWdlbnRzL2BdKG1kYzpmcm9udGVuZC9zcmMvY29tcG9uZW50cy9hZ2VudHMpLlxuLSBHbG9iYWwgc3RhdGUgcHJvdmlkZXJzIGFyZSBpbiBbYHNyYy9wcm92aWRlcnMvYF0obWRjOmZyb250ZW5kL3NyYy9wcm92aWRlcnMpLlxuLSBDdXN0b20gaG9va3MgYXJlIGluIFtgc3JjL2hvb2tzL2BdKG1kYzpmcm9udGVuZC9zcmMvaG9va3MpLlxuLSBVdGlsaXR5IGZ1bmN0aW9ucyBhbmQgYWdlbnQgY29uZmlnIHR5cGVzIGFyZSBpbiBbYHNyYy9saWIvYF0obWRjOmZyb250ZW5kL3NyYy9saWIpLlxuLi4uXG5cbiMjIEV4dGVuc2liaWxpdHlcbi0gUmVnaXN0ZXIgbmV3IGFnZW50cyBpbiBbYHNyYy9saWIvYXZhaWxhYmxlLWFnZW50cy50c2BdKG1kYzpmcm9udGVuZC9zcmMvbGliL2F2YWlsYWJsZS1hZ2VudHMudHMpLlxuLSBBZGQgbmV3IGFnZW50IFVJcyBpbiBbYHNyYy9jb21wb25lbnRzL2FnZW50cy9gXShtZGM6ZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvYWdlbnRzKS5cbi0gVXNlIHRoZSBhZ2VudC90ZWFtIGNyZWF0aW9uIFVJIChwbGFubmVkKSBmb3IgZHluYW1pYyBhZ2VudCBtYW5hZ2VtZW50LlxuXG4jIyBUZXN0aW5nICYgRGVidWdnaW5nXG4tIFRlc3QgYWxsIG5ldyBmZWF0dXJlcyBpbiBib3RoIGRldmVsb3BtZW50IGFuZCBwcm9kdWN0aW9uIGJ1aWxkcy5cbi0gVXNlIFJlYWN0IFF1ZXJ5IERldnRvb2xzIGFuZCBDb3BpbG90S2l0IERldiBDb25zb2xlIGZvciBkZWJ1Z2dpbmcuXG4tIFZhbGlkYXRlIGFsbCBmb3JtcyBhbmQgdXNlciBpbnB1dC5cblxuIyMgRG9jdW1lbnRhdGlvblxuLSBVcGRhdGUgW2BSRUFETUUubWRgXShtZGM6ZnJvbnRlbmQvUkVBRE1FLm1kKSB3aXRoIGFueSBtYWpvciBjaGFuZ2VzIG9yIG5ldyBmZWF0dXJlcy5cblxuIyMgU3VtbWFyeVxuRm9sbG93aW5nIHRoZXNlIHJ1bGVzIHdpbGwgaGVscCBtYWludGFpbiBhIGNsZWFuLCBzY2FsYWJsZSwgYW5kIGJ1Zy1yZXNpc3RhbnQgZnJvbnRlbmQgY29kZWJhc2UuXG5cbi4uLlxuUGF0aDogZnJvbnRlbmQvY29tcG9uZW50cy5qc29uXG57XG4gIFwiJHNjaGVtYVwiOiBcImh0dHBzOi8vdWkuc2hhZGNuLmNvbS9zY2hlbWEuanNvblwiLFxuICBcInN0eWxlXCI6IFwibmV3LXlvcmtcIixcbiAgXCJyc2NcIjogdHJ1ZSxcbiAgXCJ0c3hcIjogdHJ1ZSxcbiAgXCJ0YWlsd2luZFwiOiB7XG4gICAgXCJjb25maWdcIjogXCJ0YWlsd2luZC5jb25maWcudHNcIixcbiAgICBcImNzc1wiOiBcInNyYy9hcHAvZ2xvYmFscy5jc3NcIixcbiAgICBcImJhc2VDb2xvclwiOiBcInN0b25lXCIsXG4gICAgXCJjc3NWYXJpYWJsZXNcIjogdHJ1ZSxcbiAgICBcInByZWZpeFwiOiBcIlwiXG4gIH0sXG4gIFwiYWxpYXNlc1wiOiB7XG4gICAgXCJjb21wb25lbnRzXCI6IFwiQC9jb21wb25lbnRzXCIsXG4gICAgXCJ1dGlsc1wiOiBcIkAvbGliL3V0aWxzXCIsXG4gICAgXCJ1aVwiOiBcIkAvY29tcG9uZW50cy91aVwiLFxuICAgIFwibGliXCI6IFwiQC9saWJcIixcbiAgICBcImhvb2tzXCI6IFwiQC9ob29rc1wiXG4gIH0sXG4gIFwiaWNvbkxpYnJhcnlcIjogXCJsdWNpZGVcIlxufS4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvYWdlbnRzL21jcC1hZ2VudC50c3hcbmltcG9ydCBSZWFjdCwgeyBGQywgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBBdmFpbGFibGVBZ2VudHMgfSBmcm9tIFwiQC9saWIvYXZhaWxhYmxlLWFnZW50c1wiO1xuaW1wb3J0IHsgdXNlQ29BZ2VudCwgdXNlQ29BZ2VudFN0YXRlUmVuZGVyIH0gZnJvbSBcIkBjb3BpbG90a2l0L3JlYWN0LWNvcmVcIjtcbmltcG9ydCB7IENoZWNrQ2lyY2xlSWNvbiB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcbmltcG9ydCBSZWFjdE1hcmtkb3duIGZyb20gXCJyZWFjdC1tYXJrZG93blwiO1xuaW1wb3J0IHsgU2VydmVyQ29uZmlnLCBNQ1BfU1RPUkFHRV9LRVkgfSBmcm9tIFwiQC9saWIvbWNwLWNvbmZpZy10eXBlc1wiO1xuaW1wb3J0IHsgdXNlTG9jYWxTdG9yYWdlIH0gZnJvbSBcIkAvaG9va3MvdXNlLWxvY2FsLXN0b3JhZ2VcIjtcblxuZXhwb3J0IHR5cGUgTUNQQWdlbnRTdGF0ZSA9IHtcbiAgcmVzcG9uc2U6IHN0cmluZztcbiAgbG9nczogQXJyYXk8e1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBkb25lOiBib29sZWFuO1xuICB9PjtcbiAgbWNwX2NvbmZpZz86IFJlY29yZDxzdHJpbmcsIFNlcnZlckNvbmZpZz47XG59O1xuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvY29tcG9uZW50cy9tYXAtY29udGFpbmVyLnRzeFxuXCJ1c2UgY2xpZW50XCI7XG5pbXBvcnQgKiBhcyBTa2VsZXRvbnMgZnJvbSBcIkAvY29tcG9uZW50cy9za2VsZXRvbnNcIjtcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvYnV0dG9uXCI7XG5pbXBvcnQgeyBBdmFpbGFibGVBZ2VudHMgfSBmcm9tIFwiQC9saWIvYXZhaWxhYmxlLWFnZW50c1wiO1xuaW1wb3J0IHsgdXNlQ29BZ2VudCwgdXNlQ29waWxvdEFjdGlvbiB9IGZyb20gXCJAY29waWxvdGtpdC9yZWFjdC1jb3JlXCI7XG5pbXBvcnQgeyBJY29uLCBMYXRMbmdUdXBsZSB9IGZyb20gXCJsZWFmbGV0XCI7XG5pbXBvcnQgXCJsZWFmbGV0LWRlZmF1bHRpY29uLWNvbXBhdGliaWxpdHlcIjtcbmltcG9ydCBcImxlYWZsZXQtZGVmYXVsdGljb24tY29tcGF0aWJpbGl0eS9kaXN0L2xlYWZsZXQtZGVmYXVsdGljb24tY29tcGF0aWJpbGl0eS5jc3NcIjtcbmltcG9ydCBcImxlYWZsZXQvZGlzdC9sZWFmbGV0LmNzc1wiO1xuaW1wb3J0IHsgQ2hlY2tDaXJjbGUsIExvYWRlcjIsIFhDaXJjbGUgfSBmcm9tIFwibHVjaWRlLXJlYWN0XCI7XG5pbXBvcnQgZHluYW1pYyBmcm9tIFwibmV4dC9keW5hbWljXCI7XG5pbXBvcnQgeyB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBNYXJrZXIsIFBvcHVwLCBUaWxlTGF5ZXIgfSBmcm9tIFwicmVhY3QtbGVhZmxldFwiO1xuLi4uXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1hcENvbXBvbmVudCgpIHtcbiAgY29uc3QgW3BvaW50c0Zyb20sIHNldFBvaW50c0Zyb21dID0gdXNlU3RhdGU8UGxhY2VbXT4oW10pO1xuICBjb25zdCBbY2VudGVyLCBzZXRDZW50ZXJdID0gdXNlU3RhdGU8TGF0TG5nVHVwbGU+KFswLCAwXSk7XG4gIGNvbnN0IGhhc1Byb2Nlc3NlZFRyaXBzID0gdXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgaGFzSW5Qcm9ncmVzcyA9IHVzZVJlZihmYWxzZSk7XG4gIFxuICBjb25zdCByZXNlYXJjaEFnZW50QWN0aXZlID0gdXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgeyBydW5uaW5nOiByZXNlYXJjaEFnZW50UnVubmluZyB9ID0gdXNlQ29BZ2VudCh7XG4gICAgbmFtZTogQXZhaWxhYmxlQWdlbnRzLlJFU0VBUkNIX0FHRU5ULFxuICB9KTtcblxuICBpZiAocmVzZWFyY2hBZ2VudFJ1bm5pbmcgIT09IHJlc2VhcmNoQWdlbnRBY3RpdmUuY3VycmVudCkge1xuICAgIHJlc2VhcmNoQWdlbnRBY3RpdmUuY3VycmVudCA9IHJlc2VhcmNoQWdlbnRSdW5uaW5nO1xuICB9XG5cbiAgY29uc3QgeyBzdG9wOiBzdG9wVHJhdmVsQWdlbnQgfSA9IHVzZUNvQWdlbnQoe1xuICAgIG5hbWU6IEF2YWlsYWJsZUFnZW50cy5UUkFWRUxfQUdFTlQsXG4gIH0pO1xuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvY29tcG9uZW50cy9hZ2VudHMvaW5kZXgudHN4XG5leHBvcnQgKiBmcm9tIFwiLi90cmF2ZWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Jlc2VhcmNoZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21jcC1hZ2VudFwiO1xuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvY29tcG9uZW50cy9hZ2VudHMvdHJhdmVsLnRzeFxuaW1wb3J0IE1hcCBmcm9tIFwiQC9jb21wb25lbnRzL21hcFwiO1xuXG5leHBvcnQgY29uc3QgVHJhdmVsQWdlbnQgPSAoKSA9PiB7XG4gIHJldHVybiA8TWFwIC8+O1xufTtcbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvYWdlbnRzL3Jlc2VhcmNoZXIudHN4XG5pbXBvcnQgeyBMb2cgfSBmcm9tIFwiQC9jb21wb25lbnRzL2NvYWdlbnRzLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBSZXNlYXJjaExvZ3MgfSBmcm9tIFwiQC9jb21wb25lbnRzL3Jlc2VhcmNoLWxvZ3NcIjtcbmltcG9ydCB7IFJlc2VhcmNoUGFwZXJTa2VsZXRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvc2tlbGV0b25zXCI7XG5pbXBvcnQgeyBBdmFpbGFibGVBZ2VudHMgfSBmcm9tIFwiQC9saWIvYXZhaWxhYmxlLWFnZW50c1wiO1xuaW1wb3J0IHsgdXNlQ29BZ2VudCwgdXNlQ29BZ2VudFN0YXRlUmVuZGVyIH0gZnJvbSBcIkBjb3BpbG90a2l0L3JlYWN0LWNvcmVcIjtcbmltcG9ydCB7IENoZWNrQ2lyY2xlSWNvbiB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcbmltcG9ydCB7IEZDLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdE1hcmtkb3duIGZyb20gXCJyZWFjdC1tYXJrZG93blwiO1xuXG5leHBvcnQgdHlwZSBSZXNvdXJjZSA9IHtcbiAgdXJsOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBSZXNlYXJjaEFnZW50U3RhdGUgPSB7XG4gIG1vZGVsOiBzdHJpbmc7XG4gIHJlc2VhcmNoX3F1ZXN0aW9uOiBzdHJpbmc7XG4gIHJlcG9ydDogc3RyaW5nO1xuICByZXNvdXJjZXM6IFJlc291cmNlW107XG4gIGxvZ3M6IExvZ1tdO1xufTtcblxuZXhwb3J0IGNvbnN0IEFJUmVzZWFyY2hBZ2VudDogRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtsb2dzLCBzZXRMb2dzXSA9IHVzZVN0YXRlPFxuICAgIEFycmF5PHtcbiAgICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICAgIGRvbmU6IGJvb2xlYW47XG4gICAgfT5cbiAgPihbXSk7XG5cbiAgY29uc3QgaXNSZXNlYXJjaEluUHJvZ3Jlc3MgPSB1c2VSZWYoZmFsc2UpO1xuXG4gIGNvbnN0IHsgc3RhdGU6IHJlc2VhcmNoQWdlbnRTdGF0ZSwgc3RvcDogc3RvcFJlc2VhcmNoQWdlbnQgfSA9XG4gICAgdXNlQ29BZ2VudDxSZXNlYXJjaEFnZW50U3RhdGU+KHtcbiAgICAgIG5hbWU6IEF2YWlsYWJsZUFnZW50cy5SRVNFQVJDSF9BR0VOVCxcbiAgICAgIGluaXRpYWxTdGF0ZToge1xuICAgICAgICBtb2RlbDogXCJvcGVuYWlcIixcbiAgICAgICAgcmVzZWFyY2hfcXVlc3Rpb246IFwiXCIsXG4gICAgICAgIHJlc291cmNlczogW10sXG4gICAgICAgIHJlcG9ydDogXCJcIixcbiAgICAgICAgbG9nczogW10sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlc2VhcmNoQWdlbnRTdGF0ZS5sb2dzKSB7XG4gICAgICBzZXRMb2dzKChwcmV2TG9ncykgPT4ge1xuICAgICAgICBjb25zdCBuZXdMb2dzID0gWy4uLnByZXZMb2dzXTtcbiAgICAgICAgcmVzZWFyY2hBZ2VudFN0YXRlLmxvZ3MuZm9yRWFjaCgobG9nKSA9PiB7XG4gICAgICAgICAgY29uc3QgZXhpc3RpbmdMb2dJbmRleCA9IG5ld0xvZ3MuZmluZEluZGV4KFxuICAgICAgICAgICAgKGwpID0+IGwubWVzc2FnZSA9PT0gbG9nLm1lc3NhZ2VcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChleGlzdGluZ0xvZ0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIC8vIE9ubHkgdXBkYXRlIGRvbmUgc3RhdHVzIGlmIGNoYW5naW5nIGZyb20gZmFsc2UgdG8gdHJ1ZVxuICAgICAgICAgICAgaWYgKGxvZy5kb25lICYmICFuZXdMb2dzW2V4aXN0aW5nTG9nSW5kZXhdLmRvbmUpIHtcbiAgICAgICAgICAgICAgbmV3TG9nc1tleGlzdGluZ0xvZ0luZGV4XS5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3TG9ncy5wdXNoKGxvZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ld0xvZ3M7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtyZXNlYXJjaEFnZW50U3RhdGUubG9nc10pO1xuXG4gIHVzZUNvQWdlbnRTdGF0ZVJlbmRlcih7XG4gICAgbmFtZTogQXZhaWxhYmxlQWdlbnRzLlJFU0VBUkNIX0FHRU5ULFxuICAgIGhhbmRsZXI6ICh7IG5vZGVOYW1lIH0pID0+IHtcbiAgICAgIC8vIEhBQ0sgbm9kZU5hbWUgX19lbmRfXyBzdG9wIHRoZSByZXNlYXJjaCBhZ2VudFxuICAgICAgaWYgKG5vZGVOYW1lID09PSBcIl9fZW5kX19cIikge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBzdG9wUmVzZWFyY2hBZ2VudCgpO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlcjogKHsgc3RhdHVzIH0pID0+IHtcbiAgICAgIGlmIChzdGF0dXMgPT09IFwiaW5Qcm9ncmVzc1wiKSB7XG4gICAgICAgIGlzUmVzZWFyY2hJblByb2dyZXNzLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gPFJlc2VhcmNoTG9ncyBsb2dzPXtsb2dzID8/IFtdfSAvPjtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXR1cyA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgIGlzUmVzZWFyY2hJblByb2dyZXNzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9zZSBtYXgtdy1ub25lXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTIgdGV4dC1ncmVlbi02MDAgbWItNFwiPlxuICAgICAgICAgICAgICAgIDxDaGVja0NpcmNsZUljb24gY2xhc3NOYW1lPVwiaC01IHctNVwiIC8+XG4gICAgICAgICAgICAgICAgPHNwYW4+UmVzZWFyY2ggY29tcGxldGU8L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgaWYgKGlzUmVzZWFyY2hJblByb2dyZXNzLmN1cnJlbnQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGdhcC00IGgtZnVsbCB6LVs5OTldXCI+XG4gICAgICAgIDxSZXNlYXJjaFBhcGVyU2tlbGV0b24gLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBpZiAoIXJlc2VhcmNoQWdlbnRTdGF0ZS5yZXBvcnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGdhcC00IGgtZnVsbCB6LVs5OTldXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLTIgcC02IGJnLXdoaXRlIHJvdW5kZWQtbGcgc2hhZG93LXNtXCI+XG4gICAgICAgIDxSZWFjdE1hcmtkb3duXG4gICAgICAgICAgY2xhc3NOYW1lPVwicHJvc2UgcHJvc2Utc20gbWQ6cHJvc2UtYmFzZSBsZzpwcm9zZS1sZyBwcm9zZS1zbGF0ZSBtYXgtdy1ub25lIGJnLWdyYXktNTAgcC02IHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1ncmF5LTIwMFwiXG4gICAgICAgICAgY29tcG9uZW50cz17e1xuICAgICAgICAgICAgaDE6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZCBtYi02IHBiLTIgYm9yZGVyLWJcIj5cbiAgICAgICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaDI6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtYm9sZCBtYi00IG10LThcIj57Y2hpbGRyZW59PC9oMj5cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBoMzogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LWJvbGQgbWItMyBtdC02XCI+e2NoaWxkcmVufTwvaDM+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgcDogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtYi00IGxlYWRpbmctcmVsYXhlZFwiPntjaGlsZHJlbn08L3A+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgdWw6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZGlzYyBwbC02IG1iLTQgc3BhY2UteS0yXCI+e2NoaWxkcmVufTwvdWw+XG4gICAgICAgICAgICApLFxuLi4uXG4gICAgICAgID5cbiAgICAgICAgICB7cmVzZWFyY2hBZ2VudFN0YXRlLnJlcG9ydH1cbiAgICAgICAgPC9SZWFjdE1hcmtkb3duPlxuICAgICAgICB7cmVzZWFyY2hBZ2VudFN0YXRlLnJlc291cmNlcyAmJlxuICAgICAgICAgIHJlc2VhcmNoQWdlbnRTdGF0ZS5yZXNvdXJjZXMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb3NlIG1heC13LW5vbmUgei1bOTk5XSBiZy1ncmF5LTUwIHAtNiByb3VuZGVkLWxnIGJvcmRlciBib3JkZXItZ3JheS0yMDBcIj5cbiAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtYm9sZCBtYi00IG10LThcIj5SZXNvdXJjZXM8L2gyPlxuICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibGlzdC1kaXNjIHBsLTYgbWItNCBzcGFjZS15LTJcIj5cbiAgICAgICAgICAgICAgICB7cmVzZWFyY2hBZ2VudFN0YXRlLnJlc291cmNlcy5tYXAoKHJlc291cmNlLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgPGxpIGtleT17aW5kZXh9IGNsYXNzTmFtZT1cInRleHQtZ3JheS03MDBcIj5cbiAgICAgICAgICAgICAgICAgICAge3Jlc291cmNlLnVybCA/IChcbiAgICAgICAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17cmVzb3VyY2UudXJsfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1ibHVlLTYwMCBob3Zlcjp1bmRlcmxpbmVcIlxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZXNvdXJjZS50aXRsZSB8fCByZXNvdXJjZS51cmx9XG4gICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlLnRpdGxlXG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIHtyZXNvdXJjZS5kZXNjcmlwdGlvbiAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNjAwIG10LTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZXNvdXJjZS5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbi4uLlxuUGF0aDogYWdlbnQvbWNwX2FnZW50L2FnZW50LnB5XG5cIlwiXCJcblRoaXMgaXMgdGhlIG1haW4gZW50cnkgcG9pbnQgZm9yIHRoZSBhZ2VudC5cbkl0IGRlZmluZXMgdGhlIHdvcmtmbG93IGdyYXBoLCBzdGF0ZSwgdG9vbHMsIG5vZGVzIGFuZCBlZGdlcy5cblwiXCJcIlxuXG5mcm9tIHR5cGluZ19leHRlbnNpb25zIGltcG9ydCBMaXRlcmFsLCBUeXBlZERpY3QsIERpY3QsIExpc3QsIFVuaW9uLCBPcHRpb25hbFxuZnJvbSBsYW5nY2hhaW5fb3BlbmFpIGltcG9ydCBDaGF0T3BlbkFJXG5mcm9tIGxhbmdjaGFpbl9jb3JlLnJ1bm5hYmxlcyBpbXBvcnQgUnVubmFibGVDb25maWdcbmZyb20gbGFuZ2dyYXBoLmdyYXBoIGltcG9ydCBTdGF0ZUdyYXBoLCBFTkRcbmZyb20gbGFuZ2dyYXBoLmNoZWNrcG9pbnQubWVtb3J5IGltcG9ydCBNZW1vcnlTYXZlclxuZnJvbSBsYW5nZ3JhcGgudHlwZXMgaW1wb3J0IENvbW1hbmRcbmZyb20gY29waWxvdGtpdCBpbXBvcnQgQ29waWxvdEtpdFN0YXRlXG5mcm9tIGxhbmdjaGFpbl9tY3BfYWRhcHRlcnMuY2xpZW50IGltcG9ydCBNdWx0aVNlcnZlck1DUENsaWVudFxuZnJvbSBsYW5nZ3JhcGgucHJlYnVpbHQgaW1wb3J0IGNyZWF0ZV9yZWFjdF9hZ2VudFxuZnJvbSBsYW5nY2hhaW5fY29yZS5wcm9tcHRzIGltcG9ydCBDaGF0UHJvbXB0VGVtcGxhdGUsIE1lc3NhZ2VzUGxhY2Vob2xkZXJcbmltcG9ydCBvc1xuLi4uXG4gICAgICAgIFxuICAgICAgICAjIFJ1biB0aGUgcmVhY3QgYWdlbnQgc3ViZ3JhcGggd2l0aCBvdXIgaW5wdXRcbiAgICAgICAgYWdlbnRfcmVzcG9uc2UgPSBhd2FpdCByZWFjdF9hZ2VudC5haW52b2tlKGFnZW50X2lucHV0KVxuXG4gICAgICAgIHByaW50KGZcImFnZW50X3Jlc3BvbnNlOiB7YWdlbnRfcmVzcG9uc2V9XCIpXG4gICAgICAgIFxuICAgICAgICAjIFVwZGF0ZSB0aGUgc3RhdGUgd2l0aCB0aGUgbmV3IG1lc3NhZ2VzXG4gICAgICAgIHVwZGF0ZWRfbWVzc2FnZXMgPSBzdGF0ZVtcIm1lc3NhZ2VzXCJdICsgYWdlbnRfcmVzcG9uc2UuZ2V0KFwibWVzc2FnZXNcIiwgW10pXG4gICAgICAgIFxuICAgICAgICAjIEVuZCB0aGUgZ3JhcGggd2l0aCB0aGUgdXBkYXRlZCBtZXNzYWdlc1xuICAgICAgICByZXR1cm4gQ29tbWFuZChcbiAgICAgICAgICAgIGdvdG89RU5ELFxuICAgICAgICAgICAgdXBkYXRlPXtcIm1lc3NhZ2VzXCI6IHVwZGF0ZWRfbWVzc2FnZXN9LFxuICAgICAgICApXG5cbiMgRGVmaW5lIHRoZSB3b3JrZmxvdyBncmFwaCB3aXRoIG9ubHkgYSBjaGF0IG5vZGVcbndvcmtmbG93ID0gU3RhdGVHcmFwaChBZ2VudFN0YXRlKVxud29ya2Zsb3cuYWRkX25vZGUoXCJjaGF0X25vZGVcIiwgY2hhdF9ub2RlKVxud29ya2Zsb3cuc2V0X2VudHJ5X3BvaW50KFwiY2hhdF9ub2RlXCIpXG5cbiMgQ29tcGlsZSB0aGUgd29ya2Zsb3cgZ3JhcGhcbmdyYXBoID0gd29ya2Zsb3cuY29tcGlsZShNZW1vcnlTYXZlcigpKS4uLlxuUGF0aDogYWdlbnQvbWNwX2FnZW50L2FnZW50X2ZhY3RvcnkucHlcbiMgUGxhY2Vob2xkZXIgZm9yIHRoZSBkeW5hbWljIEFnZW50IEZhY3RvcnlcbmltcG9ydCBvc1xuZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBEaWN0LCBBbnlcbmZyb20gLmludGVncmF0aW9ucy5tZW0wX2ludGVncmF0aW9uIGltcG9ydCBNZW0wTWVtb3J5TWFuYWdlclxuZnJvbSAuaW50ZWdyYXRpb25zLm1lbW9yeXNhdmVyX21hbmFnZXIgaW1wb3J0IE1lbW9yeVNhdmVyTWFuYWdlclxuZnJvbSAuaW50ZWdyYXRpb25zLmxpdGVsbG1faW50ZWdyYXRpb24gaW1wb3J0IExpdGVMTE1XcmFwcGVyXG5mcm9tIC5pbnRlZ3JhdGlvbnMuYTJhX2ludGVncmF0aW9uIGltcG9ydCBBMkFDb21tdW5pY2F0b3JcbiMgZnJvbSAuaW50ZWdyYXRpb25zLmdyYXBoaXRpX2ludGVncmF0aW9uIGltcG9ydCBHcmFwaGl0aUtub3dsZWRnZVNvdXJjZSAgIyBQbGFjZWhvbGRlclxuXG5mcm9tIC5pbnRlZ3JhdGlvbnMuYmFzZV9tZW1vcnkgaW1wb3J0IEJhc2VNZW1vcnlNYW5hZ2VyXG5cbmNsYXNzIEFnZW50RmFjdG9yeTpcbiAgICBcIlwiXCJcbiAgICBGYWN0b3J5IGZvciBjcmVhdGluZyBhZ2VudHMgd2l0aCBtb2R1bGFyLCBjb25maWd1cmFibGUgYmFja2VuZHMuXG4gICAgUmVhZHMgY29uZmlnL2VudiB0byBzZWxlY3QgbWVtb3J5LCBMTE0sIEEyQSwgYW5kIGtub3dsZWRnZSBiYWNrZW5kcy5cbiAgICBcIlwiXCJcbiAgICBkZWYgX19pbml0X18oc2VsZiwgY29uZmlnOiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV0gPSBOb25lKTpcbiAgICAgICAgc2VsZi5jb25maWcgPSBjb25maWcgb3Igc2VsZi5fbG9hZF9jb25maWdfZnJvbV9lbnYoKVxuICAgICAgICBzZWxmLm1lbW9yeV9iYWNrZW5kID0gc2VsZi5jb25maWcuZ2V0KFwiTUVNT1JZX0JBQ0tFTkRcIiwgXCJtZW1vcnlzYXZlclwiKS5sb3dlcigpXG4gICAgICAgIHNlbGYubGxtX2JhY2tlbmQgPSBzZWxmLmNvbmZpZy5nZXQoXCJMTE1fQkFDS0VORFwiLCBcImxpdGVsbG1cIikubG93ZXIoKVxuICAgICAgICBzZWxmLmEyYV9iYWNrZW5kID0gc2VsZi5jb25maWcuZ2V0KFwiQTJBX0JBQ0tFTkRcIiwgXCJpbm1lbW9yeVwiKS5sb3dlcigpXG4gICAgICAgIHNlbGYua25vd2xlZGdlX2JhY2tlbmQgPSBzZWxmLmNvbmZpZy5nZXQoXCJLTk9XTEVER0VfQkFDS0VORFwiLCBcImdyYXBoaXRpXCIpLmxvd2VyKClcbi4uLlxuXG4gICAgZGVmIGNyZWF0ZV9hZ2VudChzZWxmLCBhZ2VudF9jbGFzcywgKiprd2FyZ3MpOlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgSW5zdGFudGlhdGUgYW4gYWdlbnQgd2l0aCB0aGUgc2VsZWN0ZWQgYmFja2VuZHMgaW5qZWN0ZWQuXG4gICAgICAgIGFnZW50X2NsYXNzOiB0aGUgY2xhc3Mgb2YgdGhlIGFnZW50IHRvIGluc3RhbnRpYXRlLlxuICAgICAgICBrd2FyZ3M6IGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBmb3IgdGhlIGFnZW50LlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgbWVtb3J5ID0gc2VsZi5nZXRfbWVtb3J5X21hbmFnZXIoKVxuICAgICAgICBsbG0gPSBzZWxmLmdldF8uLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFGYWRSdXVqZlZCUnU4OWdNQzRSWmFnIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiQzovVXNlcnMva2V2aW4vT25lRHJpdmUvRGVza3RvcC9HRy9LQi1tdWx0aS1hZ2VudCIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9rZXZpbi9PbmVEcml2ZS9EZXNrdG9wL0dHL0tCLW11bHRpLWFnZW50In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSBhbHNvIGNoZWNrIHRoZSBiYWNrZW5kIGFnZW50IHN0cnVjdHVyZTpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI5MTE4ZDVjOS0zNjZhLTRmY2ItOGNhNC0yMGZhNmY1NzI3MDMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE2S1JSNjRpZW53NTYxakFFMXc0ekxTIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTaG93IG1lIHRoZSBmcm9udGVuZCBNQ1AgYWdlbnQgaW1wbGVtZW50YXRpb24sIGVzcGVjaWFsbHkgdGhlIE1DUCBzZXJ2ZXIgY29uZmlndXJhdGlvbiBVSVwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0IG1lIGFsc28gY2hlY2sgdGhlIGZyb250ZW5kIE1DUCBhZ2VudCBpbXBsZW1lbnRhdGlvbjpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGFnZW50L21jcF9hZ2VudC9hZ2VudC5weVxuXCJcIlwiXG5UaGlzIGlzIHRoZSBtYWluIGVudHJ5IHBvaW50IGZvciB0aGUgYWdlbnQuXG5JdCBkZWZpbmVzIHRoZSB3b3JrZmxvdyBncmFwaCwgc3RhdGUsIHRvb2xzLCBub2RlcyBhbmQgZWRnZXMuXG5cIlwiXCJcblxuZnJvbSB0eXBpbmdfZXh0ZW5zaW9ucyBpbXBvcnQgTGl0ZXJhbCwgVHlwZWREaWN0LCBEaWN0LCBMaXN0LCBVbmlvbiwgT3B0aW9uYWxcbmZyb20gbGFuZ2NoYWluX29wZW5haSBpbXBvcnQgQ2hhdE9wZW5BSVxuZnJvbSBsYW5nY2hhaW5fY29yZS5ydW5uYWJsZXMgaW1wb3J0IFJ1bm5hYmxlQ29uZmlnXG5mcm9tIGxhbmdncmFwaC5ncmFwaCBpbXBvcnQgU3RhdGVHcmFwaCwgRU5EXG5mcm9tIGxhbmdncmFwaC5jaGVja3BvaW50Lm1lbW9yeSBpbXBvcnQgTWVtb3J5U2F2ZXJcbmZyb20gbGFuZ2dyYXBoLnR5cGVzIGltcG9ydCBDb21tYW5kXG5mcm9tIGNvcGlsb3RraXQgaW1wb3J0IENvcGlsb3RLaXRTdGF0ZVxuZnJvbSBsYW5nY2hhaW5fbWNwX2FkYXB0ZXJzLmNsaWVudCBpbXBvcnQgTXVsdGlTZXJ2ZXJNQ1BDbGllbnRcbmZyb20gbGFuZ2dyYXBoLnByZWJ1aWx0IGltcG9ydCBjcmVhdGVfcmVhY3RfYWdlbnRcbmZyb20gbGFuZ2NoYWluX2NvcmUucHJvbXB0cyBpbXBvcnQgQ2hhdFByb21wdFRlbXBsYXRlLCBNZXNzYWdlc1BsYWNlaG9sZGVyXG5pbXBvcnQgb3NcblxuIyBEZWZpbmUgdGhlIGNvbm5lY3Rpb24gdHlwZSBzdHJ1Y3R1cmVzXG5jbGFzcyBTdGRpb0Nvbm5lY3Rpb24oVHlwZWREaWN0KTpcbiAgICBjb21tYW5kOiBzdHJcbiAgICBhcmdzOiBMaXN0W3N0cl1cbiAgICB0cmFuc3BvcnQ6IExpdGVyYWxbXCJzdGRpb1wiXVxuXG5jbGFzcyBTU0VDb25uZWN0aW9uKFR5cGVkRGljdCk6XG4gICAgdXJsOiBzdHJcbiAgICB0cmFuc3BvcnQ6IExpdGVyYWxbXCJzc2VcIl1cblxuIyBUeXBlIGZvciBNQ1AgY29uZmlndXJhdGlvblxuTUNQQ29uZmlnID0gRGljdFtzdHIsIFVuaW9uW1N0ZGlvQ29ubmVjdGlvbiwgU1NFQ29ubmVjdGlvbl1dXG5cbmNsYXNzIEFnZW50U3RhdGUoQ29waWxvdEtpdFN0YXRlKTpcbiAgICBcIlwiXCJcbiAgICBIZXJlIHdlIGRlZmluZSB0aGUgc3RhdGUgb2YgdGhlIGFnZW50XG5cbiAgICBJbiB0aGlzIGluc3RhbmNlLCB3ZSdyZSBpbmhlcml0aW5nIGZyb20gQ29waWxvdEtpdFN0YXRlLCB3aGljaCB3aWxsIGJyaW5nIGluXG4gICAgdGhlIENvcGlsb3RLaXRTdGF0ZSBmaWVsZHMuIFdlJ3JlIGFsc28gYWRkaW5nIGEgY3VzdG9tIGZpZWxkLCBgbWNwX2NvbmZpZ2AsXG4gICAgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGNvbmZpZ3VyZSBNQ1Agc2VydmljZXMgZm9yIHRoZSBhZ2VudC5cbiAgICBcIlwiXCJcbiAgICAjIERlZmluZSBtY3BfY29uZmlnIGFzIGFuIG9wdGlvbmFsIGZpZWxkIHdpdGhvdXQgc2tpcHBpbmcgdmFsaWRhdGlvblxuICAgIG1jcF9jb25maWc6IE9wdGlvbmFsW01DUENvbmZpZ11cblxuIyBEZWZhdWx0IE1DUCBjb25maWd1cmF0aW9uIHRvIHVzZSB3aGVuIG5vIGNvbmZpZ3VyYXRpb24gaXMgcHJvdmlkZWQgaW4gdGhlIHN0YXRlXG4jIFVzZXMgcmVsYXRpdmUgcGF0aHMgdGhhdCB3aWxsIHdvcmsgd2l0aGluIHRoZSBwcm9qZWN0IHN0cnVjdHVyZVxuREVGQVVMVF9NQ1BfQ09ORklHOiBNQ1BDb25maWcgPSB7XG4gICAgXCJtYXRoXCI6IHtcbiAgICAgICAgXCJjb21tYW5kXCI6IFwicHl0aG9uXCIsXG4gICAgICAgICMgVXNlIGEgcmVsYXRpdmUgcGF0aCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYmFzZWQgb24gdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnlcbiAgICAgICAgXCJhcmdzXCI6IFtvcy5wYXRoLmpvaW4ob3MucGF0aC5kaXJuYW1lKF9fZmlsZV9fKSwgXCIuLlwiLCBcIm1hdGhfc2VydmVyLnB5XCIpXSxcbiAgICAgICAgXCJ0cmFuc3BvcnRcIjogXCJzdGRpb1wiLFxuICAgIH0sXG59XG5cbiMgRGVmaW5lIGEgY3VzdG9tIFJlQWN0IHByb21wdCB0aGF0IGVuY291cmFnZXMgdGhlIHVzZSBvZiBtdWx0aXBsZSB0b29sc1xuTVVMVElfVE9PTF9SRUFDVF9QUk9NUFQgPSBDaGF0UHJvbXB0VGVtcGxhdGUuZnJvbV9tZXNzYWdlcyhcbiAgICBbXG4gICAgICAgIChcbiAgICAgICAgICAgIFwic3lzdGVtXCIsXG4gICAgICAgICAgICBcIlwiXCJZb3UgYXJlIGFuIGFzc2lzdGFudCB0aGF0IGNhbiB1c2UgbXVsdGlwbGUgdG9vbHMgdG8gc29sdmUgcHJvYmxlbXMuIFxuWW91IHNob3VsZCB1c2UgYSBzdGVwLWJ5LXN0ZXAgYXBwcm9hY2gsIHVzaW5nIGFzIG1hbnkgdG9vbHMgYXMgbmVlZGVkIHRvIGZpbmQgdGhlIGNvbXBsZXRlIGFuc3dlci5cbkRvbid0IGhlc2l0YXRlIHRvIGNhbGwgZGlmZmVyZW50IHRvb2xzIHNlcXVlbnRpYWxseSBpZiB0aGF0IGhlbHBzIHJlYWNoIGEgYmV0dGVyIHNvbHV0aW9uLlxuXG5Zb3UgaGF2ZSBhY2Nlc3MgdG8gdGhlIGZvbGxvd2luZyB0b29sczpcblxue3t0b29sc319XG5cblRvIHVzZSBhIHRvb2wsIHBsZWFzZSB1c2UgdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG5gYGBcblRob3VnaHQ6IEkgbmVlZCB0byB1c2UgYSB0b29sIHRvIGhlbHAgd2l0aCB0aGlzLlxuQWN0aW9uOiB0b29sX25hbWVcbkFjdGlvbiBJbnB1dDogdGhlIGlucHV0IHRvIHRoZSB0b29sXG5gYGBcblxuVGhlIG9ic2VydmF0aW9uIHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG5gYGBcbk9ic2VydmF0aW9uOiB0b29sIHJlc3VsdFxuYGBgXG5cbldoZW4geW91IGhhdmUgdGhlIGZpbmFsIGFuc3dlciwgcmVzcG9uZCBpbiB0aGUgZm9sbG93aW5nIGZvcm1hdDpcbmBgYFxuVGhvdWdodDogSSBjYW4gbm93IHByb3ZpZGUgdGhlIGZpbmFsIGFuc3dlci5cbkZpbmFsIEFuc3dlcjogdGhlIGZpbmFsIGFuc3dlciB0byB0aGUgb3JpZ2luYWwgaW5wdXRcbmBgYFxuXG5CZWdpbiFcblwiXCJcIlxuICAgICAgICApLFxuICAgICAgICBNZXNzYWdlc1BsYWNlaG9sZGVyKHZhcmlhYmxlX25hbWU9XCJtZXNzYWdlc1wiKSxcbiAgICBdXG4pXG5cbmFzeW5jIGRlZiBjaGF0X25vZGUoc3RhdGU6IEFnZW50U3RhdGUsIGNvbmZpZzogUnVubmFibGVDb25maWcpIC0+IENvbW1hbmRbTGl0ZXJhbFtcIl9fZW5kX19cIl1dOlxuICAgIFwiXCJcIlxuICAgIFRoaXMgaXMgYW4gZW5oYW5jZWQgYWdlbnQgdGhhdCB1c2VzIGEgbW9kaWZpZWQgUmVBY3QgcGF0dGVybiB0byBhbGxvdyBtdWx0aXBsZSB0b29sIHVzZS5cbiAgICBJdCBoYW5kbGVzIGJvdGggY2hhdCByZXNwb25zZXMgYW5kIHNlcXVlbnRpYWwgdG9vbCBleGVjdXRpb24gaW4gb25lIG5vZGUuXG4gICAgXCJcIlwiXG4gICAgIyBHZXQgTUNQIGNvbmZpZ3VyYXRpb24gZnJvbSBzdGF0ZSwgb3IgdXNlIHRoZSBkZWZhdWx0IGNvbmZpZyBpZiBub3QgcHJvdmlkZWRcbiAgICBtY3BfY29uZmlnID0gc3RhdGUuZ2V0KFwibWNwX2NvbmZpZ1wiLCBERUZBVUxUX01DUF9DT05GSUcpXG4gICAgXG4gICAgIyBTZXQgdXAgdGhlIE1DUCBjbGllbnQgYW5kIHRvb2xzIHVzaW5nIHRoZSBjb25maWd1cmF0aW9uIGZyb20gc3RhdGVcbiAgICBhc3luYyB3aXRoIE11bHRpU2VydmVyTUNQQ2xpZW50KG1jcF9jb25maWcpIGFzIG1jcF9jbGllbnQ6XG4gICAgICAgICMgR2V0IHRoZSB0b29sc1xuICAgICAgICBtY3BfdG9vbHMgPSBtY3BfY2xpZW50LmdldF90b29scygpXG4gICAgICAgIHByaW50KGZcIm1jcF90b29sczoge21jcF90b29sc31cIilcbiAgICAgICAgXG4gICAgICAgICMgQ3JlYXRlIGEgbW9kZWwgaW5zdGFuY2VcbiAgICAgICAgbW9kZWwgPSBDaGF0T3BlbkFJKG1vZGVsPVwiZ3B0LTRvXCIpXG4gICAgICAgIFxuICAgICAgICAjIENyZWF0ZSB0aGUgZW5oYW5jZWQgbXVsdGktdG9vbCByZWFjdCBhZ2VudCB3aXRoIG91ciBjdXN0b20gcHJvbXB0XG4gICAgICAgIHJlYWN0X2FnZW50ID0gY3JlYXRlX3JlYWN0X2FnZW50KFxuICAgICAgICAgICAgbW9kZWwsIFxuICAgICAgICAgICAgbWNwX3Rvb2xzLCBcbiAgICAgICAgICAgIHByb21wdD1NVUxUSV9UT09MX1JFQUNUX1BST01QVFxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICAjIFByZXBhcmUgbWVzc2FnZXMgZm9yIHRoZSByZWFjdCBhZ2VudFxuICAgICAgICBhZ2VudF9pbnB1dCA9IHtcbiAgICAgICAgICAgIFwibWVzc2FnZXNcIjogc3RhdGVbXCJtZXNzYWdlc1wiXVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAjIFJ1biB0aGUgcmVhY3QgYWdlbnQgc3ViZ3JhcGggd2l0aCBvdXIgaW5wdXRcbiAgICAgICAgYWdlbnRfcmVzcG9uc2UgPSBhd2FpdCByZWFjdF9hZ2VudC5haW52b2tlKGFnZW50X2lucHV0KVxuXG4gICAgICAgIHByaW50KGZcImFnZW50X3Jlc3BvbnNlOiB7YWdlbnRfcmVzcG9uc2V9XCIpXG4gICAgICAgIFxuICAgICAgICAjIFVwZGF0ZSB0aGUgc3RhdGUgd2l0aCB0aGUgbmV3IG1lc3NhZ2VzXG4gICAgICAgIHVwZGF0ZWRfbWVzc2FnZXMgPSBzdGF0ZVtcIm1lc3NhZ2VzXCJdICsgYWdlbnRfcmVzcG9uc2UuZ2V0KFwibWVzc2FnZXNcIiwgW10pXG4gICAgICAgIFxuICAgICAgICAjIEVuZCB0aGUgZ3JhcGggd2l0aCB0aGUgdXBkYXRlZCBtZXNzYWdlc1xuICAgICAgICByZXR1cm4gQ29tbWFuZChcbiAgICAgICAgICAgIGdvdG89RU5ELFxuICAgICAgICAgICAgdXBkYXRlPXtcIm1lc3NhZ2VzXCI6IHVwZGF0ZWRfbWVzc2FnZXN9LFxuICAgICAgICApXG5cbiMgRGVmaW5lIHRoZSB3b3JrZmxvdyBncmFwaCB3aXRoIG9ubHkgYSBjaGF0IG5vZGVcbndvcmtmbG93ID0gU3RhdGVHcmFwaChBZ2VudFN0YXRlKVxud29ya2Zsb3cuYWRkX25vZGUoXCJjaGF0X25vZGVcIiwgY2hhdF9ub2RlKVxud29ya2Zsb3cuc2V0X2VudHJ5X3BvaW50KFwiY2hhdF9ub2RlXCIpXG5cbiMgQ29tcGlsZSB0aGUgd29ya2Zsb3cgZ3JhcGhcbmdyYXBoID0gd29ya2Zsb3cuY29tcGlsZShNZW1vcnlTYXZlcigpKS4uLlxuUGF0aDogYWdlbnQvbWNwX2FnZW50L2FnZW50X2ZhY3RvcnkucHlcbiMgUGxhY2Vob2xkZXIgZm9yIHRoZSBkeW5hbWljIEFnZW50IEZhY3RvcnlcbmltcG9ydCBvc1xuZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBEaWN0LCBBbnlcbmZyb20gLmludGVncmF0aW9ucy5tZW0wX2ludGVncmF0aW9uIGltcG9ydCBNZW0wTWVtb3J5TWFuYWdlclxuZnJvbSAuaW50ZWdyYXRpb25zLm1lbW9yeXNhdmVyX21hbmFnZXIgaW1wb3J0IE1lbW9yeVNhdmVyTWFuYWdlclxuZnJvbSAuaW50ZWdyYXRpb25zLmxpdGVsbG1faW50ZWdyYXRpb24gaW1wb3J0IExpdGVMTE1XcmFwcGVyXG5mcm9tIC5pbnRlZ3JhdGlvbnMuYTJhX2ludGVncmF0aW9uIGltcG9ydCBBMkFDb21tdW5pY2F0b3JcbiMgZnJvbSAuaW50ZWdyYXRpb25zLmdyYXBoaXRpX2ludGVncmF0aW9uIGltcG9ydCBHcmFwaGl0aUtub3dsZWRnZVNvdXJjZSAgIyBQbGFjZWhvbGRlclxuXG5mcm9tIC5pbnRlZ3JhdGlvbnMuYmFzZV9tZW1vcnkgaW1wb3J0IEJhc2VNZW1vcnlNYW5hZ2VyXG5cbmNsYXNzIEFnZW50RmFjdG9yeTpcbiAgICBcIlwiXCJcbiAgICBGYWN0b3J5IGZvciBjcmVhdGluZyBhZ2VudHMgd2l0aCBtb2R1bGFyLCBjb25maWd1cmFibGUgYmFja2VuZHMuXG4gICAgUmVhZHMgY29uZmlnL2VudiB0byBzZWxlY3QgbWVtb3J5LCBMTE0sIEEyQSwgYW5kIGtub3dsZWRnZSBiYWNrZW5kcy5cbiAgICBcIlwiXCJcbiAgICBkZWYgX19pbml0X18oc2VsZiwgY29uZmlnOiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV0gPSBOb25lKTpcbiAgICAgICAgc2VsZi5jb25maWcgPSBjb25maWcgb3Igc2VsZi5fbG9hZF9jb25maWdfZnJvbV9lbnYoKVxuICAgICAgICBzZWxmLm1lbW9yeV9iYWNrZW5kID0gc2VsZi5jb25maWcuZ2V0KFwiTUVNT1JZX0JBQ0tFTkRcIiwgXCJtZW1vcnlzYXZlclwiKS5sb3dlcigpXG4gICAgICAgIHNlbGYubGxtX2JhY2tlbmQgPSBzZWxmLmNvbmZpZy5nZXQoXCJMTE1fQkFDS0VORFwiLCBcImxpdGVsbG1cIikubG93ZXIoKVxuICAgICAgICBzZWxmLmEyYV9iYWNrZW5kID0gc2VsZi5jb25maWcuZ2V0KFwiQTJBX0JBQ0tFTkRcIiwgXCJpbm1lbW9yeVwiKS5sb3dlcigpXG4gICAgICAgIHNlbGYua25vd2xlZGdlX2JhY2tlbmQgPSBzZWxmLmNvbmZpZy5nZXQoXCJLTk9XTEVER0VfQkFDS0VORFwiLCBcImdyYXBoaXRpXCIpLmxvd2VyKClcblxuICAgIGRlZiBfbG9hZF9jb25maWdfZnJvbV9lbnYoc2VsZikgLT4gRGljdFtzdHIsIEFueV06XG4gICAgICAgIFwiXCJcIkxvYWQgYmFja2VuZCBjb25maWcgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXCJcIlwiXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcIk1FTU9SWV9CQUNLRU5EXCI6IG9zLmdldGVudihcIk1FTU9SWV9CQUNLRU5EXCIsIFwibWVtb3J5c2F2ZXJcIiksXG4gICAgICAgICAgICBcIkxMTV9CQUNLRU5EXCI6IG9zLmdldGVudihcIkxMTV9CQUNLRU5EXCIsIFwibGl0ZWxsbVwiKSxcbiAgICAgICAgICAgIFwiQTJBX0JBQ0tFTkRcIjogb3MuZ2V0ZW52KFwiQTJBX0JBQ0tFTkRcIiwgXCJpbm1lbW9yeVwiKSxcbiAgICAgICAgICAgIFwiS05PV0xFREdFX0JBQ0tFTkRcIjogb3MuZ2V0ZW52KFwiS05PV0xFREdFX0JBQ0tFTkRcIiwgXCJncmFwaGl0aVwiKSxcbiAgICAgICAgfVxuXG4gICAgZGVmIGdldF9tZW1vcnlfbWFuYWdlcihzZWxmKSAtPiBCYXNlTWVtb3J5TWFuYWdlcjpcbiAgICAgICAgaWYgc2VsZi5tZW1vcnlfYmFja2VuZCA9PSBcIm1lbTBcIjpcbiAgICAgICAgICAgIHJldHVybiBNZW0wTWVtb3J5TWFuYWdlcigpXG4gICAgICAgIGVsaWYgc2VsZi5tZW1vcnlfYmFja2VuZCA9PSBcIm1lbW9yeXNhdmVyXCI6XG4gICAgICAgICAgICByZXR1cm4gTWVtb3J5U2F2ZXJNYW5hZ2VyKClcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZlwiVW5rbm93biBtZW1vcnkgYmFja2VuZDoge3NlbGYubWVtb3J5X2JhY2tlbmR9XCIpXG5cbiAgICBkZWYgZ2V0X2xsbV9jbGllbnQoc2VsZikgLT4gTGl0ZUxMTVdyYXBwZXI6XG4gICAgICAgICMgT25seSBMaXRlTExNIGltcGxlbWVudGVkIGZvciBub3dcbiAgICAgICAgaWYgc2VsZi5sbG1fYmFja2VuZCA9PSBcImxpdGVsbG1cIjpcbiAgICAgICAgICAgIHJldHVybiBMaXRlTExNV3JhcHBlcigpXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGZcIlVua25vd24gTExNIGJhY2tlbmQ6IHtzZWxmLmxsbV9iYWNrZW5kfVwiKVxuXG4gICAgZGVmIGdldF9hMmFfY29tbXVuaWNhdG9yKHNlbGYpIC0+IEEyQUNvbW11bmljYXRvcjpcbiAgICAgICAgIyBPbmx5IGluLW1lbW9yeSBpbXBsZW1lbnRlZCBmb3Igbm93XG4gICAgICAgIGlmIHNlbGYuYTJhX2JhY2tlbmQgPT0gXCJpbm1lbW9yeVwiOlxuICAgICAgICAgICAgcmV0dXJuIEEyQUNvbW11bmljYXRvcigpXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGZcIlVua25vd24gQTJBIGJhY2tlbmQ6IHtzZWxmLmEyYV9iYWNrZW5kfVwiKVxuXG4gICAgZGVmIGdldF9rbm93bGVkZ2Vfc291cmNlKHNlbGYpOlxuICAgICAgICAjIFBsYWNlaG9sZGVyIGZvciBHcmFwaGl0aSBvciBvdGhlciBrbm93bGVkZ2Ugc291cmNlc1xuICAgICAgICBpZiBzZWxmLmtub3dsZWRnZV9iYWNrZW5kID09IFwiZ3JhcGhpdGlcIjpcbiAgICAgICAgICAgICMgcmV0dXJuIEdyYXBoaXRpS25vd2xlZGdlU291cmNlKClcbiAgICAgICAgICAgIHJldHVybiBOb25lICAjIE5vdCBpbXBsZW1lbnRlZCB5ZXRcbiAgICAgICAgZWxzZTpcbiAgICAgICAgICAgIHJldHVybiBOb25lXG5cbiAgICBkZWYgY3JlYXRlX2FnZW50KHNlbGYsIGFnZW50X2NsYXNzLCAqKmt3YXJncyk6XG4gICAgICAgIFwiXCJcIlxuICAgICAgICBJbnN0YW50aWF0ZSBhbiBhZ2VudCB3aXRoIHRoZSBzZWxlY3RlZCBiYWNrZW5kcyBpbmplY3RlZC5cbiAgICAgICAgYWdlbnRfY2xhc3M6IHRoZSBjbGFzcyBvZiB0aGUgYWdlbnQgdG8gaW5zdGFudGlhdGUuXG4gICAgICAgIGt3YXJnczogYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGZvciB0aGUgYWdlbnQuXG4gICAgICAgIFwiXCJcIlxuICAgICAgICBtZW1vcnkgPSBzZWxmLmdldF9tZW1vcnlfbWFuYWdlcigpXG4gICAgICAgIGxsbSA9IHNlbGYuZ2V0X2xsbV9jbGllbnQoKVxuICAgICAgICBhMmEgPSBzZWxmLmdldF9hMmFfY29tbXVuaWNhdG9yKClcbiAgICAgICAga25vd2xlZGdlID0gc2VsZi5nZXRfa25vd2xlZGdlX3NvdXJjZSgpXG4gICAgICAgIHJldHVybiBhZ2VudF9jbGFzcyhtZW1vcnk9bWVtb3J5LCBsbG09bGxtLCBhMmE9YTJhLCBrbm93bGVkZ2U9a25vd2xlZGdlLCAqKmt3YXJncylcblxuIyBFeGFtcGxlIHVzYWdlOlxuIyBmYWN0b3J5ID0gQWdlbnRGYWN0b3J5KClcbiMgbXlfYWdlbnQgPSBmYWN0b3J5LmNyZWF0ZV9hZ2VudChNeUFnZW50Q2xhc3MsIGFnZW50X2lkPVwiYWdlbnQtMTIzXCIpIC4uLlxuUGF0aDogYWdlbnQvbWNwX2FnZW50L3Rlc3RfYWdlbnRfZmFjdG9yeS5weVxuaW1wb3J0IHB5dGVzdFxuaW1wb3J0IG9zXG4jIFJlbW92ZWQgdW51c2VkIGltcG9ydDogZnJvbSBtY3BfYWdlbnQuaW50ZWdyYXRpb25zLm1lbTBfaW50ZWdyYXRpb24gaW1wb3J0IE1lbTBNZW1vcnlNYW5hZ2VyXG5mcm9tIG1jcF9hZ2VudC5pbnRlZ3JhdGlvbnMubWVtb3J5c2F2ZXJfbWFuYWdlciBpbXBvcnQgTWVtb3J5U2F2ZXJNYW5hZ2VyXG5mcm9tIG1jcF9hZ2VudC5pbnRlZ3JhdGlvbnMubGl0ZWxsbV9pbnRlZ3JhdGlvbiBpbXBvcnQgTGl0ZUxMTVdyYXBwZXJcbmZyb20gbWNwX2FnZW50LmludGVncmF0aW9ucy5hMmFfaW50ZWdyYXRpb24gaW1wb3J0IEEyQUNvbW11bmljYXRvclxuZnJvbSBtY3BfYWdlbnQuaW50ZWdyYXRpb25zLmEyYV9wcm90b2NvbHMgaW1wb3J0IEEyQU1lc3NhZ2UsIFRhc2tSZXF1ZXN0UGF5bG9hZFxuZnJvbSBtY3BfYWdlbnQuYWdlbnRfZmFjdG9yeSBpbXBvcnQgQWdlbnRGYWN0b3J5XG5cbnB5dGVzdG1hcmsgPSBweXRlc3QubWFyay5hc3luY2lvXG5cbmNsYXNzIER1bW15QWdlbnQ6XG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIG1lbW9yeSwgbGxtLCBhMmEsIGtub3dsZWRnZSwgKiprd2FyZ3MpOlxuICAgICAgICBzZWxmLm1lbW9yeSA9IG1lbW9yeVxuICAgICAgICBzZWxmLmxsbSA9IGxsbVxuICAgICAgICBzZWxmLmEyYSA9IGEyYVxuICAgICAgICBzZWxmLmtub3dsZWRnZSA9IGtub3dsZWRnZVxuICAgICAgICBzZWxmLmt3YXJncyA9IGt3YXJnc1xuLi4uXG5cbmFzeW5jIGRlZiB0ZXN0X2EyYV9jb21tdW5pY2F0b3IoKTpcbiAgICBjb21tID0gQTJBQ29tbXVuaWNhdG9yKClcbiAgICBtc2cgPSBBMkFNZXNzYWdlKFxuICAgICAgICBzZW5kZXJfYWdlbnRfaWQ9XCJhMVwiLFxuICAgICAgICByZWNpcGllbnRfYWdlbnRfaWQ9XCJhMlwiLFxuICAgICAgICBtZXNzYWdlX3R5cGU9XCJ0YXNrX3JlcXVlc3RcIixcbiAgICAgICAgcGF5bG9hZD1UYXNrUmVxdWVzdFBheWxvYWQodGFza190eXBlPVwiZWNob1wiLCBwYXJhbWV0ZXJzPXtcIm1zZ1wiOiBcImhpXCJ9KSxcbiAgICApXG4gICAgYXdhaXQgY29tbS5zZW5kX21lc3NhZ2UobXNnKVxuICAgIHJlY2VpdmVkID0gYXdhaXQgY29tbS5yZWNlaXZlX21lc3NhZ2UoXCJhMlwiLCB0aW1lb3V0PTEpXG4gICAgYXNzZXJ0IHJlY2VpdmVkIGFuZCByZWNlaXZlZC5zZW5kZXJfYWdlbnRfaWQgPT0gXCJhMVwiXG5cbmFzeW5jIGRlZiB0ZXN0X2FnZW50X2ZhY3RvcnlfbWVtb3J5c2F2ZXIoKTpcbiAgICBvcy5lbnZpcm9uW1wiTUVNT1JZX0JBQ0tFTkRcIl0gPSBcIm1lbW9yeXNhdmVyXCJcbiAgICBmYWN0b3J5ID0gQWdlbnRGYWN0b3J5KClcbiAgICBhZ2VudCA9IGZhY3RvcnkuY3JlYXRlX2FnZW50KER1bW15QWdlbnQsIGFnZW50X2lkPVwidGVzdDFcIilcbiAgICBhc3NlcnQgaXNpbnN0YW5jZShhZ2VudC5tZW1vcnksIE1lbW9yeVNhdmVyTWFuYWdlcilcbiAgICBhc3NlcnQgaXNpbnN0YW5jZShhZ2VudC5sbG0sIExpdGVMTE1XcmFwcGVyKVxuICAgIGFzc2VydCBpc2luc3RhbmNlKGFnZW50LmEyYSwgQTJBQ29tbXVuaWNhdG9yKVxuLi4uXG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvaW50ZWdyYXRpb25zL2EyYV9pbnRlZ3JhdGlvbi5weVxuLi4uXG5cbmNsYXNzIEEyQUNvbW11bmljYXRvcjpcbiAgICBcIlwiXCJcbiAgICBJbi1tZW1vcnksIGFzeW5jLCBleHRlbnNpYmxlIGNvbW11bmljYXRvciBmb3IgYWdlbnQtdG8tYWdlbnQgbWVzc2FnaW5nLlxuICAgIENhbiBiZSBleHRlbmRlZCB0byB1c2UgSFRUUCwgbWVzc2FnZSBicm9rZXJzLCBldGMuXG4gICAgXCJcIlwiXG4gICAgZGVmIF9faW5pdF9fKHNlbGYpOlxuICAgICAgICAjIEluLW1lbW9yeSBtZXNzYWdlIHF1ZXVlcyBwZXIgYWdlbnRcbiAgICAgICAgc2VsZi5xdWV1ZXM6IERpY3Rbc3RyLCBhc3luY2lvLlF1ZXVlXSA9IHt9XG4gICAgICAgICMgT3B0aW9uYWw6IGNhbGxiYWNrcyBmb3IgbWVzc2FnZSByZWNlaXB0XG4gICAgICAgIHNlbGYuY2FsbGJhY2tzOiBEaWN0W3N0ciwgQ2FsbGFibGVbW0EyQU1lc3NhZ2VdLCBBd2FpdGFibGVbTm9uZV1dXSA9IHt9XG5cbiAgICBhc3luYyBkZWYgc2VuZF9tZXNzYWdlKHNlbGYsIG1lc3NhZ2U6IEEyQU1lc3NhZ2UpIC0+IE5vbmU6XG4gICAgICAgIFwiXCJcIlxuICAgICAgICBTZW5kIGEgbWVzc2FnZSB0byBhbm90aGVyIGFnZW50IChieSByZWNpcGllbnRfYWdlbnRfaWQpLlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgcXVldWUgPSBzZWxmLnF1ZXVlcy5zZXRkZWZhdWx0KG1lc3NhZ2UucmVjaXBpZW50X2FnZW50X2lkLCBhc3luY2lvLlF1ZXVlKCkpXG4gICAgICAgIGF3YWl0IHF1ZXVlLnB1dChtZXNzYWdlKVxuICAgICAgICAjIElmIGEgY2FsbGJhY2sgaXMgcmVnaXN0ZXJlZCwgY2FsbCBpdFxuICAgICAgICBpZiBtZXNzYWdlLnJlY2lwaWVudF9hZ2VudF9pZCBpbiBzZWxmLmNhbGxiYWNrczpcbiAgICAgICAgICAgIGF3YWl0IHNlbGYuY2FsbGJhY2tzW21lc3NhZ2UucmVjaXBpZW50X2FnZW50X2lkXShtZXNzYWdlKVxuXG4gICAgYXN5bmMgZGVmIHJlY2VpdmVfbWVzc2FnZShzZWxmLCBhZ2VudF9pZDogc3RyLCB0aW1lb3V0OiBPcHRpb25hbFtmbG9hdF0gPSBOb25lKSAtPiBPcHRpb25hbFtBMkFNZXNzYWdlXTpcbiAgICAgICAgXCJcIlwiXG4gICAgICAgIFJlY2VpdmUgdGhlIG5leHQgbWVzc2FnZSBmb3IgdGhpcyBhZ2VudCAoYnkgYWdlbnRfaWQpLlxuICAgICAgICBJZiB0aW1lb3V0IGlzIHNldCwgd2FpdHMgdXAgdG8gdGltZW91dCBzZWNvbmRzLlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgcXVldWUgPSBzZWxmLnF1ZXVlcy5zZXRkZWZhdWx0KGFnZW50X2lkLCBhc3luY2lvLlF1ZXVlKCkpXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBhd2FpdCBhc3luY2lvLndhaXRfZm9yKHF1ZXVlLmdldCgpLCB0aW1lb3V0PXRpbWVvdXQpXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZVxuICAgICAgICBleGNlcHQgYXN5bmNpby5UaW1lb3V0RXJyb3I6XG4gICAgICAgICAgICByZXR1cm4gTm9uZVxuXG4gICAgZGVmIHJlZ2lzdGVyX2NhbGxiYWNrKHNlbGYsIGFnZW50X2lkOiBzdHIsIGNhbGxiYWNrOiBDYWxsYWJsZVtbQTJBTWVzc2FnZV0sIEF3YWl0YWJsZVtOb25lXV0pOlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgUmVnaXN0ZXIgYSBjb3JvdXRpbmUgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gYSBtZXNzYWdlIGlzIHNlbnQgdG8gdGhpcyBhZ2VudC5cbiAgICAgICAgXCJcIlwiXG4gICAgICAgIHNlbGYuY2FsbGJhY2tzW2FnZW50X2lkXSA9IGNhbGxiYWNrXG5cbiAgICAjIEV4dGVuc2lvbiBwb2ludDogYWRkIEhUVFAsIGJyb2tlciwgb3IgZGlzdHJpYnV0ZWQgdHJhbnNwb3J0IGhlcmUgLi4uXG5QYXRoOiBhZ2VudC9tYXRoX3NlcnZlci5weVxuIyBtYXRoX3NlcnZlci5weVxuZnJvbSBtY3Auc2VydmVyLmZhc3RtY3AgaW1wb3J0IEZhc3RNQ1BcblxubWNwID0gRmFzdE1DUChcIk1hdGhcIilcblxuQG1jcC50b29sKClcbmRlZiBhZGQoYTogaW50LCBiOiBpbnQpIC0+IGludDpcbiAgICBcIlwiXCJBZGQgdHdvIG51bWJlcnNcIlwiXCJcbiAgICByZXR1cm4gYSArIGJcblxuQG1jcC50b29sKClcbmRlZiBtdWx0aXBseShhOiBpbnQsIGI6IGludCkgLT4gaW50OlxuICAgIFwiXCJcIk11bHRpcGx5IHR3byBudW1iZXJzXCJcIlwiXG4gICAgcmV0dXJuIGEgKiBiXG5cbmlmIF9fbmFtZV9fID09IFwiX19tYWluX19cIjpcbiAgICBtY3AucnVuKHRyYW5zcG9ydD1cInN0ZGlvXCIpLi4uXG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvaW50ZWdyYXRpb25zL2xpdGVsbG1faW50ZWdyYXRpb24ucHlcbi4uLlxuXG5jbGFzcyBMaXRlTExNV3JhcHBlcjpcbiAgICBcIlwiXCJQcm92aWRlcyBhIHVuaWZpZWQgYXN5bmNocm9ub3VzIGludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB2YXJpb3VzIExMTXMgdmlhIExpdGVMTE0uXCJcIlwiXG5cbiAgICBkZWYgX19pbml0X18oc2VsZik6XG4gICAgICAgIFwiXCJcIkluaXRpYWxpemVzIHRoZSBMaXRlTExNIHdyYXBwZXIuXG4gICAgICAgIEFQSSBrZXlzIGFyZSBleHBlY3RlZCB0byBiZSBzZXQgYXMgZW52aXJvbm1lbnQgdmFyaWFibGVzIChlLmcuLCBPUEVOQUlfQVBJX0tFWSkuXG4gICAgICAgIFwiXCJcIlxuICAgICAgICAjIExpdGVMTE0gdHlwaWNhbGx5IHJlYWRzIGtleXMgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXV0b21hdGljYWxseS5cbiAgICAgICAgIyBObyBleHBsaWNpdCBpbml0aWFsaXphdGlvbiBpcyB1c3VhbGx5IG5lZWRlZCBoZXJlIHVubGVzcyBjdXN0b21pemluZyBiZWhhdmlvci5cblxuICAgIGFzeW5jIGRlZiBnZXRfbGxtX3Jlc3BvbnNlKFxuICAgICAgICBzZWxmLFxuICAgICAgICBtZXNzYWdlczogTGlzdFtEaWN0W3N0ciwgc3RyXV0sXG4gICAgICAgIG1vZGVsOiBzdHIgPSBcImdwdC00b1wiLCAjIERlZmF1bHQgbW9kZWwsIGNhbiBiZSBvdmVycmlkZGVuXG4gICAgICAgIHRlbXBlcmF0dXJlOiBmbG9hdCA9IDAuNyxcbiAgICAgICAgbWF4X3Rva2VuczogT3B0aW9uYWxbaW50XSA9IE5vbmUsXG4gICAgICAgICoqa3dhcmdzOiBBbnlcbiAgICApIC0+IHN0cjpcbiAgICAgICAgXCJcIlwiR2V0cyBhIHJlc3BvbnNlIGZyb20gdGhlIHNwZWNpZmllZCBMTE0gdXNpbmcgTGl0ZUxMTS5cblxuICAgICAgICBBcmdzOlxuICAgICAgICAgICAgbWVzc2FnZXM6IEEgbGlzdCBvZiBtZXNzYWdlIGRpY3Rpb25hcmllcyAoZS5nLiwgW3sncm9sZSc6ICd1c2VyJywgJ2NvbnRlbnQnOiAnLi4uJ31dKS5cbiAgICAgICAgICAgIG1vZGVsOiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgdG8gdXNlIChlLmcuLCAnZ3B0LTQnLCAnY2xhdWRlLTMtb3B1cy0yMDI0MDIyOScpLlxuICAgICAgICAgICAgICAgICAgIExpdGVMTE0gbWFwcyBtYW55IGNvbW1vbiBuYW1lcyBhdXRvbWF0aWNhbGx5LlxuICAgICAgICAgICAgdGVtcGVyYXR1cmU6IFRoZSBzYW1wbGluZyB0ZW1wZXJhdHVyZS5cbiAgICAgICAgICAgIG1heF90b2tlbnM6IFRoZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgdG8gZ2VuZXJhdGUuXG4gICAgICAgICAgICAqKmt3YXJnczogQWRkaXRpb25hbCBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgTGl0ZUxMTSBjb21wbGV0aW9uIGNhbGwuXG5cbiAgICAgICAgUmV0dXJuczpcbiAgICAgICAgICAgIFRoZSBjb250ZW50IG9mIHRoZSByZXNwb25zZSBtZXNzYWdlIGZyb20gdGhlIExMTS5cblxuICAgICAgICBSYWlzZXM6XG4gICAgICAgICAgICBFeGNlcHRpb246IElmIHRoZSBMaXRlTExNIGNhbGwgZmFpbHMuXG4gICAgICAgIFwiXCJcIlxuICAgICAgICB0cnk6XG4gICAgICAgICAgICBwcmludChmXCJDYWxsaW5nIExpdGVMTE0gbW9kZWw6IHttb2RlbH0gd2l0aCB7bGVuKG1lc3NhZ2VzKX0gbWVzc2FnZXMuXCIpICMgQmFzaWMgbG9nZ2luZ1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBsaXRlbGxtLmFjb21wbGV0aW9uKFxuICAgICAgICAgICAgICAgIG1vZGVsPW1vZGVsLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzPW1lc3NhZ2VzLFxuICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlPXRlbXBlcmF0dXJlLFxuICAgICAgICAgICAgICAgIG1heF90b2tlbnM9bWF4X3Rva2VucyxcbiAgICAgICAgICAgICAgICAqKmt3YXJnc1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgIyBBY2Nlc3NpbmcgcmVzcG9uc2UgY29udGVudCBtaWdodCB2YXJ5IHNsaWdodGx5IGJhc2VkIG9uIExpdGVMTE0gdmVyc2lvbi9tb2RlbFxuICAgICAgICAgICAgIyBVc3VhbGx5IHJlc3BvbnNlLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50XG4gICAgICAgICAgICBjb250ZW50ID0gcmVzcG9uc2UuY2hvaWNlc1swXS5tZXNzYWdlLmNvbnRlbnRcbiAgICAgICAgICAgIHByaW50KGZcIkxpdGVMTE0gcmVzcG9uc2UgcmVjZWl2ZWQgKGZpcnN0IDEwMCBjaGFycyk6IHtjb250ZW50WzoxMDBdfS4uLlwiKSAjIEJhc2ljIGxvZ2dpbmdcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50XG4gICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgICAgIHByaW50KGZcIkVycm9yIGR1cmluZyBMaXRlTExNIGNhbGw6IHtlfVwiKSAjIEJhc2ljIGVycm9yIGxvZ2dpbmdcbiAgICAgICAgICAgICMgQ29uc2lkZXIgbW9yZSByb2J1c3QgZXJyb3IgaGFuZGxpbmcvbG9nZ2luZ1xuICAgICAgICAgICAgcmFpc2VcblxuIyBFeGFtcGxlIHVzYWdlIChvcHRpb25hbCwgZm9yIHRlc3RpbmcpXG4jIGFzeW5jIGRlZiBtYWluKCk6XG4jICAgICB3cmFwcGVyID0gTGl0ZUxMTVdyYXBwZXIoKVxuIyAgICAgbWVzc2FnZXMgPSBbe1wicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFwiVGVsbCBtZSBhIGpva2UgYWJvdXQgQUkuXCJ9XVxuIyAgICAgdHJ5OlxuIyAgICAgICAgIHJlc3BvbnNlX2NvbnRlbnQgPSBhd2FpdCB3cmFwcGVyLmdldF9sbG1fcmVzcG9uc2UobWVzc2FnZXMsIG1vZGVsPVwiZ3B0LTMuNS10dXJib1wiKVxuIyAgICAgICAgIHByaW50KFwiXFxuTExNIFJlc3BvbnNlOlwiKVxuIyAgICAgICAgIHByaW50KHJlc3BvbnNlX2NvbnRlbnQpXG4jICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4jICAgICAgICAgcHJpbnQoZlwiRmFpbGVkIHRvIGdldCByZXNwb25zZToge2V9XCIpXG5cbiMgaWYgX19uYW1lX18gPT0gXCJfX21haW5fX1wiOlxuIyAgICAgaW1wb3J0IGFzeW5jaW9cbiMgICAgIGFzeW5jaW8ucnVuKG1haW4oKSkgLi4uXG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvaW50ZWdyYXRpb25zL21lbTBfaW50ZWdyYXRpb24ucHlcbi4uLlxuXG4gICAgICAgIFJhaXNlczpcbiAgICAgICAgICAgIFZhbHVlRXJyb3I6IElmIG5laXRoZXIgY29udGVudCBub3IgbWVzc2FnZXMgYXJlIHByb3ZpZGVkLlxuICAgICAgICAgICAgRXhjZXB0aW9uOiBJZiB0aGUgTWVtMCBBUEkgY2FsbCBmYWlscy5cbiAgICAgICAgXCJcIlwiXG4gICAgICAgIGlmIG5vdCBjb250ZW50IGFuZCBub3QgbWVzc2FnZXM6XG4gICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKFwiRWl0aGVyICdjb250ZW50JyBvciAnbWVzc2FnZXMnIG11c3QgYmUgcHJvdmlkZWQuXCIpXG5cbiAgICAgICAgYWRkX2t3YXJncyA9IHtcInVzZXJfaWRcIjogdXNlcl9pZH1cbiAgICAgICAgaWYgbWV0YWRhdGE6XG4gICAgICAgICAgICBhZGRfa3dhcmdzW1wibWV0YWRhdGFcIl0gPSBtZXRhZGF0YVxuXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIHByaW50KGZcIkFkZGluZyBtZW1vcnkgZm9yIHVzZXJfaWQ6IHt1c2VyX2lkfVwiKVxuICAgICAgICAgICAgaWYgbWVzc2FnZXM6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5jbGllbnQuYWRkKG1lc3NhZ2VzPW1lc3NhZ2VzLCAqKmFkZF9rd2FyZ3MpXG4gICAgICAgICAgICBlbHNlOiAjIGNvbnRlbnQgbXVzdCBiZSBwcm92aWRlZCBkdWUgdG8gdGhlIGNoZWNrIGFib3ZlXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5jbGllbnQuYWRkKGNvbnRlbnQ9Y29udGVudCwgKiphZGRfa3dhcmdzKVxuICAgICAgICAgICAgcHJpbnQoZlwiTWVtMCBhZGQgcmVzdWx0OiB7cmVzdWx0fVwiKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgICAgICBwcmludChmXCJFcnJvciBhZGRpbmcgbWVtb3J5IHRvIE1lbTAgZm9yIHVzZXIge3VzZXJfaWR9OiB7ZX1cIilcbiAgICAgICAgICAgIHJhaXNlXG4uLi5cblxuIyBOb3RlOiBUaGUgTWVtMCBQeXRob24gY2xpZW50IGl0c2VsZiBkb2Vzbid0IGFwcGVhciB0byBiZSBpbmhlcmVudGx5IGFzeW5jIGJhc2VkIG9uIGRvY3MuXG4jIFRoZXNlIGFzeW5jIHdyYXBwZXJzIGV4ZWN1dGUgdGhlIHN5bmNocm9ub3VzIGNsaWVudCBjYWxscyB3aXRoaW4gdGhlIGFzeW5jIGZ1bmN0aW9uLFxuIyBhbGxvd2luZyB0aGVtIHRvIGJlIGF3YWl0ZWQgaW4gYW4gYXN5bmMgZW52aXJvbm1lbnQgKGxpa2UgTGFuZ0dyYXBoL0Zhc3RBUEkpLlxuIyBGb3IgdHJ1ZSBhc3luYyBJTyB3aXRoIE1lbTAsIG9uZSBtaWdodCBuZWVkIGFuIGFzeW5jIEhUVFAgY2xpZW50IChsaWtlIGh0dHB4KVxuIyB0byBjYWxsIHRoZSBNZW0wIFJFU1QgQVBJIGRpcmVjdGx5IGlmIHRoZSBQeXRob24gU0RLIGRvZXNuJ3Qgc3VwcG9ydCBpdCBuYXRpdmVseS4gLi4uXG5QYXRoOiBSRUFETUUubWRcbi4uLlxuXG5DaGVjayBvdXQgdGhlc2UgYXdlc29tZSBhZ2VudHMgKHRoZXkgbGl2ZSBpbiBzZXBhcmF0ZSByZXBvc2l0b3JpZXMpLiBZb3UgY2FuIHJ1biB0aGVtIHNlcGFyYXRlbHkgb3IgZGVwbG95IHRoZW0gb24gTGFuZ1NtaXRoOlxuLSBbQ29BZ2VudHMgVHJhdmVsIEFnZW50XShodHRwczovL2dpdGh1Yi5jb20vQ29waWxvdEtpdC9Db3BpbG90S2l0L3RyZWUvbWFpbi9leGFtcGxlcy9jb2FnZW50cy10cmF2ZWwvYWdlbnQpXG4tIFtDb0FnZW50cyBBSSBSZXNlYXJjaGVyXShodHRwczovL2dpdGh1Yi5jb20vQ29waWxvdEtpdC9Db3BpbG90S2l0L3RyZWUvbWFpbi9leGFtcGxlcy9jb2FnZW50cy1haS1yZXNlYXJjaGVyL2FnZW50KVxuXG5BZGRpdGlvbmFsbHksIHRoaXMgcHJvamVjdCBub3cgaW5jbHVkZXMgYSBidWlsdC1pbiBNQ1AgKE11bHRpLUNoYW5uZWwgUHJvdG9jb2wpIEFnZW50OlxuLSAqKk1DUCBBZ2VudCoqOiBBIGdlbmVyYWwtcHVycG9zZSBhZ2VudCBjYXBhYmxlIG9mIGhhbmRsaW5nIHZhcmlvdXMgdGFza3MgdGhyb3VnaCBjb25maWd1cmFibGUgTUNQIHNlcnZlcnMuXG5cbiMjIENvcGlsb3QgQ2xvdWQgaXMgcmVxdWlyZWQgdG8gcnVuIHRoaXMgcHJvamVjdDogXG5cblxuXG5cbiMjIFF1aWNrIFN0YXJ0IPCfmoBcblxuIyMjIDEuIFByZXJlcXVpc2l0ZXNcbk1ha2Ugc3VyZSB5b3UgaGF2ZTpcbi0gW3BucG1dKGh0dHBzOi8vcG5wbS5pby9pbnN0YWxsYXRpb24pXG5cbiMjIyAyLiBBUEkgS2V5c1xuLSBbQ29waWxvdCBDbG91ZF0oaHR0cHM6Ly9jbG91ZC5jb3BpbG90a2l0LmFpKVxuLi4uXG5cbjEuICoqQ29uZmlndXJpbmcgQ3VzdG9tIE1DUCBTZXJ2ZXJzKio6XG4gICAtIENsaWNrIHRoZSBcIk1DUCBTZXJ2ZXJzXCIgYnV0dG9uIGluIHRoZSB0b3AgcmlnaHQgb2YgdGhlIGludGVyZmFjZVxuICAgLSBBZGQgc2VydmVycyB2aWEgdGhlIGNvbmZpZ3VyYXRpb24gcGFuZWw6XG4gICAgIC0gKipTdGFuZGFyZCBJTyoqOiBSdW4gY29tbWFuZHMgbG9jYWxseSAoZS5nLiwgUHl0aG9uIHNjcmlwdHMpXG4gICAgIC0gKipTU0UqKjogQ29ubmVjdCB0byBleHRlcm5hbCBNQ1AtY29tcGF0aWJsZSBzZXJ2ZXJzICh2aWEgU2VydmVyLVNlbnQgRXZlbnRzKVxuXG4yLiAqKlB1YmxpYyBNQ1AgU2VydmVycyoqOlxuICAgLSBZb3UgY2FuIGNvbm5lY3QgdG8gcHVibGljIE1DUCBzZXJ2ZXJzIGxpa2UgW21jcC5jb21wb3Npby5kZXZdKGh0dHBzOi8vbWNwLmNvbXBvc2lvLmRldi8pIGFuZCBbbWNwLnJ1bl0oaHR0cHM6Ly93d3cubWNwLnJ1bi8pXG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9saWIvbWNwLWNvbmZpZy10eXBlcy50c1xuZXhwb3J0IHR5cGUgQ29ubmVjdGlvblR5cGUgPSBcInN0ZGlvXCIgfCBcInNzZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0ZGlvQ29uZmlnIHtcbiAgY29tbWFuZDogc3RyaW5nO1xuICBhcmdzOiBzdHJpbmdbXTtcbiAgdHJhbnNwb3J0OiBcInN0ZGlvXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU1NFQ29uZmlnIHtcbiAgdXJsOiBzdHJpbmc7XG4gIHRyYW5zcG9ydDogXCJzc2VcIjtcbn1cblxuZXhwb3J0IHR5cGUgU2VydmVyQ29uZmlnID0gU3RkaW9Db25maWcgfCBTU0VDb25maWc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTUNQQ29uZmlnIHtcbiAgbWNwX2NvbmZpZzogUmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPjtcbn1cblxuLy8gTG9jYWwgc3RvcmFnZSBrZXkgZm9yIHNhdmluZyBNQ1AgY29uZmlndXJhdGlvbnNcbmV4cG9ydCBjb25zdCBNQ1BfU1RPUkFHRV9LRVkgPSBcIm1jcC1zZXJ2ZXItY29uZmlnc1wiO1xuLi4uXG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvaW50ZWdyYXRpb25zL21lbW9yeXNhdmVyX21hbmFnZXIucHlcbmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBEaWN0LCBBbnksIE9wdGlvbmFsXG5mcm9tIC5iYXNlX21lbW9yeSBpbXBvcnQgQmFzZU1lbW9yeU1hbmFnZXJcblxuY2xhc3MgTWVtb3J5U2F2ZXJNYW5hZ2VyKEJhc2VNZW1vcnlNYW5hZ2VyKTpcbiAgICBcIlwiXCJcbiAgICBXcmFwcyB0aGUgbGVnYWN5IE1lbW9yeVNhdmVyIHRvIGNvbmZvcm0gdG8gdGhlIEJhc2VNZW1vcnlNYW5hZ2VyIHByb3RvY29sLlxuICAgIFByb3ZpZGVzIGFzeW5jLCB0eXBlLXNhZmUgbWV0aG9kcyBmb3IgYWdlbnQgbWVtb3J5IG9wZXJhdGlvbnMuXG4gICAgXCJcIlwiXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIHN0b3JhZ2VfcGF0aDogT3B0aW9uYWxbc3RyXSA9IE5vbmUpOlxuICAgICAgICB0cnk6XG4gICAgICAgICAgICBmcm9tIGxhbmdncmFwaC5jaGVja3BvaW50Lm1lbW9yeSBpbXBvcnQgTWVtb3J5U2F2ZXJcbiAgICAgICAgZXhjZXB0IEltcG9ydEVycm9yIGFzIGU6XG4gICAgICAgICAgICByYWlzZSBJbXBvcnRFcnJvcihmXCJNZW1vcnlTYXZlciBjb3VsZCBub3QgYmUgaW1wb3J0ZWQ6IHtlfVwiKVxuICAgICAgICAjIFVzZSBhIGZpbGUgcGF0aCBvciBpbi1tZW1vcnkgYnkgZGVmYXVsdFxuICAgICAgICBzZWxmLnNhdmVyID0gTWVtb3J5U2F2ZXIoc3RvcmFnZV9wYXRoKSBpZiBzdG9yYWdlX3BhdGggZWxzZSBNZW1vcnlTYXZlcigpXG4uLi5cblBhdGg6IGFnZW50L21jcF9hZ2VudC9pbnRlZ3JhdGlvbnMvYTJhX3Byb3RvY29scy5weVxuZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBEaWN0LCBBbnksIExpc3QsIFVuaW9uXG5mcm9tIHB5ZGFudGljIGltcG9ydCBCYXNlTW9kZWwsIEZpZWxkXG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuXG5jbGFzcyBUYXNrUmVxdWVzdFBheWxvYWQoQmFzZU1vZGVsKTpcbiAgICBcIlwiXCJcbiAgICBFeGFtcGxlIHBheWxvYWQgZm9yIHJlcXVlc3RpbmcgYSB0YXNrIGZyb20gYW5vdGhlciBhZ2VudC5cbiAgICBFeHRlbmQgYXMgbmVlZGVkIGZvciB5b3VyIGRvbWFpbi5cbiAgICBcIlwiXCJcbiAgICB0YXNrX3R5cGU6IHN0clxuICAgIHBhcmFtZXRlcnM6IERpY3Rbc3RyLCBBbnldID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PWRpY3QpXG4gICAgY29udGV4dDogT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dID0gTm9uZVxuXG5jbGFzcyBUYXNrUmVzcG9uc2VQYXlsb2FkKEJhc2VNb2RlbCk6XG4gICAgXCJcIlwiXG4gICAgRXhhbXBsZSBwYXlsb2FkIGZvciByZXNwb25kaW5nIHRvIGEgdGFzayByZXF1ZXN0LlxuICAgIFwiXCJcIlxuICAgIHN1Y2Nlc3M6IGJvb2xcbiAgICByZXN1bHQ6IE9wdGlvbmFsW0FueV0gPSBOb25lXG4gICAgZXJyb3I6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG5cbmNsYXNzIEEyQU1lc3NhZ2UoQmFzZU1vZGVsKTpcbiAgICBcIlwiXCJcbiAgICBTdGFuZGFyZGl6ZWQgbWVzc2FnZSBmb3IgYWdlbnQtdG8tYWdlbnQgY29tbXVuaWNhdGlvbi5cbiAgICBcIlwiXCJcbiAgICBzZW5kZXJfYWdlbnRfaWQ6IHN0clxuICAgIHJlY2lwaWVudF9hZ2VudF9pZDogc3RyXG4gICAgbWVzc2FnZV90eXBlOiBzdHIgICMgZS5nLiwgJ3Rhc2tfcmVxdWVzdCcsICd0YXNrX3Jlc3BvbnNlJywgJ3N0YXR1cycsIGV0Yy5cbiAgICBwYXlsb2FkOiBVbmlvbltUYXNrUmVxdWVzdFBheWxvYWQsIFRhc2tSZXNwb25zZVBheWxvYWQsIERpY3Rbc3RyLCBBbnldXVxuICAgIHRpbWVzdGFtcDogZGF0ZXRpbWUgPSBGaWVsZChkZWZhdWx0X2ZhY3Rvcnk9ZGF0ZXRpbWUudXRjbm93KVxuICAgIG1ldGFkYXRhOiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV0gPSBOb25lXG5cbmNsYXNzIENhcGFiaWxpdHlEaXNjb3ZlcnlQYXlsb2FkKEJhc2VNb2RlbCk6XG4gICAgXCJcIlwiXG4gICAgUGF5bG9hZCBmb3IgY2FwYWJpbGl0eSBkaXNjb3ZlcnkgYmV0d2VlbiBhZ2VudHMuXG4gICAgXCJcIlwiXG4gICAgY2FwYWJpbGl0aWVzOiBMaXN0W3N0cl1cbiAgICBhZ2VudF92ZXJzaW9uOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuICAgIGV4dHJhOiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV0gPSBOb25lXG5cbiMgWW91IGNhbiBleHRlbmQgd2l0aCBtb3JlIG1lc3NhZ2UgdHlwZXMgYXMgbmVlZGVkIChuZWdvdGlhdGlvbiwgc3RhdGUgc3luYywgZXRjLikgLi4uXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFIZ0Q0dUZtTXRLWUhnbnV6ZGhudFdnIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiQzovVXNlcnMva2V2aW4vT25lRHJpdmUvRGVza3RvcC9HRy9LQi1tdWx0aS1hZ2VudCIsImZvbGRlclJvb3QiOiJDOi9Vc2Vycy9rZXZpbi9PbmVEcml2ZS9EZXNrdG9wL0dHL0tCLW11bHRpLWFnZW50In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSBhbHNvIGNoZWNrIHRoZSBmcm9udGVuZCBNQ1AgYWdlbnQgaW1wbGVtZW50YXRpb246XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMDVlODM5ZjItMTkzYy00MWI4LTk2OTItMTU4NzU2NTMwMzI4IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxS0xmbnJWeWZtMnQ5QmlMOVJQYVFueCIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzdGFydC1hbGwuYmF0XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQgbWUgYWxzbyBjaGVjayB0aGUgc3RhcnQtYWxsLmJhdCBmaWxlIHRvIHVuZGVyc3RhbmQgaG93IHRoZSBhcHBsaWNhdGlvbiBpcyBsYXVuY2hlZDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGZyb250ZW5kL3NyYy9jb21wb25lbnRzL21jcC1jb25maWctbW9kYWwudHN4XG5cInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDb0FnZW50IH0gZnJvbSBcIkBjb3BpbG90a2l0L3JlYWN0LWNvcmVcIjtcbmltcG9ydCB7IHVzZUxvY2FsU3RvcmFnZSB9IGZyb20gXCJAL2hvb2tzL3VzZS1sb2NhbC1zdG9yYWdlXCI7XG5pbXBvcnQgeyBDb25uZWN0aW9uVHlwZSwgU2VydmVyQ29uZmlnLCBNQ1BfU1RPUkFHRV9LRVkgfSBmcm9tIFwiQC9saWIvbWNwLWNvbmZpZy10eXBlc1wiO1xuaW1wb3J0IHsgWCwgUGx1cywgU2VydmVyLCBHbG9iZSwgVHJhc2gyIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuaW1wb3J0IHsgQXZhaWxhYmxlQWdlbnRzIH0gZnJvbSBcIkAvbGliL2F2YWlsYWJsZS1hZ2VudHNcIjtcblxuLy8gRXh0ZXJuYWwgbGluayBpY29uIGNvbXBvbmVudFxuY29uc3QgRXh0ZXJuYWxMaW5rID0gKCkgPT4gKFxuICA8c3ZnXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgY2xhc3NOYW1lPVwidy0zIGgtMyBtbC0xXCJcbiAgICBmaWxsPVwibm9uZVwiXG4gICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgPlxuICAgIDxwYXRoXG4gICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgICBzdHJva2VXaWR0aD17Mn1cbiAgICAgIGQ9XCJNMTAgNkg2YTIgMiAwIDAwLTIgMnYxMGEyIDIgMCAwMDIgMmgxMGEyIDIgMCAwMDItMnYtNE0xNCA0aDZtMCAwdjZtMC02TDEwIDE0XCJcbiAgICAvPlxuICA8L3N2Zz5cbik7XG5cbmludGVyZmFjZSBNQ1BDb25maWdNb2RhbFByb3BzIHtcbiAgaXNPcGVuOiBib29sZWFuO1xuICBvbkNsb3NlOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTUNQQ29uZmlnTW9kYWwoeyBpc09wZW4sIG9uQ2xvc2UgfTogTUNQQ29uZmlnTW9kYWxQcm9wcykge1xuICAvLyBVc2UgcmVmIHRvIGF2b2lkIHJlLXJlbmRlcmluZyBpc3N1ZXNcbiAgY29uc3QgY29uZmlnc1JlZiA9IHVzZVJlZjxSZWNvcmQ8c3RyaW5nLCBTZXJ2ZXJDb25maWc+Pih7fSk7XG4gIFxuICAvLyBVc2UgbG9jYWxTdG9yYWdlIGhvb2sgZm9yIHBlcnNpc3RlbnQgc3RvcmFnZVxuICBjb25zdCBbc2F2ZWRDb25maWdzLCBzZXRTYXZlZENvbmZpZ3NdID0gdXNlTG9jYWxTdG9yYWdlPFxuICAgIFJlY29yZDxzdHJpbmcsIFNlcnZlckNvbmZpZz5cbiAgPihNQ1BfU1RPUkFHRV9LRVksIHt9KTtcbiAgXG4gIC8vIFNldCB0aGUgcmVmIHZhbHVlIG9uY2Ugd2UgaGF2ZSB0aGUgc2F2ZWQgY29uZmlnc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChPYmplY3Qua2V5cyhzYXZlZENvbmZpZ3MpLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbmZpZ3NSZWYuY3VycmVudCA9IHNhdmVkQ29uZmlncztcbiAgICB9XG4gIH0sIFtzYXZlZENvbmZpZ3NdKTtcblxuICAvLyBJbml0aWFsaXplIGFnZW50IHN0YXRlIHdpdGggdGhlIGRhdGEgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgY29uc3QgeyBzdGF0ZTogYWdlbnRTdGF0ZSwgc2V0U3RhdGU6IHNldEFnZW50U3RhdGUgfSA9IHVzZUNvQWdlbnQ8e1xuICAgIG1jcF9jb25maWc6IFJlY29yZDxzdHJpbmcsIFNlcnZlckNvbmZpZz47XG4gICAgcmVzcG9uc2U6IHN0cmluZztcbiAgICBsb2dzOiBBcnJheTx7IG1lc3NhZ2U6IHN0cmluZzsgZG9uZTogYm9vbGVhbiB9PjtcbiAgfT4oe1xuICAgIG5hbWU6IEF2YWlsYWJsZUFnZW50cy5NQ1BfQUdFTlQsXG4gICAgaW5pdGlhbFN0YXRlOiB7XG4gICAgICBtY3BfY29uZmlnOiBjb25maWdzUmVmLmN1cnJlbnQsXG4gICAgICByZXNwb25zZTogXCJcIixcbiAgICAgIGxvZ3M6IFtdLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFNpbXBsZSBnZXR0ZXIgZm9yIGNvbmZpZ3NcbiAgY29uc3QgY29uZmlncyA9IGFnZW50U3RhdGU/Lm1jcF9jb25maWcgfHwge307XG5cbiAgLy8gU2ltcGxlIHNldHRlciB3cmFwcGVyIGZvciBjb25maWdzXG4gIGNvbnN0IHNldENvbmZpZ3MgPSAobmV3Q29uZmlnczogUmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPikgPT4ge1xuICAgIHNldEFnZW50U3RhdGUoKHByZXZTdGF0ZSkgPT4gKHtcbiAgICAgIC4uLnByZXZTdGF0ZSEsXG4gICAgICBtY3BfY29uZmlnOiBuZXdDb25maWdzLFxuICAgIH0pKTtcbiAgICBzZXRTYXZlZENvbmZpZ3MobmV3Q29uZmlncyk7XG4gICAgY29uZmlnc1JlZi5jdXJyZW50ID0gbmV3Q29uZmlncztcbiAgfTtcblxuICBjb25zdCBbc2VydmVyTmFtZSwgc2V0U2VydmVyTmFtZV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW2Nvbm5lY3Rpb25UeXBlLCBzZXRDb25uZWN0aW9uVHlwZV0gPSB1c2VTdGF0ZTxDb25uZWN0aW9uVHlwZT4oXCJzdGRpb1wiKTtcbiAgY29uc3QgW2NvbW1hbmQsIHNldENvbW1hbmRdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFthcmdzLCBzZXRBcmdzXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbdXJsLCBzZXRVcmxdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgW3Nob3dBZGRTZXJ2ZXJGb3JtLCBzZXRTaG93QWRkU2VydmVyRm9ybV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgLy8gQ2FsY3VsYXRlIHNlcnZlciBzdGF0aXN0aWNzXG4gIGNvbnN0IHRvdGFsU2VydmVycyA9IE9iamVjdC5rZXlzKGNvbmZpZ3MpLmxlbmd0aDtcbiAgY29uc3Qgc3RkaW9TZXJ2ZXJzID0gT2JqZWN0LnZhbHVlcyhjb25maWdzKS5maWx0ZXIoXG4gICAgKGNvbmZpZykgPT4gY29uZmlnLnRyYW5zcG9ydCA9PT0gXCJzdGRpb1wiXG4gICkubGVuZ3RoO1xuICBjb25zdCBzc2VTZXJ2ZXJzID0gT2JqZWN0LnZhbHVlcyhjb25maWdzKS5maWx0ZXIoXG4gICAgKGNvbmZpZykgPT4gY29uZmlnLnRyYW5zcG9ydCA9PT0gXCJzc2VcIlxuICApLmxlbmd0aDtcblxuICAvLyBTZXQgbG9hZGluZyB0byBmYWxzZSB3aGVuIHN0YXRlIGlzIGxvYWRlZFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhZ2VudFN0YXRlKSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2FnZW50U3RhdGVdKTtcblxuICBjb25zdCBhZGRDb25maWcgPSAoKSA9PiB7XG4gICAgaWYgKCFzZXJ2ZXJOYW1lKSByZXR1cm47XG5cbiAgICBjb25zdCBuZXdDb25maWcgPVxuICAgICAgY29ubmVjdGlvblR5cGUgPT09IFwic3RkaW9cIlxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGNvbW1hbmQsXG4gICAgICAgICAgICBhcmdzOiBhcmdzLnNwbGl0KFwiIFwiKS5maWx0ZXIoKGFyZykgPT4gYXJnLnRyaW0oKSAhPT0gXCJcIiksXG4gICAgICAgICAgICB0cmFuc3BvcnQ6IFwic3RkaW9cIiBhcyBjb25zdCxcbiAgICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgdHJhbnNwb3J0OiBcInNzZVwiIGFzIGNvbnN0LFxuICAgICAgICAgIH07XG5cbiAgICBzZXRDb25maWdzKHtcbiAgICAgIC4uLmNvbmZpZ3MsXG4gICAgICBbc2VydmVyTmFtZV06IG5ld0NvbmZpZyxcbiAgICB9KTtcblxuICAgIC8vIFJlc2V0IGZvcm1cbiAgICBzZXRTZXJ2ZXJOYW1lKFwiXCIpO1xuICAgIHNldENvbW1hbmQoXCJcIik7XG4gICAgc2V0QXJncyhcIlwiKTtcbiAgICBzZXRVcmwoXCJcIik7XG4gICAgc2V0U2hvd0FkZFNlcnZlckZvcm0oZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZUNvbmZpZyA9IChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBuZXdDb25maWdzID0geyAuLi5jb25maWdzIH07XG4gICAgZGVsZXRlIG5ld0NvbmZpZ3NbbmFtZV07XG4gICAgc2V0Q29uZmlncyhuZXdDb25maWdzKTtcbiAgfTtcbi4uLlxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmaXhlZCBpbnNldC0wIGJnLWJsYWNrIGJnLW9wYWNpdHktNTAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgei1bOTk5OV1cIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctd2hpdGUgcm91bmRlZC1sZyBwLTYgdy1mdWxsIG1heC13LTR4bCBtYXgtaC1bOTB2aF0gb3ZlcmZsb3cteS1hdXRvIHJlbGF0aXZlIHotWzEwMDAwXVwiPlxuICAgICAgICB7LyogSGVhZGVyICovfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1iLTZcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBtYi00XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxTZXJ2ZXIgY2xhc3NOYW1lPVwiaC02IHctNiBtci0yIHRleHQtZ3JheS03MDBcIiAvPlxuICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1zZW1pYm9sZFwiPk1DUCBTZXJ2ZXIgQ29uZmlndXJhdGlvbjwvaDE+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xvc2V9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtZ3JheS01MDAgaG92ZXI6dGV4dC1ncmF5LTcwMFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxYIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIHNtOmZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1zdGFydCBzbTppdGVtcy1jZW50ZXIgbXQtNCBnYXAtNFwiPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNjAwXCI+XG4gICAgICAgICAgICAgIE1hbmFnZSBhbmQgY29uZmlndXJlIHlvdXIgTUNQIHNlcnZlcnNcbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd0FkZFNlcnZlckZvcm0odHJ1ZSl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBzbTp3LWF1dG8gcHgtMyBweS0xLjUgYmctZ3JheS04MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIHRleHQtc20gZm9udC1tZWRpdW0gaG92ZXI6YmctZ3JheS03MDAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTEganVzdGlmeS1jZW50ZXJcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8UGx1cyBjbGFzc05hbWU9XCJoLTQgdy00XCIgLz5cbiAgICAgICAgICAgICAgQWRkIFNlcnZlclxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHsvKiBTZXJ2ZXIgU3RhdGlzdGljcyAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIHNtOmdyaWQtY29scy0zIGdhcC00IG1iLThcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLXdoaXRlIGJvcmRlciByb3VuZGVkLW1kIHAtNFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS01MDBcIj5Ub3RhbCBTZXJ2ZXJzPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZFwiPnt0b3RhbFNlcnZlcnN9PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy13aGl0ZSBib3JkZXIgcm91bmRlZC1tZCBwLTRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNTAwXCI+U3RkaW8gU2VydmVyczwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LTN4bCBmb250LWJvbGRcIj57c3RkaW9TZXJ2ZXJzfTwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctd2hpdGUgYm9yZGVyIHJvdW5kZWQtbWQgcC00XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTUwMFwiPlNTRSBTZXJ2ZXJzPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZFwiPntzc2VTZXJ2ZXJzfTwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7LyogU2VydmVyIExpc3QgKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctd2hpdGUgYm9yZGVyIHJvdW5kZWQtbWQgcC02XCI+XG4gICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1zZW1pYm9sZCBtYi00XCI+U2VydmVyIExpc3Q8L2gyPlxuXG4gICAgICAgICAge3RvdGFsU2VydmVycyA9PT0gMCA/IChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTUwMCB0ZXh0LWNlbnRlciBweS0xMFwiPlxuICAgICAgICAgICAgICBObyBzZXJ2ZXJzIGNvbmZpZ3VyZWQuIENsaWNrICZxdW90O0FkZCBTZXJ2ZXImcXVvdDsgdG8gZ2V0IHN0YXJ0ZWQuXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGdhcC00XCI+XG4gICAgICAgICAgICAgIHtPYmplY3QuZW50cmllcyhjb25maWdzKS5tYXAoKFtuYW1lLCBjb25maWddKSA9PiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm9yZGVyIHJvdW5kZWQtbWQgb3ZlcmZsb3ctaGlkZGVuIGJnLXdoaXRlIHNoYWRvdy1zbVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1zdGFydFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwiZm9udC1zZW1pYm9sZFwiPntuYW1lfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBweC0yIHB5LTAuNSBiZy1ncmF5LTEwMCB0ZXh0LXhzIHJvdW5kZWQgbXQtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7Y29uZmlnLnRyYW5zcG9ydCA9PT0gXCJzdGRpb1wiID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJ2ZXIgY2xhc3NOYW1lPVwidy0zIGgtMyBtci0xXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R2xvYmUgY2xhc3NOYW1lPVwidy0zIGgtMyBtci0xXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbi4uLlxuXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS00XCI+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJibG9jayB0ZXh0LXNtIGZvbnQtbWVkaXVtIG1iLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgU2VydmVyIE5hbWVcbiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c2VydmVyTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRTZXJ2ZXJOYW1lKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIHB4LTMgcHktMiBib3JkZXIgcm91bmRlZC1tZCB0ZXh0LXNtXCJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJlLmcuLCBhcGktc2VydmljZSwgZGF0YS1wcm9jZXNzb3JcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiYmxvY2sgdGV4dC1zbSBmb250LW1lZGl1bSBtYi0xXCI+XG4gICAgICAgICAgICAgICAgICAgIENvbm5lY3Rpb24gVHlwZVxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBnYXAtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q29ubmVjdGlvblR5cGUoXCJzdGRpb1wiKX1cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BweC0zIHB5LTIgYm9yZGVyIHJvdW5kZWQtbWQgdGV4dC1jZW50ZXIgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25UeXBlID09PSBcInN0ZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcImJnLWdyYXktMjAwIGJvcmRlci1ncmF5LTQwMCB0ZXh0LWdyYXktODAwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcImJnLXdoaXRlIHRleHQtZ3JheS03MDBcIlxuICAgICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPFNlcnZlciBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTFcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgIFN0YW5kYXJkIElPXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q29ubmVjdGlvblR5cGUoXCJzc2VcIil9XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgcHgtMyBweS0yIGJvcmRlciByb3VuZGVkLW1kIHRleHQtY2VudGVyIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyICR7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uVHlwZSA9PT0gXCJzc2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwiYmctZ3JheS0yMDAgYm9yZGVyLWdyYXktNDAwIHRleHQtZ3JheS04MDBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiYmctd2hpdGUgdGV4dC1ncmF5LTcwMFwiXG4gICAgICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8R2xvYmUgY2xhc3NOYW1lPVwidy00IGgtNCBtci0xXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICBTU0VcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbi4uLlxuICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZS5nLiwgaHR0cDovL2xvY2FsaG9zdDo4MDAwL2V2ZW50c1wiXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktZW5kIHNwYWNlLXgtMiBwdC0yXCI+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dBZGRTZXJ2ZXJGb3JtKGZhbHNlKX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicHgtNCBweS0yIGJvcmRlciB0ZXh0LWdyYXktNzAwIHJvdW5kZWQtbWQgaG92ZXI6YmctZ3JheS01MCB0ZXh0LXNtIGZvbnQtbWVkaXVtIGZsZXggaXRlbXMtY2VudGVyXCJcbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPFggY2xhc3NOYW1lPVwidy00IGgtNCBtci0xXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgQ2FuY2VsXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17YWRkQ29uZmlnfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJweC00IHB5LTIgYmctZ3JheS04MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIGhvdmVyOmJnLWdyYXktNzAwIHRleHQtc20gZm9udC1tZWRpdW0gZmxleCBpdGVtcy1jZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8UGx1cyBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTFcIiAvPlxuICAgICAgICAgICAgICAgICAgICBBZGQgU2VydmVyXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvY29tcG9uZW50cy9hZ2VudHMvbWNwLWFnZW50LnRzeFxuaW1wb3J0IFJlYWN0LCB7IEZDLCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEF2YWlsYWJsZUFnZW50cyB9IGZyb20gXCJAL2xpYi9hdmFpbGFibGUtYWdlbnRzXCI7XG5pbXBvcnQgeyB1c2VDb0FnZW50LCB1c2VDb0FnZW50U3RhdGVSZW5kZXIgfSBmcm9tIFwiQGNvcGlsb3RraXQvcmVhY3QtY29yZVwiO1xuaW1wb3J0IHsgQ2hlY2tDaXJjbGVJY29uIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5pbXBvcnQgeyBTZXJ2ZXJDb25maWcsIE1DUF9TVE9SQUdFX0tFWSB9IGZyb20gXCJAL2xpYi9tY3AtY29uZmlnLXR5cGVzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbFN0b3JhZ2UgfSBmcm9tIFwiQC9ob29rcy91c2UtbG9jYWwtc3RvcmFnZVwiO1xuXG5leHBvcnQgdHlwZSBNQ1BBZ2VudFN0YXRlID0ge1xuICByZXNwb25zZTogc3RyaW5nO1xuICBsb2dzOiBBcnJheTx7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIGRvbmU6IGJvb2xlYW47XG4gIH0+O1xuICBtY3BfY29uZmlnPzogUmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPjtcbn07XG5cbmV4cG9ydCBjb25zdCBNQ1BBZ2VudDogRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtsb2dzLCBzZXRMb2dzXSA9IHVzZVN0YXRlPFxuICAgIEFycmF5PHtcbiAgICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICAgIGRvbmU6IGJvb2xlYW47XG4gICAgfT5cbiAgPihbXSk7XG4gIFxuICBjb25zdCBpc1Byb2Nlc3NpbmcgPSB1c2VSZWYoZmFsc2UpO1xuICBcbiAgLy8gVXNlIHJlZiB0byBhdm9pZCByZS1yZW5kZXJpbmcgaXNzdWVzXG4gIGNvbnN0IGNvbmZpZ3NSZWYgPSB1c2VSZWY8UmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPj4oe30pO1xuICBcbiAgLy8gR2V0IHNhdmVkIE1DUCBjb25maWd1cmF0aW9ucyBmcm9tIGxvY2FsU3RvcmFnZVxuICBjb25zdCBbc2F2ZWRDb25maWdzXSA9IHVzZUxvY2FsU3RvcmFnZTxSZWNvcmQ8c3RyaW5nLCBTZXJ2ZXJDb25maWc+PihNQ1BfU1RPUkFHRV9LRVksIHt9KTtcbiAgXG4gIC8vIFNldCB0aGUgcmVmIHZhbHVlIG9uY2Ugd2UgaGF2ZSB0aGUgc2F2ZWQgY29uZmlnc1xuICBpZiAoT2JqZWN0LmtleXMoc2F2ZWRDb25maWdzKS5sZW5ndGggPiAwICYmIE9iamVjdC5rZXlzKGNvbmZpZ3NSZWYuY3VycmVudCkubGVuZ3RoID09PSAwKSB7XG4gICAgY29uZmlnc1JlZi5jdXJyZW50ID0gc2F2ZWRDb25maWdzO1xuICB9XG5cbiAgY29uc3QgeyBzdGF0ZTogbWNwQWdlbnRTdGF0ZSwgc3RvcDogc3RvcE1jcEFnZW50IH0gPSB1c2VDb0FnZW50PE1DUEFnZW50U3RhdGU+KHtcbiAgICBuYW1lOiBBdmFpbGFibGVBZ2VudHMuTUNQX0FHRU5ULFxuICAgIGluaXRpYWxTdGF0ZToge1xuICAgICAgcmVzcG9uc2U6IFwiXCIsXG4gICAgICBsb2dzOiBbXSxcbiAgICAgIG1jcF9jb25maWc6IGNvbmZpZ3NSZWYuY3VycmVudCxcbiAgICB9LFxuICB9KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtY3BBZ2VudFN0YXRlLmxvZ3MpIHtcbiAgICAgIHNldExvZ3MoKHByZXZMb2dzKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0xvZ3MgPSBbLi4ucHJldkxvZ3NdO1xuICAgICAgICBtY3BBZ2VudFN0YXRlLmxvZ3MuZm9yRWFjaCgobG9nKSA9PiB7XG4gICAgICAgICAgY29uc3QgZXhpc3RpbmdMb2dJbmRleCA9IG5ld0xvZ3MuZmluZEluZGV4KFxuICAgICAgICAgICAgKGwpID0+IGwubWVzc2FnZSA9PT0gbG9nLm1lc3NhZ2VcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChleGlzdGluZ0xvZ0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIGlmIChsb2cuZG9uZSAmJiAhbmV3TG9nc1tleGlzdGluZ0xvZ0luZGV4XS5kb25lKSB7XG4gICAgICAgICAgICAgIG5ld0xvZ3NbZXhpc3RpbmdMb2dJbmRleF0uZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xvZ3MucHVzaChsb2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXdMb2dzO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbWNwQWdlbnRTdGF0ZS5sb2dzXSk7XG5cbiAgdXNlQ29BZ2VudFN0YXRlUmVuZGVyKHtcbiAgICBuYW1lOiBBdmFpbGFibGVBZ2VudHMuTUNQX0FHRU5ULFxuICAgIGhhbmRsZXI6ICh7IG5vZGVOYW1lIH0pID0+IHtcbiAgICAgIGlmIChub2RlTmFtZSA9PT0gXCJfX2VuZF9fXCIpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgc3RvcE1jcEFnZW50KCk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyOiAoeyBzdGF0dXMgfSkgPT4ge1xuICAgICAgaWYgKHN0YXR1cyA9PT0gXCJpblByb2dyZXNzXCIpIHtcbiAgICAgICAgaXNQcm9jZXNzaW5nLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLWdyYXktNTAgcm91bmRlZC1sZ1wiPlxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1zZW1pYm9sZCBtYi0yXCI+UHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuLi48L2gzPlxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInNwYWNlLXktMlwiPlxuICAgICAgICAgICAgICB7bG9ncy5tYXAoKGxvZywgaWR4KSA9PiAoXG4gICAgICAgICAgICAgICAgPGxpIGtleT17aWR4fSBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLXN0YXJ0XCI+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2Btci0yICR7bG9nLmRvbmUgPyBcInRleHQtZ3JlZW4tNTAwXCIgOiBcInRleHQtZ3JheS00MDBcIn1gfT5cbiAgICAgICAgICAgICAgICAgICAge2xvZy5kb25lID8gXCLinJNcIiA6IFwi4p+zXCJ9XG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj57bG9nLm1lc3NhZ2V9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXR1cyA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgIGlzUHJvY2Vzc2luZy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvc2UgbWF4LXctbm9uZVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yIHRleHQtZ3JlZW4tNjAwIG1iLTRcIj5cbiAgICAgICAgICAgICAgICA8Q2hlY2tDaXJjbGVJY29uIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPlxuICAgICAgICAgICAgICAgIDxzcGFuPlByb2Nlc3NpbmcgY29tcGxldGU8L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgaWYgKGlzUHJvY2Vzc2luZy5jdXJyZW50KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBnYXAtNCBoLWZ1bGwgei1bOTk5XVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuaW1hdGUtcHVsc2UgcC02IGJnLXdoaXRlIHJvdW5kZWQtbGcgc2hhZG93LXNtXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLTYgYmctZ3JheS0yMDAgcm91bmRlZCB3LTEvMyBtYi00XCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLTQgYmctZ3JheS0yMDAgcm91bmRlZCB3LTUvNiBtYi0yXCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLTQgYmctZ3JheS0yMDAgcm91bmRlZCB3LWZ1bGwgbWItMlwiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaC00IGJnLWdyYXktMjAwIHJvdW5kZWQgdy00LzYgbWItMlwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBpZiAoIW1jcEFnZW50U3RhdGUucmVzcG9uc2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGdhcC00IGgtZnVsbCB6LVs5OTldXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLTIgcC02IGJnLXdoaXRlIHJvdW5kZWQtbGcgc2hhZG93LXNtXCI+XG4gICAgICAgIDxSZWFjdE1hcmtkb3duXG4gICAgICAgICAgY2xhc3NOYW1lPVwicHJvc2UgcHJvc2Utc20gbWQ6cHJvc2UtYmFzZSBsZzpwcm9zZS1sZyBwcm9zZS1zbGF0ZSBtYXgtdy1ub25lIGJnLWdyYXktNTAgcC02IHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1ncmF5LTIwMFwiXG4gICAgICAgICAgY29tcG9uZW50cz17e1xuICAgICAgICAgICAgaDE6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZCBtYi02IHBiLTIgYm9yZGVyLWJcIj5cbiAgICAgICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaDI6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtYm9sZCBtYi00IG10LThcIj57Y2hpbGRyZW59PC9oMj5cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBoMzogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LWJvbGQgbWItMyBtdC02XCI+e2NoaWxkcmVufTwvaDM+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgcDogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtYi00IGxlYWRpbmctcmVsYXhlZFwiPntjaGlsZHJlbn08L3A+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgdWw6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZGlzYyBwbC02IG1iLTQgc3BhY2UteS0yXCI+e2NoaWxkcmVufTwvdWw+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgb2w6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPG9sIGNsYXNzTmFtZT1cImxpc3QtZGVjaW1hbCBwbC02IG1iLTQgc3BhY2UteS0yXCI+e2NoaWxkcmVufTwvb2w+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgYmxvY2txdW90ZTogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzc05hbWU9XCJib3JkZXItbC00IGJvcmRlci1ncmF5LTMwMCBwbC00IHB5LTIgbXktNiBiZy1ncmF5LTUwIHJvdW5kZWQtclwiPlxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgPC9ibG9ja3F1b3RlPlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge21jcEFnZW50U3RhdGUucmVzcG9uc2V9XG4gICAgICAgIDwvUmVhY3RNYXJrZG93bj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL2xpYi9tY3AtY29uZmlnLXR5cGVzLnRzXG5leHBvcnQgdHlwZSBDb25uZWN0aW9uVHlwZSA9IFwic3RkaW9cIiB8IFwic3NlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RkaW9Db25maWcge1xuICBjb21tYW5kOiBzdHJpbmc7XG4gIGFyZ3M6IHN0cmluZ1tdO1xuICB0cmFuc3BvcnQ6IFwic3RkaW9cIjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTU0VDb25maWcge1xuICB1cmw6IHN0cmluZztcbiAgdHJhbnNwb3J0OiBcInNzZVwiO1xufVxuXG5leHBvcnQgdHlwZSBTZXJ2ZXJDb25maWcgPSBTdGRpb0NvbmZpZyB8IFNTRUNvbmZpZztcblxuZXhwb3J0IGludGVyZmFjZSBNQ1BDb25maWcge1xuICBtY3BfY29uZmlnOiBSZWNvcmQ8c3RyaW5nLCBTZXJ2ZXJDb25maWc+O1xufVxuXG4vLyBMb2NhbCBzdG9yYWdlIGtleSBmb3Igc2F2aW5nIE1DUCBjb25maWd1cmF0aW9uc1xuZXhwb3J0IGNvbnN0IE1DUF9TVE9SQUdFX0tFWSA9IFwibWNwLXNlcnZlci1jb25maWdzXCI7XG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9saWIvYXZhaWxhYmxlLWFnZW50cy50c1xuZXhwb3J0IGVudW0gQXZhaWxhYmxlQWdlbnRzIHtcbiAgVFJBVkVMX0FHRU5UID0gXCJ0cmF2ZWxcIixcbiAgUkVTRUFSQ0hfQUdFTlQgPSBcInJlc2VhcmNoX2FnZW50XCIsXG4gIE1DUF9BR0VOVCA9IFwibWNwLWFnZW50XCIsXG59XG4uLi5cblBhdGg6IGFnZW50L21jcF9hZ2VudC9hZ2VudC5weVxuLi4uXG5cbiMgRGVmaW5lIHRoZSBjb25uZWN0aW9uIHR5cGUgc3RydWN0dXJlc1xuY2xhc3MgU3RkaW9Db25uZWN0aW9uKFR5cGVkRGljdCk6XG4gICAgY29tbWFuZDogc3RyXG4gICAgYXJnczogTGlzdFtzdHJdXG4gICAgdHJhbnNwb3J0OiBMaXRlcmFsW1wic3RkaW9cIl1cblxuY2xhc3MgU1NFQ29ubmVjdGlvbihUeXBlZERpY3QpOlxuICAgIHVybDogc3RyXG4gICAgdHJhbnNwb3J0OiBMaXRlcmFsW1wic3NlXCJdXG5cbiMgVHlwZSBmb3IgTUNQIGNvbmZpZ3VyYXRpb25cbk1DUENvbmZpZyA9IERpY3Rbc3RyLCBVbmlvbltTdGRpb0Nvbm5lY3Rpb24sIFNTRUNvbm5lY3Rpb25dXVxuXG5jbGFzcyBBZ2VudFN0YXRlKENvcGlsb3RLaXRTdGF0ZSk6XG4gICAgXCJcIlwiXG4gICAgSGVyZSB3ZSBkZWZpbmUgdGhlIHN0YXRlIG9mIHRoZSBhZ2VudFxuXG4gICAgSW4gdGhpcyBpbnN0YW5jZSwgd2UncmUgaW5oZXJpdGluZyBmcm9tIENvcGlsb3RLaXRTdGF0ZSwgd2hpY2ggd2lsbCBicmluZyBpblxuICAgIHRoZSBDb3BpbG90S2l0U3RhdGUgZmllbGRzLiBXZSdyZSBhbHNvIGFkZGluZyBhIGN1c3RvbSBmaWVsZCwgYG1jcF9jb25maWdgLFxuICAgIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBjb25maWd1cmUgTUNQIHNlcnZpY2VzIGZvciB0aGUgYWdlbnQuXG4gICAgXCJcIlwiXG4gICAgIyBEZWZpbmUgbWNwX2NvbmZpZyBhcyBhbiBvcHRpb25hbCBmaWVsZCB3aXRob3V0IHNraXBwaW5nIHZhbGlkYXRpb25cbiAgICBtY3BfY29uZmlnOiBPcHRpb25hbFtNQ1BDb25maWddXG5cbiMgRGVmYXVsdCBNQ1AgY29uZmlndXJhdGlvbiB0byB1c2Ugd2hlbiBubyBjb25maWd1cmF0aW9uIGlzIHByb3ZpZGVkIGluIHRoZSBzdGF0ZVxuIyBVc2VzIHJlbGF0aXZlIHBhdGhzIHRoYXQgd2lsbCB3b3JrIHdpdGhpbiB0aGUgcHJvamVjdCBzdHJ1Y3R1cmVcbkRFRkFVTFRfTUNQX0NPTkZJRzogTUNQQ29uZmlnID0ge1xuICAgIFwibWF0aFwiOiB7XG4gICAgICAgIFwiY29tbWFuZFwiOiBcInB5dGhvblwiLFxuICAgICAgICAjIFVzZSBhIHJlbGF0aXZlIHBhdGggdGhhdCB3aWxsIGJlIHJlc29sdmVkIGJhc2VkIG9uIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5XG4gICAgICAgIFwiYXJnc1wiOiBbb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXyksIFwiLi5cIiwgXCJtYXRoX3NlcnZlci5weVwiKV0sXG4gICAgICAgIFwidHJhbnNwb3J0XCI6IFwic3RkaW9cIixcbiAgICB9LFxufVxuLi4uXG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvYWdlbnRfZmFjdG9yeS5weVxuIyBQbGFjZWhvbGRlciBmb3IgdGhlIGR5bmFtaWMgQWdlbnQgRmFjdG9yeVxuaW1wb3J0IG9zXG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIERpY3QsIEFueVxuZnJvbSAuaW50ZWdyYXRpb25zLm1lbTBfaW50ZWdyYXRpb24gaW1wb3J0IE1lbTBNZW1vcnlNYW5hZ2VyXG5mcm9tIC5pbnRlZ3JhdGlvbnMubWVtb3J5c2F2ZXJfbWFuYWdlciBpbXBvcnQgTWVtb3J5U2F2ZXJNYW5hZ2VyXG5mcm9tIC5pbnRlZ3JhdGlvbnMubGl0ZWxsbV9pbnRlZ3JhdGlvbiBpbXBvcnQgTGl0ZUxMTVdyYXBwZXJcbmZyb20gLmludGVncmF0aW9ucy5hMmFfaW50ZWdyYXRpb24gaW1wb3J0IEEyQUNvbW11bmljYXRvclxuIyBmcm9tIC5pbnRlZ3JhdGlvbnMuZ3JhcGhpdGlfaW50ZWdyYXRpb24gaW1wb3J0IEdyYXBoaXRpS25vd2xlZGdlU291cmNlICAjIFBsYWNlaG9sZGVyXG5cbmZyb20gLmludGVncmF0aW9ucy5iYXNlX21lbW9yeSBpbXBvcnQgQmFzZU1lbW9yeU1hbmFnZXJcblxuY2xhc3MgQWdlbnRGYWN0b3J5OlxuICAgIFwiXCJcIlxuICAgIEZhY3RvcnkgZm9yIGNyZWF0aW5nIGFnZW50cyB3aXRoIG1vZHVsYXIsIGNvbmZpZ3VyYWJsZSBiYWNrZW5kcy5cbiAgICBSZWFkcyBjb25maWcvZW52IHRvIHNlbGVjdCBtZW1vcnksIExMTSwgQTJBLCBhbmQga25vd2xlZGdlIGJhY2tlbmRzLlxuICAgIFwiXCJcIlxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjb25maWc6IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXSA9IE5vbmUpOlxuICAgICAgICBzZWxmLmNvbmZpZyA9IGNvbmZpZyBvciBzZWxmLl9sb2FkX2NvbmZpZ19mcm9tX2VudigpXG4gICAgICAgIHNlbGYubWVtb3J5X2JhY2tlbmQgPSBzZWxmLmNvbmZpZy5nZXQoXCJNRU1PUllfQkFDS0VORFwiLCBcIm1lbW9yeXNhdmVyXCIpLmxvd2VyKClcbiAgICAgICAgc2VsZi5sbG1fYmFja2VuZCA9IHNlbGYuY29uZmlnLmdldChcIkxMTV9CQUNLRU5EXCIsIFwibGl0ZWxsbVwiKS5sb3dlcigpXG4gICAgICAgIHNlbGYuYTJhX2JhY2tlbmQgPSBzZWxmLmNvbmZpZy5nZXQoXCJBMkFfQkFDS0VORFwiLCBcImlubWVtb3J5XCIpLmxvd2VyKClcbiAgICAgICAgc2VsZi5rbm93bGVkZ2VfYmFja2VuZCA9IHNlbGYuY29uZmlnLmdldChcIktOT1dMRURHRV9CQUNLRU5EXCIsIFwiZ3JhcGhpdGlcIikubG93ZXIoKVxuXG4gICAgZGVmIF9sb2FkX2NvbmZpZ19mcm9tX2VudihzZWxmKSAtPiBEaWN0W3N0ciwgQW55XTpcbiAgICAgICAgXCJcIlwiTG9hZCBiYWNrZW5kIGNvbmZpZyBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcy5cIlwiXCJcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwiTUVNT1JZX0JBQ0tFTkRcIjogb3MuZ2V0ZW52KFwiTUVNT1JZX0JBQ0tFTkRcIiwgXCJtZW1vcnlzYXZlclwiKSxcbiAgICAgICAgICAgIFwiTExNX0JBQ0tFTkRcIjogb3MuZ2V0ZW52KFwiTExNX0JBQ0tFTkRcIiwgXCJsaXRlbGxtXCIpLFxuICAgICAgICAgICAgXCJBMkFfQkFDS0VORFwiOiBvcy5nZXRlbnYoXCJBMkFfQkFDS0VORFwiLCBcImlubWVtb3J5XCIpLFxuICAgICAgICAgICAgXCJLTk9XTEVER0VfQkFDS0VORFwiOiBvcy5nZXRlbnYoXCJLTk9XTEVER0VfQkFDS0VORFwiLCBcImdyYXBoaXRpXCIpLFxuICAgICAgICB9XG5cbiAgICBkZWYgZ2V0X21lbW9yeV9tYW5hZ2VyKHNlbGYpIC0+IEJhc2VNZW1vcnlNYW5hZ2VyOlxuICAgICAgICBpZiBzZWxmLm1lbW9yeV9iYWNrZW5kID09IFwibWVtMFwiOlxuICAgICAgICAgICAgcmV0dXJuIE1lbTBNZW1vcnlNYW5hZ2VyKClcbiAgICAgICAgZWxpZiBzZWxmLm1lbW9yeV9iYWNrZW5kID09IFwibWVtb3J5c2F2ZXJcIjpcbiAgICAgICAgICAgIHJldHVybiBNZW1vcnlTYXZlck1hbmFnZXIoKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmXCJVbmtub3duIG1lbW9yeSBiYWNrZW5kOiB7c2VsZi5tZW1vcnlfYmFja2VuZH1cIilcbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvY29hZ2VudHMtcHJvdmlkZXIudHN4XG4uLi5cblxuICBjb25zdCB7IHN0YXRlOiBhaVJlc2VhcmNoQWdlbnRTdGF0ZSB9ID0gdXNlQ29BZ2VudCh7XG4gICAgbmFtZTogQXZhaWxhYmxlQWdlbnRzLlJFU0VBUkNIX0FHRU5ULFxuICAgIGluaXRpYWxTdGF0ZToge1xuICAgICAgbW9kZWw6IFwib3BlbmFpXCIsXG4gICAgICByZXNlYXJjaF9xdWVzdGlvbjogXCJcIixcbiAgICAgIHJlc291cmNlczogW10sXG4gICAgICByZXBvcnQ6IFwiXCIsXG4gICAgICBsb2dzOiBbXSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB7IHN0YXRlOiBtY3BBZ2VudFN0YXRlIH0gPSB1c2VDb0FnZW50KHtcbiAgICBuYW1lOiBBdmFpbGFibGVBZ2VudHMuTUNQX0FHRU5ULFxuICAgIGluaXRpYWxTdGF0ZToge1xuICAgICAgcmVzcG9uc2U6IFwiXCIsXG4gICAgICBsb2dzOiBbXSxcbiAgICAgIG1jcF9jb25maWc6IGNvbmZpZ3NSZWYuY3VycmVudCxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxBZ2VudHNDb250ZXh0LlByb3ZpZGVyXG4gICAgICB2YWx1ZT17W1xuICAgICAgICB7XG4gICAgICAgICAgLi4udHJhdmVsQWdlbnRTdGF0ZSxcbiAgICAgICAgICBfX25hbWVfXzogQXZhaWxhYmxlQWdlbnRzLlRSQVZFTC4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTZLUlI2NGllbnc1NjFqQUUxdzR6TFMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJDOi9Vc2Vycy9rZXZpbi9PbmVEcml2ZS9EZXNrdG9wL0dHL0tCLW11bHRpLWFnZW50IiwiZm9sZGVyUm9vdCI6IkM6L1VzZXJzL2tldmluL09uZURyaXZlL0Rlc2t0b3AvR0cvS0ItbXVsdGktYWdlbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiTGV0IG1lIGFsc28gY2hlY2sgdGhlIHN0YXJ0LWFsbC5iYXQgZmlsZSB0byB1bmRlcnN0YW5kIGhvdyB0aGUgYXBwbGljYXRpb24gaXMgbGF1bmNoZWQ6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNzAzNTMxMzUtNDdhMC00N2E2LTk4ZjMtYzhiZGVlZTkyMTNkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiQmFzZWQgb24gbXkgYW5hbHlzaXMgb2YgdGhlIGNvZGViYXNlLCBJIGNhbiBub3cgcHJvdmlkZSB5b3Ugd2l0aCBhIGNvbXByZWhlbnNpdmUgb3ZlcnZpZXcgb2YgeW91ciBhcHBsaWNhdGlvbjpcblxuIyBBbmFseXNpcyBvZiBLQi1tdWx0aS1hZ2VudCBBcHBsaWNhdGlvblxuXG4jIyBPdmVydmlld1xuWW91ciBhcHBsaWNhdGlvbiBpcyBhbiBcIk9wZW4gTXVsdGktQWdlbnQgQ2FudmFzXCIgLSBhIHBsYXRmb3JtIHRoYXQgYWxsb3dzIHVzZXJzIHRvIGludGVyYWN0IHdpdGggbXVsdGlwbGUgc3BlY2lhbGl6ZWQgQUkgYWdlbnRzIGluIGEgc2luZ2xlIGNoYXQgaW50ZXJmYWNlLiBUaGUgYXBwbGljYXRpb24gY29uc2lzdHMgb2Y6XG5cbjEuICoqRnJvbnRlbmQqKjogQSBOZXh0LmpzIGFwcGxpY2F0aW9uIHdpdGggYSBjaGF0IGludGVyZmFjZSB0aGF0IHN1cHBvcnRzIG11bHRpcGxlIGFnZW50IHR5cGVzXG4yLiAqKkJhY2tlbmQqKjogQSBMYW5nR3JhcGgtYmFzZWQgYWdlbnQgc3lzdGVtIHRoYXQgdXNlcyB0aGUgTW9kZWwgQ29udGV4dCBQcm90b2NvbCAoTUNQKVxuXG4jIyBBcmNoaXRlY3R1cmVcblxuIyMjIEZyb250ZW5kIENvbXBvbmVudHNcbi0gKipDaGF0IEludGVyZmFjZSoqOiBCdWlsdCB3aXRoIENvcGlsb3RLaXQncyBVSSBjb21wb25lbnRzXG4tICoqQWdlbnQgQ29tcG9uZW50cyoqOlxuICAtICoqVHJhdmVsIEFnZW50Kio6IEZvciBwbGFubmluZyB0cmlwcyBhbmQgY3JlYXRpbmcgaXRpbmVyYXJpZXNcbiAgLSAqKlJlc2VhcmNoIEFnZW50Kio6IEZvciBjb25kdWN0aW5nIHJlc2VhcmNoIHdpdGggcmVhbC10aW1lIGxvZ3NcbiAgLSAqKk1DUCBBZ2VudCoqOiBBIGdlbmVyYWwtcHVycG9zZSBhZ2VudCB0aGF0IGNhbiBjb25uZWN0IHRvIHZhcmlvdXMgTUNQIHNlcnZlcnNcblxuLSAqKlN0YXRlIE1hbmFnZW1lbnQqKjogVXNlcyBDb3BpbG90S2l0J3Mgc3RhdGUgbWFuYWdlbWVudCBzeXN0ZW0gd2l0aCBSZWFjdCBDb250ZXh0XG5cbiMjIyBCYWNrZW5kIENvbXBvbmVudHNcbi0gKipMYW5nR3JhcGggV29ya2Zsb3cqKjogQSBncmFwaC1iYXNlZCB3b3JrZmxvdyBzeXN0ZW0gZm9yIHRoZSBhZ2VudFxuLSAqKk1DUCBJbnRlZ3JhdGlvbioqOiBVc2VzIHRoZSBNb2RlbCBDb250ZXh0IFByb3RvY29sIHRvIGNvbm5lY3QgdG8gdmFyaW91cyB0b29scyBhbmQgc2VydmljZXNcbi0gKipNYXRoIFNlcnZlcioqOiBBIHNpbXBsZSBleGFtcGxlIHNlcnZlciB0aGF0IHByb3ZpZGVzIG1hdGggb3BlcmF0aW9uc1xuXG4jIyBLZXkgRmVhdHVyZXNcblxuIyMjIE11bHRpLUFnZW50IFN5c3RlbVxuLSBUaGUgc3lzdGVtIGFsbG93cyBtdWx0aXBsZSBzcGVjaWFsaXplZCBhZ2VudHMgdG8gY29leGlzdCBpbiBvbmUgY2hhdCBpbnRlcmZhY2Vcbi0gRWFjaCBhZ2VudCBoYXMgaXRzIG93biBVSSBwYW5lbCB0aGF0IGFwcGVhcnMgd2hlbiB0aGUgYWdlbnQgaXMgYWN0aXZlXG5cbiMjIyBNQ1AgU2VydmVyIENvbmZpZ3VyYXRpb25cbi0gVXNlcnMgY2FuIGNvbmZpZ3VyZSBhbmQgY29ubmVjdCB0byB2YXJpb3VzIE1DUCBzZXJ2ZXJzOlxuICAtICoqU3RhbmRhcmQgSU8qKjogTG9jYWwgc2VydmVycyBydW5uaW5nIGFzIHN1YnByb2Nlc3Nlc1xuICAtICoqU1NFIChTZXJ2ZXItU2VudCBFdmVudHMpKio6IFJlbW90ZSBzZXJ2ZXJzIGFjY2Vzc2libGUgdmlhIEhUVFBcblxuIyMjIEV4dGVuc2liaWxpdHlcbi0gVGhlIHN5c3RlbSBpcyBkZXNpZ25lZCB0byBiZSBleHRlbnNpYmxlIHdpdGg6XG4gIC0gTW9kdWxhciBhZ2VudCBjb21wb25lbnRzXG4gIC0gQ29uZmlndXJhYmxlIE1DUCBzZXJ2ZXJzXG4gIC0gUGx1Z2dhYmxlIG1lbW9yeSBhbmQgTExNIGJhY2tlbmRzXG5cbiMjIFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvblxuXG4jIyMgRnJvbnRlbmRcbi0gQnVpbHQgd2l0aCBOZXh0LmpzLCBSZWFjdCwgYW5kIFR5cGVTY3JpcHRcbi0gVXNlcyBUYWlsd2luZCBDU1MgZm9yIHN0eWxpbmdcbi0gQ29waWxvdEtpdCBmb3IgYWdlbnQgc3RhdGUgbWFuYWdlbWVudCBhbmQgVUkgY29tcG9uZW50c1xuLSBMb2NhbCBzdG9yYWdlIGZvciBwZXJzaXN0aW5nIE1DUCBzZXJ2ZXIgY29uZmlndXJhdGlvbnNcblxuIyMjIEJhY2tlbmRcbi0gUHl0aG9uLWJhc2VkIHdpdGggTGFuZ0dyYXBoIGZvciB3b3JrZmxvdyBtYW5hZ2VtZW50XG4tIFVzZXMgTGFuZ0NoYWluIGFuZCBPcGVuQUkgZm9yIExMTSBpbnRlZ3JhdGlvblxuLSBGYXN0TUNQIGZvciBjcmVhdGluZyBNQ1AtY29tcGF0aWJsZSBzZXJ2ZXJzXG4tIE1vZHVsYXIgZGVzaWduIHdpdGggZmFjdG9yeSBwYXR0ZXJuIGZvciBjcmVhdGluZyBhZ2VudHMgd2l0aCBkaWZmZXJlbnQgYmFja2VuZHNcblxuIyMgUnVubmluZyB0aGUgQXBwbGljYXRpb25cblxuVGhlIGFwcGxpY2F0aW9uIGNhbiBiZSBzdGFydGVkIHVzaW5nIHRoZSBgc3RhcnQtYWxsLmJhdGAgc2NyaXB0LCB3aGljaDpcbjEuIFN0YXJ0cyB0aGUgYmFja2VuZCBMYW5nR3JhcGggc2VydmVyIG9uIHBvcnQgODEyM1xuMi4gU3RhcnRzIHRoZSBmcm9udGVuZCBOZXh0LmpzIHNlcnZlciAodHlwaWNhbGx5IG9uIHBvcnQgMzAwMClcblxuIyMgQ3VycmVudCBTdGF0ZSBhbmQgUG90ZW50aWFsIEltcHJvdmVtZW50c1xuXG5UaGUgYXBwbGljYXRpb24gaGFzIGEgc29saWQgZm91bmRhdGlvbiB3aXRoOlxuLSBXb3JraW5nIG11bHRpLWFnZW50IGNoYXQgaW50ZXJmYWNlXG4tIE1DUCBzZXJ2ZXIgY29uZmlndXJhdGlvbiBzeXN0ZW1cbi0gRXhhbXBsZSBtYXRoIHNlcnZlciBpbXBsZW1lbnRhdGlvblxuXG5Qb3RlbnRpYWwgYXJlYXMgZm9yIGltcHJvdmVtZW50IG1pZ2h0IGluY2x1ZGU6XG4tIEFkZGluZyBtb3JlIHNwZWNpYWxpemVkIGFnZW50c1xuLSBFbmhhbmNpbmcgdGhlIE1DUCBzZXJ2ZXIgZWNvc3lzdGVtXG4tIEltcHJvdmluZyB0aGUgYWdlbnQgZmFjdG9yeSB3aXRoIG1vcmUgYmFja2VuZCBvcHRpb25zXG4tIEFkZGluZyBhdXRoZW50aWNhdGlvbiBhbmQgdXNlciBtYW5hZ2VtZW50XG5cbldvdWxkIHlvdSBsaWtlIG1lIHRvIGRpdmUgZGVlcGVyIGludG8gYW55IHNwZWNpZmljIGFzcGVjdCBvZiB0aGUgYXBwbGljYXRpb24/XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHN0YXJ0LWFsbC5iYXQ6XG4gICAgIDFcdEBlY2hvIG9mZlxuICAgICAyXHRSRU0gTGF1bmNoIHNjcmlwdCBmb3IgTXVsdGktQWdlbnQgQ2FudmFzOiBzdGFydHMgYm90aCBmcm9udGVuZCBhbmQgYmFja2VuZFxuICAgICAzXHRcbiAgICAgNFx0UkVNIFN0YXJ0IGJhY2tlbmQgKGFnZW50KSBpbiBhIG5ldyB3aW5kb3dcbiAgICAgNVx0c3RhcnQgXCJNQ1AgQWdlbnQgQmFja2VuZFwiIGNtZCAvayBcImNkIC9kICV+ZHAwYWdlbnQgJiYgcG9ldHJ5IGluc3RhbGwgJiYgcG9ldHJ5IHJ1biBsYW5nZ3JhcGggZGV2IC0taG9zdCBsb2NhbGhvc3QgLS1wb3J0IDgxMjMgLS1uby1icm93c2VyXCJcbiAgICAgNlx0XG4gICAgIDdcdFJFTSBTdGFydCBmcm9udGVuZCAoTmV4dC5qcykgaW4gYSBuZXcgd2luZG93XG4gICAgIDhcdHN0YXJ0IFwiRnJvbnRlbmRcIiBjbWQgL2sgXCJjZCAvZCAlfmRwMGZyb250ZW5kICYmIHBucG0gaW5zdGFsbCAmJiBwbnBtIHJ1biBkZXZcIlxuICAgICA5XHRcbiAgICAxMFx0UkVNIE9wdGlvbmFsOiBXYWl0IGZvciB1c2VyIHRvIGNsb3NlXG4gICAgMTFcdGVjaG8gQm90aCBiYWNrZW5kIGFuZCBmcm9udGVuZCBoYXZlIGJlZW4gc3RhcnRlZCBpbiBuZXcgd2luZG93cy5cbiAgICAxMlx0cGF1c2VcbiAgICAxM1x0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxM1xuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxS0xmbnJWeWZtMnQ5QmlMOVJQYVFueCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkM6L1VzZXJzL2tldmluL09uZURyaXZlL0Rlc2t0b3AvR0cvS0ItbXVsdGktYWdlbnQiLCJmb2xkZXJSb290IjoiQzovVXNlcnMva2V2aW4vT25lRHJpdmUvRGVza3RvcC9HRy9LQi1tdWx0aS1hZ2VudCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiJCYXNlZCBvbiBteSBhbmFseXNpcyBvZiB0aGUgY29kZWJhc2UsIEkgY2FuIG5vdyBwcm92aWRlIHlvdSB3aXRoIGEgY29tcHJlaGVuc2l2ZSBvdmVydmlldyBvZiB5b3VyIGFwcGxpY2F0aW9uOlxuXG4jIEFuYWx5c2lzIG9mIEtCLW11bHRpLWFnZW50IEFwcGxpY2F0aW9uXG5cbiMjIE92ZXJ2aWV3XG5Zb3VyIGFwcGxpY2F0aW9uIGlzIGFuIFwiT3BlbiBNdWx0aS1BZ2VudCBDYW52YXNcIiAtIGEgcGxhdGZvcm0gdGhhdCBhbGxvd3MgdXNlcnMgdG8gaW50ZXJhY3Qgd2l0aCBtdWx0aXBsZSBzcGVjaWFsaXplZCBBSSBhZ2VudHMgaW4gYSBzaW5nbGUgY2hhdCBpbnRlcmZhY2UuIFRoZSBhcHBsaWNhdGlvbiBjb25zaXN0cyBvZjpcblxuMS4gKipGcm9udGVuZCoqOiBBIE5leHQuanMgYXBwbGljYXRpb24gd2l0aCBhIGNoYXQgaW50ZXJmYWNlIHRoYXQgc3VwcG9ydHMgbXVsdGlwbGUgYWdlbnQgdHlwZXNcbjIuICoqQmFja2VuZCoqOiBBIExhbmdHcmFwaC1iYXNlZCBhZ2VudCBzeXN0ZW0gdGhhdCB1c2VzIHRoZSBNb2RlbCBDb250ZXh0IFByb3RvY29sIChNQ1ApXG5cbiMjIEFyY2hpdGVjdHVyZVxuXG4jIyMgRnJvbnRlbmQgQ29tcG9uZW50c1xuLSAqKkNoYXQgSW50ZXJmYWNlKio6IEJ1aWx0IHdpdGggQ29waWxvdEtpdCdzIFVJIGNvbXBvbmVudHNcbi0gKipBZ2VudCBDb21wb25lbnRzKio6XG4gIC0gKipUcmF2ZWwgQWdlbnQqKjogRm9yIHBsYW5uaW5nIHRyaXBzIGFuZCBjcmVhdGluZyBpdGluZXJhcmllc1xuICAtICoqUmVzZWFyY2ggQWdlbnQqKjogRm9yIGNvbmR1Y3RpbmcgcmVzZWFyY2ggd2l0aCByZWFsLXRpbWUgbG9nc1xuICAtICoqTUNQIEFnZW50Kio6IEEgZ2VuZXJhbC1wdXJwb3NlIGFnZW50IHRoYXQgY2FuIGNvbm5lY3QgdG8gdmFyaW91cyBNQ1Agc2VydmVyc1xuXG4tICoqU3RhdGUgTWFuYWdlbWVudCoqOiBVc2VzIENvcGlsb3RLaXQncyBzdGF0ZSBtYW5hZ2VtZW50IHN5c3RlbSB3aXRoIFJlYWN0IENvbnRleHRcblxuIyMjIEJhY2tlbmQgQ29tcG9uZW50c1xuLSAqKkxhbmdHcmFwaCBXb3JrZmxvdyoqOiBBIGdyYXBoLWJhc2VkIHdvcmtmbG93IHN5c3RlbSBmb3IgdGhlIGFnZW50XG4tICoqTUNQIEludGVncmF0aW9uKio6IFVzZXMgdGhlIE1vZGVsIENvbnRleHQgUHJvdG9jb2wgdG8gY29ubmVjdCB0byB2YXJpb3VzIHRvb2xzIGFuZCBzZXJ2aWNlc1xuLSAqKk1hdGggU2VydmVyKio6IEEgc2ltcGxlIGV4YW1wbGUgc2VydmVyIHRoYXQgcHJvdmlkZXMgbWF0aCBvcGVyYXRpb25zXG5cbiMjIEtleSBGZWF0dXJlc1xuXG4jIyMgTXVsdGktQWdlbnQgU3lzdGVtXG4tIFRoZSBzeXN0ZW0gYWxsb3dzIG11bHRpcGxlIHNwZWNpYWxpemVkIGFnZW50cyB0byBjb2V4aXN0IGluIG9uZSBjaGF0IGludGVyZmFjZVxuLSBFYWNoIGFnZW50IGhhcyBpdHMgb3duIFVJIHBhbmVsIHRoYXQgYXBwZWFycyB3aGVuIHRoZSBhZ2VudCBpcyBhY3RpdmVcblxuIyMjIE1DUCBTZXJ2ZXIgQ29uZmlndXJhdGlvblxuLSBVc2VycyBjYW4gY29uZmlndXJlIGFuZCBjb25uZWN0IHRvIHZhcmlvdXMgTUNQIHNlcnZlcnM6XG4gIC0gKipTdGFuZGFyZCBJTyoqOiBMb2NhbCBzZXJ2ZXJzIHJ1bm5pbmcgYXMgc3VicHJvY2Vzc2VzXG4gIC0gKipTU0UgKFNlcnZlci1TZW50IEV2ZW50cykqKjogUmVtb3RlIHNlcnZlcnMgYWNjZXNzaWJsZSB2aWEgSFRUUFxuXG4jIyMgRXh0ZW5zaWJpbGl0eVxuLSBUaGUgc3lzdGVtIGlzIGRlc2lnbmVkIHRvIGJlIGV4dGVuc2libGUgd2l0aDpcbiAgLSBNb2R1bGFyIGFnZW50IGNvbXBvbmVudHNcbiAgLSBDb25maWd1cmFibGUgTUNQIHNlcnZlcnNcbiAgLSBQbHVnZ2FibGUgbWVtb3J5IGFuZCBMTE0gYmFja2VuZHNcblxuIyMgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uXG5cbiMjIyBGcm9udGVuZFxuLSBCdWlsdCB3aXRoIE5leHQuanMsIFJlYWN0LCBhbmQgVHlwZVNjcmlwdFxuLSBVc2VzIFRhaWx3aW5kIENTUyBmb3Igc3R5bGluZ1xuLSBDb3BpbG90S2l0IGZvciBhZ2VudCBzdGF0ZSBtYW5hZ2VtZW50IGFuZCBVSSBjb21wb25lbnRzXG4tIExvY2FsIHN0b3JhZ2UgZm9yIHBlcnNpc3RpbmcgTUNQIHNlcnZlciBjb25maWd1cmF0aW9uc1xuXG4jIyMgQmFja2VuZFxuLSBQeXRob24tYmFzZWQgd2l0aCBMYW5nR3JhcGggZm9yIHdvcmtmbG93IG1hbmFnZW1lbnRcbi0gVXNlcyBMYW5nQ2hhaW4gYW5kIE9wZW5BSSBmb3IgTExNIGludGVncmF0aW9uXG4tIEZhc3RNQ1AgZm9yIGNyZWF0aW5nIE1DUC1jb21wYXRpYmxlIHNlcnZlcnNcbi0gTW9kdWxhciBkZXNpZ24gd2l0aCBmYWN0b3J5IHBhdHRlcm4gZm9yIGNyZWF0aW5nIGFnZW50cyB3aXRoIGRpZmZlcmVudCBiYWNrZW5kc1xuXG4jIyBSdW5uaW5nIHRoZSBBcHBsaWNhdGlvblxuXG5UaGUgYXBwbGljYXRpb24gY2FuIGJlIHN0YXJ0ZWQgdXNpbmcgdGhlIGBzdGFydC1hbGwuYmF0YCBzY3JpcHQsIHdoaWNoOlxuMS4gU3RhcnRzIHRoZSBiYWNrZW5kIExhbmdHcmFwaCBzZXJ2ZXIgb24gcG9ydCA4MTIzXG4yLiBTdGFydHMgdGhlIGZyb250ZW5kIE5leHQuanMgc2VydmVyICh0eXBpY2FsbHkgb24gcG9ydCAzMDAwKVxuXG4jIyBDdXJyZW50IFN0YXRlIGFuZCBQb3RlbnRpYWwgSW1wcm92ZW1lbnRzXG5cblRoZSBhcHBsaWNhdGlvbiBoYXMgYSBzb2xpZCBmb3VuZGF0aW9uIHdpdGg6XG4tIFdvcmtpbmcgbXVsdGktYWdlbnQgY2hhdCBpbnRlcmZhY2Vcbi0gTUNQIHNlcnZlciBjb25maWd1cmF0aW9uIHN5c3RlbVxuLSBFeGFtcGxlIG1hdGggc2VydmVyIGltcGxlbWVudGF0aW9uXG5cblBvdGVudGlhbCBhcmVhcyBmb3IgaW1wcm92ZW1lbnQgbWlnaHQgaW5jbHVkZTpcbi0gQWRkaW5nIG1vcmUgc3BlY2lhbGl6ZWQgYWdlbnRzXG4tIEVuaGFuY2luZyB0aGUgTUNQIHNlcnZlciBlY29zeXN0ZW1cbi0gSW1wcm92aW5nIHRoZSBhZ2VudCBmYWN0b3J5IHdpdGggbW9yZSBiYWNrZW5kIG9wdGlvbnNcbi0gQWRkaW5nIGF1dGhlbnRpY2F0aW9uIGFuZCB1c2VyIG1hbmFnZW1lbnRcblxuV291bGQgeW91IGxpa2UgbWUgdG8gZGl2ZSBkZWVwZXIgaW50byBhbnkgc3BlY2lmaWMgYXNwZWN0IG9mIHRoZSBhcHBsaWNhdGlvbj9cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119XSwiZmVlZGJhY2tTdGF0ZXMiOnsidGVtcC1mZS1jOTU3YmU3My1hMGFlLTQ2M2QtOWE3YS1lZWI3MGZhOTc5NTUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTg4MjNkYTg3LTAwYzMtNDg4NS1hMTAzLWZmYWRhZTczMDFlOCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtY2NmOTgyZWEtZjI2ZS00YzIyLWFkZWUtZGUxM2ZkYzU3OWFiIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS05MWY0YzUzMC03ZmYzLTRkYWYtOTA0Ny1lNzZiNTQ3MDQ0OGQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTgyZGJkYTAxLTQzYjctNDU3MC04N2I5LTI3YzgwODhkZmE2YSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZDhiZTI0MWMtNmExOS00N2JmLWE5ODUtOTFkYzExOGVjNDA4Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifX0sInRvb2xVc2VTdGF0ZXMiOnsiMWRjNjNjZjAtYjg0Mi00ZjcxLWEyOGQtMzdlMzQ5NDNkYmZmO3Rvb2x1X3ZydHhfMDFYVXFlekt3ZFpkempBNVljd2YycVJRIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IHN0YXJ0LWFsbC5iYXRcbkBlY2hvIG9mZlxuUkVNIExhdW5jaCBzY3JpcHQgZm9yIE11bHRpLUFnZW50IENhbnZhczogc3RhcnRzIGJvdGggZnJvbnRlbmQgYW5kIGJhY2tlbmRcblxuUkVNIFN0YXJ0IGJhY2tlbmQgKGFnZW50KSBpbiBhIG5ldyB3aW5kb3dcbnN0YXJ0IFwiTUNQIEFnZW50IEJhY2tlbmRcIiBjbWQgL2sgXCJjZCAvZCAlfmRwMGFnZW50ICYmIHBvZXRyeSBpbnN0YWxsICYmIHBvZXRyeSBydW4gbGFuZ2dyYXBoIGRldiAtLWhvc3QgbG9jYWxob3N0IC0tcG9ydCA4MTIzIC0tbm8tYnJvd3NlclwiXG5cblJFTSBTdGFydCBmcm9udGVuZCAoTmV4dC5qcykgaW4gYSBuZXcgd2luZG93XG5zdGFydCBcIkZyb250ZW5kXCIgY21kIC9rIFwiY2QgL2QgJX5kcDBmcm9udGVuZCAmJiBwbnBtIGluc3RhbGwgJiYgcG5wbSBydW4gZGV2XCJcblxuUkVNIE9wdGlvbmFsOiBXYWl0IGZvciB1c2VyIHRvIGNsb3NlXG5lY2hvIEJvdGggYmFja2VuZCBhbmQgZnJvbnRlbmQgaGF2ZSBiZWVuIHN0YXJ0ZWQgaW4gbmV3IHdpbmRvd3MuXG5wYXVzZVxuLi4uXG5QYXRoOiAuY3Vyc29yL3J1bGVzL2Z1bGxzdGFjay1iZXN0LXByYWN0aWNlcy5tZGNcbi0tLVxuZGVzY3JpcHRpb246IFxuZ2xvYnM6IFxuYWx3YXlzQXBwbHk6IHRydWVcbi0tLVxuIyBGdWxsc3RhY2sgQmVzdCBQcmFjdGljZXMgUnVsZVxuXG5UbyBlbnN1cmUgYSBjb21wbGV0ZSwgYnVnLWZyZWUgYXBwIGFjcm9zcyBib3RoIGZyb250ZW5kIGFuZCBiYWNrZW5kLCBmb2xsb3cgdGhlc2UgdW5pZmllZCBndWlkZWxpbmVzOlxuXG4jIyBQcm9qZWN0IFN0cnVjdHVyZVxuLSBGcm9udGVuZCBjb2RlIGlzIGluIFtgL2Zyb250ZW5kYF0obWRjOmZyb250ZW5kL1JFQURNRS5tZCksIHdpdGggbWFpbiBsb2dpYyBpbiBbYHNyYy9hcHAvYF0obWRjOmZyb250ZW5kL3NyYy9hcHApIGFuZCBjb21wb25lbnRzIGluIFtgc3JjL2NvbXBvbmVudHMvYF0obWRjOmZyb250ZW5kL3NyYy9jb21wb25lbnRzKS5cbi0gQmFja2VuZCBhZ2VudCBjb2RlIGlzIGluIFtgL2FnZW50YF0obWRjOmFnZW50L1JFQURNRS5tZCksIHdpdGggbWFpbiBsb2dpYyBpbiAuQGBtY3BfYWdlbnRcXGFnZW50cy5weWAuXG5cbiMjIENvZGUgUXVhbGl0eVxuLSBVc2UgVHlwZVNjcmlwdCBmb3IgZnJvbnRlbmQgYW5kIHR5cGUgaGludHMgZm9yIGJhY2tlbmQgUHl0aG9uLlxuLSBXcml0ZSBKU0RvYyAoZnJvbnRlbmQpIGFuZCBkb2NzdHJpbmdzIChiYWNrZW5kKSBmb3IgYWxsIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlcy5cbi0gVXNlIGNhbWVsQ2FzZSBmb3IgdmFyaWFibGVzIGFuZCBQYXNjYWxDYXNlIGZvciBjb21wb25lbnRzL2NsYXNzZXMuXG4tIFByZWZlciBhc3luYy9hd2FpdCBmb3IgYWxsIGFzeW5jaHJvbm91cyBsb2dpYy5cbi0gS2VlcCBjb21wb25lbnRzLCBmdW5jdGlvbnMsIGFuZCBtb2R1bGVzIHNtYWxsIGFuZCBmb2N1c2VkLlxuXG4jIyBFeHRlbnNpYmlsaXR5XG4tIFJlZ2lzdGVyIG5ldyBhZ2VudHMgYW5kIHRvb2xzIHZpYSBjb25maWcgZmlsZXMgKFtgc3JjL2xpYi9hdmFpbGFibGUtYWdlbnRzLnRzYF0obWRjOmZyb250ZW5kL3NyYy9saWIvYXZhaWxhYmxlLWFnZW50cy50cykgZm9yIGZyb250ZW5kLCBgTUNQQ29uZmlnYCBmb3IgYmFja2VuZCkuXG4tIEFkZCBuZXcgZmVhdHVyZXMgYXMgbmV3IGNvbXBvbmVudHMsIGhvb2tzLCBvciB3b3JrZmxvdyBub2Rlc+KAlGF2b2lkIG1vZGlmeWluZyBleGlzdGluZyBsb2dpYyB1bmxlc3MgbmVjZXNzYXJ5LlxuLSBVc2UgY29udGV4dCBwcm92aWRlcnMgKGZyb250ZW5kKSBhbmQgc3RhdGUgY2xhc3NlcyAoYmFja2VuZCkgZm9yIGdsb2JhbC9zaGFyZWQgc3RhdGUuXG5cbiMjIFRlc3RpbmcgJiBEZWJ1Z2dpbmdcbi0gVGVzdCBhbGwgbmV3IGZlYXR1cmVzIGluIGJvdGggZGV2ZWxvcG1lbnQgYW5kIHByb2R1Y3Rpb24gYnVpbGRzLlxuLSBVc2UgUmVhY3QgUXVlcnkgRGV2dG9vbHMgYW5kIENvcGlsb3RLaXQgRGV2IENvbnNvbGUgKGZyb250ZW5kKSBhbmQgbG9nIHRvb2wvYWdlbnQgcmVzcG9uc2VzIChiYWNrZW5kKS5cbi0gVmFsaWRhdGUgYWxsIGZvcm1zIGFuZCB1c2VyIGlucHV0LlxuLSBBZGQgdW5pdC9pbnRlZ3JhdGlvbiB0ZXN0cyBmb3IgY3JpdGljYWwgd29ya2Zsb3dzLlxuXG4jIyBEb2N1bWVudGF0aW9uXG4tIFVwZGF0ZSBbYFJFQURNRS5tZGBdKG1kYzpmcm9udGVuZC9SRUFETUUubWQpIGFuZCBbYFJFQURNRS5tZGBdKG1kYzphZ2VudC9SRUFETUUubWQpIHdpdGggYW55IG1ham9yIGNoYW5nZXMgb3IgbmV3IGZlYXR1cmVzLlxuLSBEb2N1bWVudCBuZXcgYWdlbnRzLCB0b29scywgbWVtb3J5IGJhY2tlbmRzLCBvciB3b3JrZmxvdyBub2RlcyBpbmxpbmUgYW5kIGluIHRoZSBSRUFETUUuXG5cbiMjIEJhY2t3YXJkIENvbXBhdGliaWxpdHlcbi0gRGVmYXVsdCB0byBleGlzdGluZyBjb25maWcgYW5kIG1lbW9yeSBpZiBuZXcgZmVhdHVyZXMvc2V0dGluZ3MgYXJlIG5vdCBwcm92aWRlZC5cbi0gTmV2ZXIgcmVtb3ZlIG9yIHJlbmFtZSBleGlzdGluZyBjb25maWcgZmllbGRzIHdpdGhvdXQgYSBtaWdyYXRpb24gcGF0aC5cbi0gVGVzdCBhbGwgY2hhbmdlcyB3aXRoIGV4aXN0aW5nIHdvcmtmbG93cyBiZWZvcmUgbWVyZ2luZy5cbi4uLlxuUGF0aDogUkVBRE1FLm1kXG5cblxuPGRpdiBhbGlnbj1cImNlbnRlclwiPlxuXG4jIE9wZW4gTXVsdGktQWdlbnQgQ2FudmFzXG4gICBcbiFbQ29waWxvdEtpdC1CYW5uZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS91c2VyLWF0dGFjaG1lbnRzL2Fzc2V0cy84MTY3Yzg0NS0wMzgxLTQ1ZDktYWQxYy04M2Y5OTVkNDgyOTApXG48L2Rpdj5cblxuXG4hW211bHRpLWFnZW50LWNhbnZhc10oaHR0cHM6Ly9naXRodWIuY29tL3VzZXItYXR0YWNobWVudHMvYXNzZXRzLzU5NTNhNWE2LTU2ODYtNDcyMi05NDc3LTUyNzliNjdiM2RiYSlcblxuXG5PcGVuIE11bHRpLUFnZW50IENhbnZhcywgY3JlYXRlZCBieSBbQ29waWxvdEtpdF0oaHR0cHM6Ly9naXRodWIuY29tL0NvcGlsb3RLaXQvQ29waWxvdEtpdCkgaXMgYW4gb3Blbi1zb3VyY2UgbXVsdGktYWdlbnQgY2hhdCBpbnRlcmZhY2UgdGhhdCBsZXRzIHlvdSBtYW5hZ2UgbXVsdGlwbGUgYWdlbnRzIGluIG9uZSBkeW5hbWljIGNvbnZlcnNhdGlvbi4gSXQncyBidWlsdCB3aXRoIE5leHQuanMsIExhbmdHcmFwaCwgYW5kIENvcGlsb3RLaXQgdG8gaGVscCB3aXRoIHRyYXZlbCBwbGFubmluZywgcmVzZWFyY2gsIGFuZCBnZW5lcmFsLXB1cnBvc2UgdGFza3MgdGhyb3VnaCBNQ1Agc2VydmVycy5cblxuIyMgRXhpc3RpbmcgQWdlbnRzXG5cbkNoZWNrIG91dCB0aGVzZSBhd2Vzb21lIGFnZW50cyAodGhleSBsaXZlIGluIHNlcGFyYXRlIHJlcG9zaXRvcmllcykuIFlvdSBjYW4gcnVuIHRoZW0gc2VwYXJhdGVseSBvciBkZXBsb3kgdGhlbSBvbiBMYW5nU21pdGg6XG4tIFtDb0FnZW50cyBUcmF2ZWwgQWdlbnRdKGh0dHBzOi8vZ2l0aHViLmNvbS9Db3BpbG90S2l0L0NvcGlsb3RLaXQvdHJlZS9tYWluL2V4YW1wbGVzL2NvYWdlbnRzLXRyYXZlbC9hZ2VudClcbi0gW0NvQWdlbnRzIEFJIFJlc2VhcmNoZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9Db3BpbG90S2l0L0NvcGlsb3RLaXQvdHJlZS9tYWluL2V4YW1wbGVzL2NvYWdlbnRzLWFpLXJlc2VhcmNoZXIvYWdlbnQpXG5cbkFkZGl0aW9uYWxseSwgdGhpcyBwcm9qZWN0IG5vdyBpbmNsdWRlcyBhIGJ1aWx0LWluIE1DUCAoTXVsdGktQ2hhbm5lbCBQcm90b2NvbCkgQWdlbnQ6XG4tICoqTUNQIEFnZW50Kio6IEEgZ2VuZXJhbC1wdXJwb3NlIGFnZW50IGNhcGFibGUgb2YgaGFuZGxpbmcgdmFyaW91cyB0YXNrcyB0aHJvdWdoIGNvbmZpZ3VyYWJsZSBNQ1Agc2VydmVycy5cblxuIyMgQ29waWxvdCBDbG91ZCBpcyByZXF1aXJlZCB0byBydW4gdGhpcyBwcm9qZWN0OiBcblxuXG5cblxuIyMgUXVpY2sgU3RhcnQg8J+agFxuXG4jIyMgMS4gUHJlcmVxdWlzaXRlc1xuTWFrZSBzdXJlIHlvdSBoYXZlOlxuLSBbcG5wbV0oaHR0cHM6Ly9wbnBtLmlvL2luc3RhbGxhdGlvbilcblxuIyMjIDIuIEFQSSBLZXlzXG4tIFtDb3BpbG90IENsb3VkXShodHRwczovL2Nsb3VkLmNvcGlsb3RraXQuYWkpXG5cbiMjIFJ1bm5pbmcgdGhlIEZyb250ZW5kXG5cblJlbmFtZSB0aGUgYGV4YW1wbGUuZW52YCBmaWxlIGluIHRoZSBgZnJvbnRlbmRgIGZvbGRlciB0byBgLmVudmA6XG5cbmBgYHNoXG5ORVhUX1BVQkxJQ19DUEtfUFVCTElDX0FQSV9LRVk9Li4uXG5gYGBcblxuSW5zdGFsbCBkZXBlbmRlbmNpZXM6XG5cbmBgYHNoXG5jZCBmcm9udGVuZFxucG5wbSBpXG5gYGBcblxuXG5cbk5lZWQgYSBDb3BpbG90S2l0IEFQSSBrZXk/IEdldCBvbmUgW2hlcmVdKGh0dHBzOi8vY2xvdWQuY29waWxvdGtpdC5haS8pLlxuXG5UaGVuLCBmaXJlIHVwIHRoZSBOZXh0LmpzIHByb2plY3Q6XG5cbmBgYHNoXG5wbnBtIHJ1biBidWlsZCAmJiBwbnBtIHJ1biBzdGFydFxuYGBgXG5cbiMjIE1DUCBBZ2VudCBTZXR1cFxuXG4hW21jcC1kZW1vXSguL2FnZW50L2RlbW8vbWNwLWRlbW8uZ2lmKVxuXG5UaGUgTUNQIEFnZW50IGFsbG93cyB5b3UgdG8gY29ubmVjdCB0byB2YXJpb3VzIE1DUC1jb21wYXRpYmxlIHNlcnZlcnM6XG5cbjEuICoqQ29uZmlndXJpbmcgQ3VzdG9tIE1DUCBTZXJ2ZXJzKio6XG4gICAtIENsaWNrIHRoZSBcIk1DUCBTZXJ2ZXJzXCIgYnV0dG9uIGluIHRoZSB0b3AgcmlnaHQgb2YgdGhlIGludGVyZmFjZVxuICAgLSBBZGQgc2VydmVycyB2aWEgdGhlIGNvbmZpZ3VyYXRpb24gcGFuZWw6XG4gICAgIC0gKipTdGFuZGFyZCBJTyoqOiBSdW4gY29tbWFuZHMgbG9jYWxseSAoZS5nLiwgUHl0aG9uIHNjcmlwdHMpXG4gICAgIC0gKipTU0UqKjogQ29ubmVjdCB0byBleHRlcm5hbCBNQ1AtY29tcGF0aWJsZSBzZXJ2ZXJzICh2aWEgU2VydmVyLVNlbnQgRXZlbnRzKVxuXG4yLiAqKlB1YmxpYyBNQ1AgU2VydmVycyoqOlxuICAgLSBZb3UgY2FuIGNvbm5lY3QgdG8gcHVibGljIE1DUCBzZXJ2ZXJzIGxpa2UgW21jcC5jb21wb3Npby5kZXZdKGh0dHBzOi8vbWNwLmNvbXBvc2lvLmRldi8pIGFuZCBbbWNwLnJ1bl0oaHR0cHM6Ly93d3cubWNwLnJ1bi8pXG5cbiMjIFJ1bm5pbmcgdGhlIE1DUCBBZ2VudCBCYWNrZW5kIChPcHRpb25hbClcblxuUmVuYW1lIHRoZSBgZXhhbXBsZS5lbnZgIGZpbGUgaW4gdGhlIGBhZ2VudGAgZm9sZGVyIHRvIGAuZW52YDpcblxuYGBgc2hcbk9QRU5BSV9BUElfS0VZPS4uLlxuTEFOR1NNSVRIX0FQSV9LRVk9Li4uXG5gYGBcblxuSWYgeW91IHdhbnQgdG8gdXNlIHRoZSBpbmNsdWRlZCBNQ1AgQWdlbnQgd2l0aCB0aGUgYnVpbHQtaW4gbWF0aCBzZXJ2ZXI6XG5cbmBgYHNoXG5jZCBhZ2VudFxucG9ldHJ5IGluc3RhbGxcbnBvZXRyeSBydW4gbGFuZ2dyYXBoIGRldiAtLWhvc3QgbG9jYWxob3N0IC0tcG9ydCA4MTIzIC0tbm8tYnJvd3NlclxuYGBgXG5cbiMjIFJ1bm5pbmcgYSB0dW5uZWxcblxuQWRkIGFub3RoZXIgdGVybWluYWwgYW5kIHNlbGVjdCBSZW1vdGUgRW5kcG9pbnQuXG5UaGVuIHNlbGVjdCBMb2NhbCBEZXZlbG9wbWVudC5cbk9uY2UgdGhpcyBpcyBkb25lLCBjb3B5IHRoZSBjb21tYW5kIGludG8geW91ciB0ZXJtaW5hbCBhbmQgY2hhbmdlIHRoZSBwb3J0IHRvIG1hdGNoIHRoZSBMYW5nR3JhcGggc2VydmVyIGA4MTIzYFxuIVtpbWFnZV0oaHR0cHM6Ly9naXRodWIuY29tL3VzZXItYXR0YWNobWVudHMvYXNzZXRzLzZiZjQxMDQyLTk1MjktNDQ3MC04YmFmLWRkMDc2YWFkMzFhMSlcblxuXG4jIyBEb2N1bWVudGF0aW9uIFxuLSBbQ29waWxvdEtpdCBEb2NzXShodHRwczovL2RvY3MuY29waWxvdGtpdC5haS9jb2FnZW50cylcbi0gW0xhbmdHcmFwaCBQbGF0Zm9ybSBEb2NzXShodHRwczovL2xhbmdjaGFpbi1haS5naXRodWIuaW8vbGFuZ2dyYXBoL2Nsb3VkL2RlcGxveW1lbnQvY2xvdWQvKVxuLSBbTW9kZWwgQ29udGV4dCBQcm90b2NvbCAoTUNQKSBEb2NzXShodHRwczovL2dpdGh1Yi5jb20vbGFuZ2NoYWluLWFpL2xhbmdncmFwaC90cmVlL21haW4vZXhhbXBsZXMvbWNwKVxuXG4jIyBMaWNlbnNlXG5EaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZvciBtb3JlIGluZm8uXG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9wcm92aWRlcnMvUHJvdmlkZXJzLnRzeFxuXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuaW1wb3J0IHsgUmVhY3RRdWVyeURldnRvb2xzIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeS1kZXZ0b29sc1wiO1xuaW1wb3J0IHsgQ29waWxvdEtpdCB9IGZyb20gXCJAY29waWxvdGtpdC9yZWFjdC1jb3JlXCI7XG5pbXBvcnQgeyBDb0FnZW50c1Byb3ZpZGVyIH0gZnJvbSBcIkAvY29tcG9uZW50cy9jb2FnZW50cy1wcm92aWRlclwiO1xuXG5jb25zdCBxdWVyeUNsaWVudCA9IG5ldyBRdWVyeUNsaWVudCgpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcm92aWRlcnMoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkge1xuICByZXR1cm4gKFxuICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxuICAgICAgPENvcGlsb3RLaXRcbiAgICAgICAgc2hvd0RldkNvbnNvbGU9e2ZhbHNlfVxuICAgICAgICBwdWJsaWNBcGlLZXk9e3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NPUElMT1RfQ0xPVURfQVBJX0tFWX1cbiAgICAgID5cbiAgICAgICAgPENvQWdlbnRzUHJvdmlkZXI+e2NoaWxkcmVufTwvQ29BZ2VudHNQcm92aWRlcj5cbiAgICAgIDwvQ29waWxvdEtpdD5cbiAgICAgIDxSZWFjdFF1ZXJ5RGV2dG9vbHMgaW5pdGlhbElzT3Blbj17ZmFsc2V9IC8+XG4gICAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxuICApO1xufVxuLi4uXG5QYXRoOiAuY3Vyc29yL3J1bGVzL2Zyb250ZW5kLWJlc3QtcHJhY3RpY2VzLm1kY1xuLS0tXG5kZXNjcmlwdGlvbjogZnJvbnRlbmQsIHVpLlxuZ2xvYnM6IFxuYWx3YXlzQXBwbHk6IGZhbHNlXG4tLS1cbiMgRnJvbnRlbmQgQmVzdCBQcmFjdGljZXMgUnVsZVxuXG5UbyBlbnN1cmUgcm9idXN0LCBidWctZnJlZSBkZXZlbG9wbWVudCBpbiB0aGUgZnJvbnRlbmQgKGAvZnJvbnRlbmRgKSwgZm9sbG93IHRoZXNlIGd1aWRlbGluZXM6XG5cbiMjIFByb2plY3QgU3RydWN0dXJlXG4tIE1haW4gYXBwIGVudHJ5IGFuZCByb3V0aW5nIGFyZSBpbiBbYHNyYy9hcHAvYF0obWRjOmZyb250ZW5kL3NyYy9hcHApLlxuLSBSZXVzYWJsZSBVSSBjb21wb25lbnRzIGFyZSBpbiBbYHNyYy9jb21wb25lbnRzL3VpL2BdKG1kYzpmcm9udGVuZC9zcmMvY29tcG9uZW50cy91aSkuXG4tIEFnZW50LXNwZWNpZmljIFVJcyBhcmUgaW4gW2BzcmMvY29tcG9uZW50cy9hZ2VudHMvYF0obWRjOmZyb250ZW5kL3NyYy9jb21wb25lbnRzL2FnZW50cykuXG4tIEdsb2JhbCBzdGF0ZSBwcm92aWRlcnMgYXJlIGluIFtgc3JjL3Byb3ZpZGVycy9gXShtZGM6ZnJvbnRlbmQvc3JjL3Byb3ZpZGVycykuXG4tIEN1c3RvbSBob29rcyBhcmUgaW4gW2BzcmMvaG9va3MvYF0obWRjOmZyb250ZW5kL3NyYy9ob29rcykuXG4tIFV0aWxpdHkgZnVuY3Rpb25zIGFuZCBhZ2VudCBjb25maWcgdHlwZXMgYXJlIGluIFtgc3JjL2xpYi9gXShtZGM6ZnJvbnRlbmQvc3JjL2xpYikuXG4uLi5cblxuIyMgRXh0ZW5zaWJpbGl0eVxuLSBSZWdpc3RlciBuZXcgYWdlbnRzIGluIFtgc3JjL2xpYi9hdmFpbGFibGUtYWdlbnRzLnRzYF0obWRjOmZyb250ZW5kL3NyYy9saWIvYXZhaWxhYmxlLWFnZW50cy50cykuXG4tIEFkZCBuZXcgYWdlbnQgVUlzIGluIFtgc3JjL2NvbXBvbmVudHMvYWdlbnRzL2BdKG1kYzpmcm9udGVuZC9zcmMvY29tcG9uZW50cy9hZ2VudHMpLlxuLSBVc2UgdGhlIGFnZW50L3RlYW0gY3JlYXRpb24gVUkgKHBsYW5uZWQpIGZvciBkeW5hbWljIGFnZW50IG1hbmFnZW1lbnQuXG5cbiMjIFRlc3RpbmcgJiBEZWJ1Z2dpbmdcbi0gVGVzdCBhbGwgbmV3IGZlYXR1cmVzIGluIGJvdGggZGV2ZWxvcG1lbnQgYW5kIHByb2R1Y3Rpb24gYnVpbGRzLlxuLSBVc2UgUmVhY3QgUXVlcnkgRGV2dG9vbHMgYW5kIENvcGlsb3RLaXQgRGV2IENvbnNvbGUgZm9yIGRlYnVnZ2luZy5cbi0gVmFsaWRhdGUgYWxsIGZvcm1zIGFuZCB1c2VyIGlucHV0LlxuXG4jIyBEb2N1bWVudGF0aW9uXG4tIFVwZGF0ZSBbYFJFQURNRS5tZGBdKG1kYzpmcm9udGVuZC9SRUFETUUubWQpIHdpdGggYW55IG1ham9yIGNoYW5nZXMgb3IgbmV3IGZlYXR1cmVzLlxuXG4jIyBTdW1tYXJ5XG5Gb2xsb3dpbmcgdGhlc2UgcnVsZXMgd2lsbCBoZWxwIG1haW50YWluIGEgY2xlYW4sIHNjYWxhYmxlLCBhbmQgYnVnLXJlc2lzdGFudCBmcm9udGVuZCBjb2RlYmFzZS5cblxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvYXBwL2xheW91dC50c3hcbmltcG9ydCB0eXBlIHsgTWV0YWRhdGEgfSBmcm9tIFwibmV4dFwiO1xuaW1wb3J0IHsgSW50ZXIsIEpldEJyYWluc19Nb25vIH0gZnJvbSBcIm5leHQvZm9udC9nb29nbGVcIjtcbmltcG9ydCBcIi4vZ2xvYmFscy5jc3NcIjtcbmltcG9ydCBQcm92aWRlcnMgZnJvbSBcIkAvcHJvdmlkZXJzL1Byb3ZpZGVyc1wiO1xuXG5jb25zdCBpbnRlciA9IEludGVyKHtcbiAgdmFyaWFibGU6IFwiLS1mb250LWludGVyXCIsXG4gIHN1YnNldHM6IFtcImxhdGluXCJdLFxufSk7XG5cbmNvbnN0IGpldGJyYWluc01vbm8gPSBKZXRCcmFpbnNfTW9ubyh7XG4gIHZhcmlhYmxlOiBcIi0tZm9udC1qZXRicmFpbnNcIixcbiAgc3Vic2V0czogW1wibGF0aW5cIl0sXG59KTtcblxuZXhwb3J0IGNvbnN0IG1ldGFkYXRhOiBNZXRhZGF0YSA9IHtcbiAgdGl0bGU6IFwiT3BlbiBNdWx0aS1BZ2VudCBDYW52YXNcIixcbiAgZGVzY3JpcHRpb246IFwiT3BlbiBNdWx0aS1BZ2VudCBDYW52YXMgYnkgQ29waWxvdEtpdFwiLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUm9vdExheW91dCh7XG4gIGNoaWxkcmVuLFxufTogUmVhZG9ubHk8e1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xufT4pIHtcbiAgcmV0dXJuIChcbiAgICA8aHRtbCBsYW5nPVwiZW5cIj5cbiAgICAgIDxib2R5XG4gICAgICAgIGNsYXNzTmFtZT17YCR7aW50ZXIudmFyaWFibGV9ICR7amV0YnJhaW5zTW9uby52YXJpYWJsZX0gYW50aWFsaWFzZWRgfVxuICAgICAgPlxuICAgICAgICA8UHJvdmlkZXJzPntjaGlsZHJlbn08L1Byb3ZpZGVycz5cbiAgICAgIDwvYm9keT5cbiAgICA8L2h0bWw+XG4gICk7XG59XG4uLi5cblBhdGg6IC5jdXJzb3IvcnVsZXMvYWdlbnQtYmVzdC1wcmFjdGljZXMubWRjXG4tLS1cbmRlc2NyaXB0aW9uOiBCYWNrZW5kXG5nbG9iczogXG5hbHdheXNBcHBseTogZmFsc2Vcbi0tLVxuIyBBZ2VudCBCYWNrZW5kIEJlc3QgUHJhY3RpY2VzIFJ1bGVcblxuVG8gZW5zdXJlIGVhc3ksIG5vbi1icmVha2luZyBkZXZlbG9wbWVudCBpbiB0aGUgYWdlbnQgYmFja2VuZCAoYC9hZ2VudGApLCBmb2xsb3cgdGhlc2UgZ3VpZGVsaW5lczpcblxuIyMgUHJvamVjdCBTdHJ1Y3R1cmVcbi0gVGhlIG1haW4gYWdlbnQgbG9naWMgaXMgaW4gLkBgbWNwX2FnZW50XFxhZ2VudHMucHlgICAgICAgICBcbi0gQWRkIG5ldyBhZ2VudCBsb2dpYyBvciB3b3JrZmxvd3MgYXMgbmV3IG5vZGVzIGluIHRoZSB3b3JrZmxvdyBncmFwaC5cbi0gUGxhY2Ugc3VwcG9ydGluZyBzY3JpcHRzIChlLmcuLCBtYXRoIHNlcnZlcikgaW4gdGhlIGFnZW50IGRpcmVjdG9yeSAoZS5nLiwgW2BtYXRoX3NlcnZlci5weWBdKG1kYzphZ2VudC9tYXRoX3NlcnZlci5weSkpLlxuLi4uXG5cbiMjIEJhY2t3YXJkIENvbXBhdGliaWxpdHlcbi0gRGVmYXVsdCB0byBleGlzdGluZyBjb25maWcgYW5kIG1lbW9yeSBpZiBuZXcgZmVhdHVyZXMvc2V0dGluZ3MgYXJlIG5vdCBwcm92aWRlZC5cbi0gTmV2ZXIgcmVtb3ZlIG9yIHJlbmFtZSBleGlzdGluZyBjb25maWcgZmllbGRzIHdpdGhvdXQgYSBtaWdyYXRpb24gcGF0aC5cbi0gVGVzdCBhbGwgY2hhbmdlcyB3aXRoIGV4aXN0aW5nIGFnZW50IHdvcmtmbG93cyBiZWZvcmUgbWVyZ2luZy5cblxuIyMgRG9jdW1lbnRhdGlvblxuLSBVcGRhdGUgW2BSRUFETUUubWRgXShtZGM6YWdlbnQvUkVBRE1FLm1kKSB3aXRoIGFueSBtYWpvciBjaGFuZ2VzIG9yIG5ldyBmZWF0dXJlcy5cbi0gRG9jdW1lbnQgbmV3IHRvb2xzLCBtZW1vcnkgYmFja2VuZHMsIG9yIHdvcmtmbG93IG5vZGVzIGlubGluZSBhbmQgaW4gdGhlIFJFQURNRS5cblxuIyMgU3VtbWFyeVxuRm9sbG93aW5nIHRoZXNlIHJ1bGVzIHdpbGwgaGVscCBtYWludGFpbiBhIHJvYnVzdCwgZXh0ZW5zaWJsZSwgYW5kIGJhY2t3YXJkLWNvbXBhdGlibGUgYWdlbnQgYmFja2VuZC5cblxuLi4uXG5QYXRoOiBmcm9udGVuZC9SRUFETUUubWRcbiMgT3BlbiBNdWx0aS1BZ2VudCBDYW52YXNcblxuT3BlbiBNdWx0aS1BZ2VudCBDYW52YXMgaXMgYW4gb3Blbi1zb3VyY2UgbXVsdGktYWdlbnQgY2hhdCBpbnRlcmZhY2UgdGhhdCBsZXZlcmFnZXMgc3BlY2lhbGl6ZWQgYWdlbnRzIHRvIGFzc2lzdCB3aXRoIHRyYXZlbCBwbGFubmluZywgcmVzZWFyY2gsIGVtYWlsIGRyYWZ0aW5nLCBhbmQgbW9yZS4gQnVpbHQgd2l0aCBOZXh0LmpzLCBSZWFjdCwgYW5kIENvcGlsb3RLaXQsIHRoaXMgcHJvamVjdCBvZmZlcnMgYW4gaW50ZXJhY3RpdmUsIHVuaWZpZWQgZXhwZXJpZW5jZSBieSBtYW5hZ2luZyBtdWx0aXBsZSBhZ2VudHMgd2l0aGluIG9uZSBkeW5hbWljIGNvbnZlcnNhdGlvbi5cblxuIyMgS2V5IEZlYXR1cmVzXG5cbi0gKipNdWx0aS1BZ2VudCBDaGF0IEludGVyZmFjZToqKiAgXG4gIENoYXQgd2l0aCBhIHJhbmdlIG9mIHNwZWNpYWxpemVkIGFnZW50czpcbiAgLSAqKlRyYXZlbCBBZ2VudDoqKiBQbGFuIHRyaXBzLCBjcmVhdGUgaXRpbmVyYXJpZXMsIGFuZCB2aWV3IHRyYXZlbCByZWNvbW1lbmRhdGlvbnMgb24gYW4gaW50ZXJhY3RpdmUgbWFwIHBvd2VyZWQgYnkgTGVhZmxldC5cbiAgLSAqKlJlc2VhcmNoIEFnZW50OioqIENvbmR1Y3QgcmVzZWFyY2ggd2l0aCByZWFsLXRpbWUgbG9ncyBhbmQgcHJvZ3Jlc3MgdXBkYXRlcy5cbiAgXG4tICoqUmVhbC1UaW1lIEludGVyYWN0aXZpdHk6KiogIFxuICBFbmpveSBhIGxpdmUgY2hhdCBwb3dlcmVkIGJ5IGBAY29waWxvdGtpdC9yZWFjdC11aWAgdGhhdCBvcmNoZXN0cmF0ZXMgZHluYW1pYyBzdGF0ZSBjaGFuZ2VzIGFuZCBhZ2VudCByZXNwb25zZXMuXG5cbi0gKipTdGF0ZSBNYW5hZ2VtZW50ICYgQWdlbnQgQ29vcmRpbmF0aW9uOioqICBcbiAgTGV2ZXJhZ2VzIGBAY29waWxvdGtpdC9yZWFjdC1jb3JlYCBmb3Igcm9idXN0IGFnZW50IHN0YXRlIG1hbmFnZW1lbnQgYW5kIHNtb290aCBpbnRlZ3JhdGlvbiBvZiB0cmF2ZWwgYW5kIHJlc2VhcmNoIGZ1bmN0aW9uYWxpdGllcy5cblxuLSAqKlJlc3BvbnNpdmUgJiBNb2Rlcm4gVUk6KiogIFxuICBEZXNpZ25lZCB3aXRoIFRhaWx3aW5kIENTUyB0byBlbnN1cmUgeW91ciBleHBlcmllbmNlIGlzIHNtb290aCBhbmQgYWRhcHRpdmUgYWNyb3NzIGFsbCBkZXZpY2VzLlxuXG4jIyBUZWNobm9sb2d5IFN0YWNrXG5cbi0gKipGcmFtZXdvcms6KiogW05leHQuanNdKGh0dHBzOi8vbmV4dGpzLm9yZylcbi0gKipVSSBMaWJyYXJ5OioqIFJlYWN0LCBbQ29waWxvdEtpdCBVSV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGNvcGlsb3RraXQvcmVhY3QtdWkpXG4tICoqU3RhdGUgTWFuYWdlbWVudDoqKiBbQ29waWxvdEtpdCBSZWFjdCBDb3JlXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AY29waWxvdGtpdC9yZWFjdC1jb3JlKVxuLSAqKk1hcHBpbmc6KiogW0xlYWZsZXRdKGh0dHBzOi8vbGVhZmxldGpzLmNvbSkgd2l0aCBbUmVhY3QgTGVhZmxldF0oaHR0cHM6Ly9yZWFjdC1sZWFmbGV0LmpzLm9yZylcbi0gKipTdHlsaW5nOioqIFRhaWx3aW5kIENTU1xuXG4jIyBTZXR1cCBJbnN0cnVjdGlvbnNcblxuMS4gKipQcmVyZXF1aXNpdGVzOioqICBcbiAgIC0gW05vZGUuanNdKGh0dHBzOi8vbm9kZWpzLm9yZykgKExUUyB2ZXJzaW9uIHJlY29tbWVuZGVkKVxuICAgLSBucG0gb3IgeWFyblxuXG4yLiAqKkluc3RhbGxhdGlvbjoqKiAgXG4gICBgYGBiYXNoXG4gICAjIENsb25lIHRoZSByZXBvc2l0b3J5XG4gICBnaXQgY2xvbmUgPHJlcG9zaXRvcnktdXJsPlxuICAgXG4gICAjIE5hdmlnYXRlIHRvIHRoZSBmcm9udGVuZCBkaXJlY3RvcnlcbiAgIGNkIGZyb250ZW5kXG5cbiAgICMgSW5zdGFsbCBkZXBlbmRlbmNpZXNcbiAgIG5wbSBpbnN0YWxsXG4gICAjIG9yXG4gICB5YXJuIGluc3RhbGxcbiAgIGBgYFxuXG4zLiAqKlJ1bm5pbmcgdGhlIERldmVsb3BtZW50IFNlcnZlcjoqKiAgXG4gICBgYGBiYXNoXG4gICBucG0gcnVuIGRldlxuICAgIyBvclxuICAgeWFybiBkZXZcbiAgIGBgYFxuICAgVGhlbiwgb3BlbiBbaHR0cDovL2xvY2FsaG9zdDozMDAwXShodHRwOi8vbG9jYWxob3N0OjMwMDApIGluIHlvdXIgYnJvd3Nlci5cblxuIyMgUHJvamVjdCBTdHJ1Y3R1cmVcblxuLSAqKi9zcmMvYXBwOioqICBcbiAgQ29udGFpbnMgTmV4dC5qcyBwYWdlIGNvbXBvbmVudHMsIGxheW91dHMsIGFuZCBnbG9iYWwgc3R5bGVzLlxuXG4tICoqL3NyYy9jb21wb25lbnRzOioqICBcbiAgSG91c2VzIHJldXNhYmxlIGNvbXBvbmVudHMgaW5jbHVkaW5nIGFnZW50IGludGVyZmFjZXMgKFRyYXZlbCwgUmVzZWFyY2gsIENoYXQsIE1hcCwgU2lkZWJhcikgYW5kIFVJIGVsZW1lbnRzLlxuXG4tICoqL3Byb3ZpZGVyczoqKiAgXG4gIFdyYXBzIHRoZSBnbG9iYWwgc3RhdGUgcHJvdmlkZXJzIHJlc3BvbnNpYmxlIGZvciBtYW5hZ2luZyBhZ2VudCBzdGF0ZXMuXG5cbi0gKiovbGliOioqICBcbiAgQ29udGFpbnMgdXRpbGl0eSBmdW5jdGlvbnMgYW5kIGNvbmZpZ3VyYXRpb24gZmlsZXMgKGxpa2UgYXZhaWxhYmxlIGFnZW50cyBjb25maWd1cmF0aW9uKS5cblxuIyMgVmFsdWUgUHJvcG9zaXRpb25cblxuT3BlbiBNdWx0aS1BZ2VudCBDYW52YXMgc2ltcGxpZmllcyBjb21wbGV4IHRhc2tzIGJ5IHVuaWZ5aW5nIG11bHRpcGxlIHNwZWNpYWxpemVkIGFnZW50cyBpbiBhIHNpbmdsZSwgaW50ZXJhY3RpdmUgY2hhdCBpbnRlcmZhY2UuIFdoZXRoZXIgeW91J3JlIHBsYW5uaW5nIGEgdHJpcCB3aXRoIGFuIGludGVyYWN0aXZlIG1hcCwgY29uZHVjdGluZyBpbi1kZXB0aCByZXNlYXJjaCB3aXRoIHJlYWwtdGltZSBsb2dzLCB0aGlzIGFwcGxpY2F0aW9uIHN0cmVhbWxpbmVzIHlvdXIgd29ya2Zsb3cgYW5kIHByb3ZpZGVzIGZvY3VzZWQgYXNzaXN0YW5jZSB0YWlsb3JlZCB0byBlYWNoIHRhc2vigJRhbGwgd2l0aGluIG9uZSBwbGF0Zm9ybS5cblxuIyMgRGVwbG95bWVudFxuXG5UaGUgZWFzaWVzdCB3YXkgdG8gZGVwbG95IHRoaXMgcHJvamVjdCBpcyB3aXRoIFtWZXJjZWxdKGh0dHBzOi8vdmVyY2VsLmNvbSkuIEJ1aWxkIGFuZCBzdGFydCB5b3VyIGFwcGxpY2F0aW9uIHdpdGg6XG5gYGBiYXNoXG5ucG0gcnVuIGJ1aWxkXG5ucG0gcnVuIHN0YXJ0XG5gYGBcbkZvbGxvdyBWZXJjZWwncyBkZXBsb3ltZW50IGd1aWRlIGZvciBtb3JlIGRldGFpbHMgaWYgbmVlZGVkLlxuXG4jIyBDb250cmlidXRpbmdcblxuQ29udHJpYnV0aW9ucyBhcmUgd2VsY29tZSEgRm9yayB0aGUgcmVwb3NpdG9yeSBhbmQgc3VibWl0IGEgcHVsbCByZXF1ZXN0IHdpdGggYW55IGltcHJvdmVtZW50cywgYnVnIGZpeGVzLCBvciBuZXcgZmVhdHVyZXMuXG4uLi5cblBhdGg6IGFnZW50L3B5cHJvamVjdC50b21sXG5bdG9vbC5wb2V0cnldXG5uYW1lID0gXCJtY3AtYWdlbnRcIlxudmVyc2lvbiA9IFwiMC4xLjBcIlxuZGVzY3JpcHRpb24gPSBcIlN0YXJ0ZXJcIlxuYXV0aG9ycyA9IFtcIk1hcmt1cyBFY2tlciA8bWFya3VzLmVja2VyQGdtYWlsLmNvbT5cIl1cbmxpY2Vuc2UgPSBcIk1JVFwiXG5wYWNrYWdlcyA9IFt7aW5jbHVkZSA9IFwibWNwLWFnZW50XCJ9XVxuXG5bcHJvamVjdF1cbm5hbWUgPSBcIm1jcC1hZ2VudFwiXG52ZXJzaW9uID0gXCIwLjAuMVwiXG5kZXBlbmRlbmNpZXMgPSBbXG4gICAgXCJsYW5nY2hhaW4tb3BlbmFpPj0wLjIuMVwiLFxuICAgIFwibGFuZ2NoYWluLWFudGhyb3BpYz49MC4yLjFcIixcbiAgICBcImxhbmdjaGFpbj49MC4zLjFcIixcbiAgICBcIm9wZW5haT49MS41MS4wXCIsXG4gICAgXCJsYW5nY2hhaW4tY29tbXVuaXR5Pj0wLjMuMVwiLFxuICAgIFwiY29waWxvdGtpdD09MC4xLjM5XCIsXG4gICAgXCJ1dmljb3JuPj0wLjMxLjBcIixcbiAgICBcInB5dGhvbi1kb3RlbnY+PTEuMC4xXCIsXG4gICAgXCJsYW5nY2hhaW4tY29yZT49MC4zLjI1XCIsXG4gICAgXCJsYW5nZ3JhcGgtY2xpW2lubWVtXT49MC4xLjY0XCIsXG4gICAgXCJsYW5nY2hhaW4tbWNwLWFkYXB0ZXJzPj0wLjAuM1wiLFxuICAgIFwiZmFzdG1jcD49MC40LjFcIixcbiAgICBcImxhbmdncmFwaCAoPj0wLjMuMzEsPDAuNC4wKVwiLFxuICAgIFwibGFuZ2dyYXBoLWNoZWNrcG9pbnQgKD49Mi4wLjI0LDwzLjAuMClcIlxuXVxuXG5bYnVpbGQtc3lzdGVtXVxucmVxdWlyZXMgPSBbXCJzZXR1cHRvb2xzID49IDYxLjBcIl1cbmJ1aWxkLWJhY2tlbmQgPSBcInNldHVwdG9vbHMuYnVpbGRfbWV0YVwiXG5cblt0b29sLnBvZXRyeS5kZXBlbmRlbmNpZXNdXG5weXRob24gPSBcIj49My4xMCw8My4xM1wiXG5sYW5nY2hhaW4tb3BlbmFpID0gXCJeMC4yLjFcIlxubGFuZ2NoYWluLWFudGhyb3BpYyA9IFwiXjAuMi4xXCJcbmxhbmdjaGFpbiA9IFwiXjAuMy4xXCJcbm9wZW5haSA9IFwiXjEuNTEuMFwiXG5sYW5nY2hhaW4tY29tbXVuaXR5ID0gXCJeMC4zLjFcIlxuY29waWxvdGtpdCA9IFwiMC4xLjM5XCJcbnV2aWNvcm4gPSBcIl4wLjMxLjBcIlxucHl0aG9uLWRvdGVudiA9IFwiXjEuMC4xXCJcbmxhbmdjaGFpbi1jb3JlID0gXCJeMC4zLjI1XCJcbmxhbmdncmFwaC1jbGkgPSB7ZXh0cmFzID0gW1wiaW5tZW1cIl0sIHZlcnNpb24gPSBcIl4wLjEuNjRcIn1cbmxhbmdjaGFpbi1tY3AtYWRhcHRlcnMgPSBcIl4wLjAuM1wiXG5mYXN0bWNwID0gXCJeMC40LjFcIlxubGFuZ2dyYXBoID0gXCJeMC4zLjVcIlxubGl0ZWxsbSA9IFwiXjEuNDMuMTJcIlxubWVtMGFpID0gXCJeMC4xLjE3XCJcbnB5ZGFudGljID0gXCJeMi44LjJcIlxuXG5bdG9vbC5wb2V0cnkuc2NyaXB0c11cbmRlbW8gPSBcIm1jcC1hZ2VudC5kZW1vOm1haW5cIlxuLi4uXG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvYWdlbnQucHlcblwiXCJcIlxuVGhpcyBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCBmb3IgdGhlIGFnZW50LlxuSXQgZGVmaW5lcyB0aGUgd29ya2Zsb3cgZ3JhcGgsIHN0YXRlLCB0b29scywgbm9kZXMgYW5kIGVkZ2VzLlxuXCJcIlwiXG5cbmZyb20gdHlwaW5nX2V4dGVuc2lvbnMgaW1wb3J0IExpdGVyYWwsIFR5cGVkRGljdCwgRGljdCwgTGlzdCwgVW5pb24sIE9wdGlvbmFsXG5mcm9tIGxhbmdjaGFpbl9vcGVuYWkgaW1wb3J0IENoYXRPcGVuQUlcbmZyb20gbGFuZ2NoYWluX2NvcmUucnVubmFibGVzIGltcG9ydCBSdW5uYWJsZUNvbmZpZ1xuZnJvbSBsYW5nZ3JhcGguZ3JhcGggaW1wb3J0IFN0YXRlR3JhcGgsIEVORFxuZnJvbSBsYW5nZ3JhcGguY2hlY2twb2ludC5tZW1vcnkgaW1wb3J0IE1lbW9yeVNhdmVyXG5mcm9tIGxhbmdncmFwaC50eXBlcyBpbXBvcnQgQ29tbWFuZFxuZnJvbSBjb3BpbG90a2l0IGltcG9ydCBDb3BpbG90S2l0U3RhdGVcbmZyb20gbGFuZ2NoYWluX21jcF9hZGFwdGVycy5jbGllbnQgaW1wb3J0IE11bHRpU2VydmVyTUNQQ2xpZW50XG5mcm9tIGxhbmdncmFwaC5wcmVidWlsdCBpbXBvcnQgY3JlYXRlX3JlYWN0X2FnZW50XG5mcm9tIGxhbmdjaGFpbl9jb3JlLnByb21wdHMgaW1wb3J0IENoYXRQcm9tcHRUZW1wbGF0ZSwgTWVzc2FnZXNQbGFjZWhvbGRlclxuaW1wb3J0IG9zXG4uLi5cblxuIyBEZWZhdWx0IE1DUCBjb25maWd1cmF0aW9uIHRvIHVzZSB3aGVuIG5vIGNvbmZpZ3VyYXRpb24gaXMgcHJvdmlkZWQgaW4gdGhlIHN0YXRlXG4jIFVzZXMgcmVsYXRpdmUgcGF0aHMgdGhhdCB3aWxsIHdvcmsgd2l0aGluIHRoZSBwcm9qZWN0IHN0cnVjdHVyZVxuREVGQVVMVF9NQ1BfQ09ORklHOiBNQ1BDb25maWcgPSB7XG4gICAgXCJtYXRoXCI6IHtcbiAgICAgICAgXCJjb21tYW5kXCI6IFwicHl0aG9uXCIsXG4gICAgICAgICMgVXNlIGEgcmVsYXRpdmUgcGF0aCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYmFzZWQgb24gdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnlcbiAgICAgICAgXCJhcmdzXCI6IFtvcy5wYXRoLmpvaW4ob3MucGF0aC5kaXJuYW1lKF9fZmlsZV9fKSwgXCIuLlwiLCBcIm1hdGhfc2VydmVyLnB5XCIpXSxcbiAgICAgICAgXCJ0cmFuc3BvcnRcIjogXCJzdGRpb1wiLFxuICAgIH0sXG59XG4uLi5cblBhdGg6IHJlbm92YXRlLmpzb25cbntcbiAgXCIkc2NoZW1hXCI6IFwiaHR0cHM6Ly9kb2NzLnJlbm92YXRlYm90LmNvbS9yZW5vdmF0ZS1zY2hlbWEuanNvblwiLFxuICBcImRlcGVuZGVuY3lEYXNoYm9hcmRcIjogdHJ1ZSxcbiAgXCJleHRlbmRzXCI6IFtcbiAgICBcImNvbmZpZzpyZWNvbW1lbmRlZFwiXG4gIF0sXG4gIFwicG9ldHJ5XCI6IHtcbiAgICBcImVuYWJsZWRcIjogdHJ1ZVxuICB9LFxuICBcInBlcDYyMVwiOiB7XG4gICAgXCJlbmFibGVkXCI6IGZhbHNlXG4gIH0sXG4gIFwibnBtXCI6IHtcbiAgICBcImVuYWJsZWRcIjogdHJ1ZVxuICB9LFxuICBcImlnbm9yZVBhdGhzXCI6IFtcbiAgICBcIm5vZGVfbW9kdWxlc1wiXG4gIF0sXG4gIFwicGFja2FnZVJ1bGVzXCI6IFtcbiAgICB7XG4gICAgICBcImVuYWJsZWRcIjogZmFsc2UsXG4gICAgICBcIm1hdGNoUGFja2FnZU5hbWVzXCI6IFtcbiAgICAgICAgXCIqXCJcbiAgICAgIF0sXG4gICAgICBcImxhYmVsc1wiOiBbXG4gICAgICAgIFwiZGVwZW5kZW5jaWVzXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZW5hYmxlZFwiOiB0cnVlLFxuICAgICAgXCJtYXRjaFBhY2thZ2VOYW1lc1wiOiBbXG4gICAgICAgIFwiL15AY29waWxvdGtpdC9cIixcbiAgICAgICAgXCIvXmNvcGlsb3RraXQvXCJcbiAgICAgIF0sXG4gICAgICBcImxhYmVsc1wiOiBbXG4gICAgICAgIFwiY29waWxvdGtpdFwiXG4gICAgICBdLFxuICAgICAgXCJncm91cE5hbWVcIjogXCJDb3BpbG90S2l0IGRlcGVuZGVuY2llc1wiXG4gICAgfVxuICBdXG59XG4uLi5cblBhdGg6IGZyb250ZW5kL25leHQuY29uZmlnLnRzXG5pbXBvcnQgdHlwZSB7IE5leHRDb25maWcgfSBmcm9tIFwibmV4dFwiO1xuXG5jb25zdCBuZXh0Q29uZmlnOiBOZXh0Q29uZmlnID0ge1xuICAvKiBjb25maWcgb3B0aW9ucyBoZXJlICovXG59O1xuXG5leHBvcnQgZGVmYXVsdCBuZXh0Q29uZmlnO1xuLi4uXG5QYXRoOiBmcm9udGVuZC90YWlsd2luZC5jb25maWcudHNcbmltcG9ydCB0eXBlIHsgQ29uZmlnIH0gZnJvbSBcInRhaWx3aW5kY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBkYXJrTW9kZTogW1wiY2xhc3NcIl0sXG4gICAgY29udGVudDogW1xuICAgIFwiLi9zcmMvcGFnZXMvKiovKi57anMsdHMsanN4LHRzeCxtZHh9XCIsXG4gICAgXCIuL3NyYy9jb21wb25lbnRzLyoqLyoue2pzLHRzLGpzeCx0c3gsbWR4fVwiLFxuICAgIFwiLi9zcmMvYXBwLyoqLyoue2pzLHRzLGpzeCx0c3gsbWR4fVwiLFxuICBdLFxuLi4uXG5QYXRoOiAuZ2l0aWdub3JlXG4jIFNlZSBodHRwczovL2hlbHAuZ2l0aHViLmNvbS9hcnRpY2xlcy9pZ25vcmluZy1maWxlcy8gZm9yIG1vcmUgYWJvdXQgaWdub3JpbmcgZmlsZXMuXG5cbiMgZGVwZW5kZW5jaWVzXG5ub2RlX21vZHVsZXNcbi5wbnBtLXN0b3JlL1xuXG4jIHRlc3Rpbmdcbi9jb3ZlcmFnZVxuXG4jIG5leHQuanNcbi8ubmV4dC9cbi9vdXQvXG5cbiMgcHJvZHVjdGlvblxuL2J1aWxkXG5kaXN0XG5cbiMgbWlzY1xuLkRTX1N0b3JlXG4qLnBlbVxuXG4jIGRlYnVnXG5ucG0tZGVidWcubG9nKlxucG5wbS1kZWJ1Zy5sb2cqXG5cbiMgdHlwZXNjcmlwdFxuKi50c2J1aWxkaW5mb1xubmV4dC1lbnYuZC50c1xuaW5kZXguY2pzXG5pbmRleC5qc1xuaW5kZXguZC50c1xuXG4jIGJ1aWxkIGFydGlmYWN0c1xuLnR1cmJvXG4qKi8udHVyYm9cbioqLy5lc2xpbnRjYWNoZVxuXG4jIGVudiBhbmQgdGVtcCBmaWxlc1xuLmVudipcbi5pcHluYl9jaGVja3BvaW50c1xuXG5mcm9udGVuZC9ub2RlX21vZHVsZXNcbmZyb250ZW5kLy5uZXh0XG4uLi5cblBhdGg6IGZyb250ZW5kL2NvbXBvbmVudHMuanNvblxue1xuICBcIiRzY2hlbWFcIjogXCJodHRwczovL3VpLnNoYWRjbi5jb20vc2NoZW1hLmpzb25cIixcbiAgXCJzdHlsZVwiOiBcIm5ldy15b3JrXCIsXG4gIFwicnNjXCI6IHRydWUsXG4gIFwidHN4XCI6IHRydWUsXG4gIFwidGFpbHdpbmRcIjoge1xuICAgIFwiY29uZmlnXCI6IFwidGFpbHdpbmQuY29uZmlnLnRzXCIsXG4gICAgXCJjc3NcIjogXCJzcmMvYXBwL2dsb2JhbHMuY3NzXCIsXG4gICAgXCJiYXNlQ29sb3JcIjogXCJzdG9uZVwiLFxuICAgIFwiY3NzVmFyaWFibGVzXCI6IHRydWUsXG4gICAgXCJwcmVmaXhcIjogXCJcIlxuICB9LFxuICBcImFsaWFzZXNcIjoge1xuICAgIFwiY29tcG9uZW50c1wiOiBcIkAvY29tcG9uZW50c1wiLFxuICAgIFwidXRpbHNcIjogXCJAL2xpYi91dGlsc1wiLFxuICAgIFwidWlcIjogXCJAL2NvbXBvbmVudHMvdWlcIixcbiAgICBcImxpYlwiOiBcIkAvbGliXCIsXG4gICAgXCJob29rc1wiOiBcIkAvaG9va3NcIlxuICB9LFxuICBcImljb25MaWJyYXJ5XCI6IFwibHVjaWRlXCJcbn0uLi5cblBhdGg6IGZyb250ZW5kL3RzY29uZmlnLmpzb25cbntcbiAgXCJjb21waWxlck9wdGlvbnNcIjoge1xuICAgIFwidGFyZ2V0XCI6IFwiRVMyMDE3XCIsXG4gICAgXCJsaWJcIjogW1wiZG9tXCIsIFwiZG9tLml0ZXJhYmxlXCIsIFwiZXNuZXh0XCJdLFxuICAgIFwiYWxsb3dKc1wiOiB0cnVlLFxuICAgIFwic2tpcExpYkNoZWNrXCI6IHRydWUsXG4gICAgXCJzdHJpY3RcIjogdHJ1ZSxcbiAgICBcIm5vRW1pdFwiOiB0cnVlLFxuICAgIFwiZXNNb2R1bGVJbnRlcm9wXCI6IHRydWUsXG4gICAgXCJtb2R1bGVcIjogXCJlc25leHRcIixcbiAgICBcIm1vZHVsZVJlc29sdXRpb25cIjogXCJidW5kbGVyXCIsXG4gICAgXCJyZXNvbHZlSnNvbk1vZHVsZVwiOiB0cnVlLFxuICAgIFwiaXNvbGF0ZWRNb2R1bGVzXCI6IHRydWUsXG4gICAgXCJqc3hcIjogXCJwcmVzZXJ2ZVwiLFxuICAgIFwiaW5jcmVtZW50YWxcIjogdHJ1ZSxcbiAgICBcInBsdWdpbnNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJuZXh0XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwicGF0aHNcIjoge1xuICAgICAgXCJALypcIjogW1wiLi9zcmMvKlwiXVxuICAgIH1cbiAgfSxcbiAgXCJpbmNsdWRlXCI6IFtcIm5leHQtZW52LmQudHNcIiwgXCIqKi8qLnRzXCIsIFwiKiovKi50c3hcIiwgXCIubmV4dC90eXBlcy8qKi8qLnRzXCJdLFxuICBcImV4Y2x1ZGVcIjogW1wibm9kZV9tb2R1bGVzXCJdXG59XG4uLi5cblBhdGg6IGZyb250ZW5kL3Bvc3Rjc3MuY29uZmlnLm1qc1xuLyoqIEB0eXBlIHtpbXBvcnQoJ3Bvc3Rjc3MtbG9hZC1jb25maWcnKS5Db25maWd9ICovXG5jb25zdCBjb25maWcgPSB7XG4gIHBsdWdpbnM6IHtcbiAgICB0YWlsd2luZGNzczoge30sXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWc7XG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9saWIvbWNwLWNvbmZpZy10eXBlcy50c1xuZXhwb3J0IHR5cGUgQ29ubmVjdGlvblR5cGUgPSBcInN0ZGlvXCIgfCBcInNzZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0ZGlvQ29uZmlnIHtcbiAgY29tbWFuZDogc3RyaW5nO1xuICBhcmdzOiBzdHJpbmdbXTtcbiAgdHJhbnNwb3J0OiBcInN0ZGlvXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU1NFQ29uZmlnIHtcbiAgdXJsOiBzdHJpbmc7XG4gIHRyYW5zcG9ydDogXCJzc2VcIjtcbn1cblxuZXhwb3J0IHR5cGUgU2VydmVyQ29uZmlnID0gU3RkaW9Db25maWcgfCBTU0VDb25maWc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTUNQQ29uZmlnIHtcbiAgbWNwX2NvbmZpZzogUmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPjtcbn1cblxuLy8gTG9jYWwgc3RvcmFnZSBrZXkgZm9yIHNhdmluZyBNQ1AgY29uZmlndXJhdGlvbnNcbmV4cG9ydCBjb25zdCBNQ1BfU1RPUkFHRV9LRVkgPSBcIm1jcC1zZXJ2ZXItY29uZmlnc1wiO1xuLi4uXG5QYXRoOiBhZ2VudC9tYXRoX3NlcnZlci5weVxuIyBtYXRoX3NlcnZlci5weVxuZnJvbSBtY3Auc2VydmVyLmZhc3RtY3AgaW1wb3J0IEZhc3RNQ1BcblxubWNwID0gRmFzdE1DUChcIk1hdGhcIilcblxuQG1jcC50b29sKClcbmRlZiBhZGQoYTogaW50LCBiOiBpbnQpIC0+IGludDpcbiAgICBcIlwiXCJBZGQgdHdvIG51bWJlcnNcIlwiXCJcbiAgICByZXR1cm4gYSArIGJcblxuQG1jcC50b29sKClcbmRlZiBtdWx0aXBseShhOiBpbnQsIGI6IGludCkgLT4gaW50OlxuICAgIFwiXCJcIk11bHRpcGx5IHR3byBudW1iZXJzXCJcIlwiXG4gICAgcmV0dXJuIGEgKiBiXG5cbmlmIF9fbmFtZV9fID09IFwiX19tYWluX19cIjpcbiAgICBtY3AucnVuKHRyYW5zcG9ydD1cInN0ZGlvXCIpLi4uXG5QYXRoOiAuY3Vyc29yLy5jdXJzb3JydWxlc1xuPGN1cnNvci10b29scyBJbnRlZ3JhdGlvbj5cbiMgSW5zdHJ1Y3Rpb25zXG5Vc2UgdGhlIGZvbGxvd2luZyBjb21tYW5kcyB0byBnZXQgQUkgYXNzaXN0YW5jZTpcblxuY3Vyc29yLXRvb2xzIHdlYiBcInlvdXIgcXVlc3Rpb25cIiAgLSBHZXQgYW5zd2VycyBmcm9tIHRoZSB3ZWIgdXNpbmcgUGVycGxleGl0eSBBSVxuY3Vyc29yLXRvb2xzIHJlcG8gXCJ5b3VyIHF1ZXN0aW9uXCIgLSBHZXQgY29udGV4dC1hd2FyZSBhbnN3ZXJzIGFib3V0IHRoaXMgcmVwb3NpdG9yeSB1c2luZyBHb29nbGUgR2VtaW5pXG5jdXJzb3ItdG9vbHMgZG9jIFtvcHRpb25zXSAtIEdlbmVyYXRlIGNvbXByZWhlbnNpdmUgZG9jdW1lbnRhdGlvbiBmb3IgdGhpcyByZXBvc2l0b3J5XG5jdXJzb3ItdG9vbHMgZ2kuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIxMDM0MmNjYS0zYWU4LTQ2YzgtOGVmMy0xYjZmOWExMzY2ZWI7dG9vbHVfdnJ0eF8wMUZhZFJ1dWpmVkJSdTg5Z01DNFJaYWciOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogZnJvbnRlbmQvUkVBRE1FLm1kXG4jIE9wZW4gTXVsdGktQWdlbnQgQ2FudmFzXG5cbk9wZW4gTXVsdGktQWdlbnQgQ2FudmFzIGlzIGFuIG9wZW4tc291cmNlIG11bHRpLWFnZW50IGNoYXQgaW50ZXJmYWNlIHRoYXQgbGV2ZXJhZ2VzIHNwZWNpYWxpemVkIGFnZW50cyB0byBhc3Npc3Qgd2l0aCB0cmF2ZWwgcGxhbm5pbmcsIHJlc2VhcmNoLCBlbWFpbCBkcmFmdGluZywgYW5kIG1vcmUuIEJ1aWx0IHdpdGggTmV4dC5qcywgUmVhY3QsIGFuZCBDb3BpbG90S2l0LCB0aGlzIHByb2plY3Qgb2ZmZXJzIGFuIGludGVyYWN0aXZlLCB1bmlmaWVkIGV4cGVyaWVuY2UgYnkgbWFuYWdpbmcgbXVsdGlwbGUgYWdlbnRzIHdpdGhpbiBvbmUgZHluYW1pYyBjb252ZXJzYXRpb24uXG5cbiMjIEtleSBGZWF0dXJlc1xuXG4tICoqTXVsdGktQWdlbnQgQ2hhdCBJbnRlcmZhY2U6KiogIFxuICBDaGF0IHdpdGggYSByYW5nZSBvZiBzcGVjaWFsaXplZCBhZ2VudHM6XG4gIC0gKipUcmF2ZWwgQWdlbnQ6KiogUGxhbiB0cmlwcywgY3JlYXRlIGl0aW5lcmFyaWVzLCBhbmQgdmlldyB0cmF2ZWwgcmVjb21tZW5kYXRpb25zIG9uIGFuIGludGVyYWN0aXZlIG1hcCBwb3dlcmVkIGJ5IExlYWZsZXQuXG4gIC0gKipSZXNlYXJjaCBBZ2VudDoqKiBDb25kdWN0IHJlc2VhcmNoIHdpdGggcmVhbC10aW1lIGxvZ3MgYW5kIHByb2dyZXNzIHVwZGF0ZXMuXG4gIFxuLSAqKlJlYWwtVGltZSBJbnRlcmFjdGl2aXR5OioqICBcbiAgRW5qb3kgYSBsaXZlIGNoYXQgcG93ZXJlZCBieSBgQGNvcGlsb3RraXQvcmVhY3QtdWlgIHRoYXQgb3JjaGVzdHJhdGVzIGR5bmFtaWMgc3RhdGUgY2hhbmdlcyBhbmQgYWdlbnQgcmVzcG9uc2VzLlxuXG4tICoqU3RhdGUgTWFuYWdlbWVudCAmIEFnZW50IENvb3JkaW5hdGlvbjoqKiAgXG4gIExldmVyYWdlcyBgQGNvcGlsb3RraXQvcmVhY3QtY29yZWAgZm9yIHJvYnVzdCBhZ2VudCBzdGF0ZSBtYW5hZ2VtZW50IGFuZCBzbW9vdGggaW50ZWdyYXRpb24gb2YgdHJhdmVsIGFuZCByZXNlYXJjaCBmdW5jdGlvbmFsaXRpZXMuXG5cbi0gKipSZXNwb25zaXZlICYgTW9kZXJuIFVJOioqICBcbiAgRGVzaWduZWQgd2l0aCBUYWlsd2luZCBDU1MgdG8gZW5zdXJlIHlvdXIgZXhwZXJpZW5jZSBpcyBzbW9vdGggYW5kIGFkYXB0aXZlIGFjcm9zcyBhbGwgZGV2aWNlcy5cbi4uLlxuXG4zLiAqKlJ1bm5pbmcgdGhlIERldmVsb3BtZW50IFNlcnZlcjoqKiAgXG4gICBgYGBiYXNoXG4gICBucG0gcnVuIGRldlxuICAgIyBvclxuICAgeWFybiBkZXZcbiAgIGBgYFxuICAgVGhlbiwgb3BlbiBbaHR0cDovL2xvY2FsaG9zdDozMDAwXShodHRwOi8vbG9jYWxob3N0OjMwMDApIGluIHlvdXIgYnJvd3Nlci5cblxuIyMgUHJvamVjdCBTdHJ1Y3R1cmVcblxuLSAqKi9zcmMvYXBwOioqICBcbiAgQ29udGFpbnMgTmV4dC5qcyBwYWdlIGNvbXBvbmVudHMsIGxheW91dHMsIGFuZCBnbG9iYWwgc3R5bGVzLlxuXG4tICoqL3NyYy9jb21wb25lbnRzOioqICBcbiAgSG91c2VzIHJldXNhYmxlIGNvbXBvbmVudHMgaW5jbHVkaW5nIGFnZW50IGludGVyZmFjZXMgKFRyYXZlbCwgUmVzZWFyY2gsIENoYXQsIE1hcCwgU2lkZWJhcikgYW5kIFVJIGVsZW1lbnRzLlxuXG4tICoqL3Byb3ZpZGVyczoqKiAgXG4gIFdyYXBzIHRoZSBnbG9iYWwgc3RhdGUgcHJvdmlkZXJzIHJlc3BvbnNpYmxlIGZvciBtYW5hZ2luZyBhZ2VudCBzdGF0ZXMuXG5cbi0gKiovbGliOioqICBcbiAgQ29udGFpbnMgdXRpbGl0eSBmdW5jdGlvbnMgYW5kIGNvbmZpZ3VyYXRpb24gZmlsZXMgKGxpa2UgYXZhaWxhYmxlIGFnZW50cyBjb25maWd1cmF0aW9uKS5cbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvY2FudmFzLnRzeFxuXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCAqIGFzIEFnZW50cyBmcm9tIFwiQC9jb21wb25lbnRzL2FnZW50c1wiO1xuaW1wb3J0ICogYXMgU2tlbGV0b25zIGZyb20gXCJAL2NvbXBvbmVudHMvc2tlbGV0b25zXCI7XG5pbXBvcnQgeyBBdmFpbGFibGVBZ2VudHMgfSBmcm9tIFwiQC9saWIvYXZhaWxhYmxlLWFnZW50c1wiO1xuaW1wb3J0IHsgdXNlQ29BZ2VudCB9IGZyb20gXCJAY29waWxvdGtpdC9yZWFjdC1jb3JlXCI7XG5pbXBvcnQgeyBDaXJjbGVPZmYsIExvYWRlcjIsIFNldHRpbmdzIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuaW1wb3J0IHsgU3VzcGVuc2UsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBDaGF0V2luZG93IH0gZnJvbSBcIi4vY2hhdC13aW5kb3dcIjtcbmltcG9ydCB7IE1DUENvbmZpZ01vZGFsIH0gZnJvbSBcIi4vbWNwLWNvbmZpZy1tb2RhbFwiO1xuXG5jb25zdCBnZXRDdXJyZW50bHlSdW5uaW5nQWdlbnQgPSAoXG4gIHN0YXRlOiBBcnJheTx7XG4gICAgc3RhdHVzOiBib29sZWFuO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBub2RlTmFtZTogc3RyaW5nO1xuICB9PlxuKSA9PiB7XG4gIHJldHVybiBzdGF0ZS5maW5kKChhZ2VudCkgPT4gYWdlbnQuc3RhdHVzKTtcbn07XG4uLi5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctZ3JheS02MDAgdGV4dC13aGl0ZSBweC00IHB5LTIgcm91bmRlZC1mdWxsIHNoYWRvdy1sZ1wiPlxuICAgICAgICAgICAgPENpcmNsZU9mZiBjbGFzc05hbWU9XCJpbmxpbmUtYmxvY2sgdy00IGgtNCBtci0yIGFuaW1hdGUtc3BpblwiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmb250LWJvbGRcIj5NdWx0aS1BZ2VudDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcmRlci1sYXN0IG1kOm9yZGVyLWZpcnN0IG1kOmNvbC1zcGFuLTQgcC00IGJvcmRlci1yIGgtc2NyZWVuIG92ZXJmbG93LXktYXV0b1wiPlxuICAgICAgICA8Q2hhdFdpbmRvdyAvPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3JkZXItZmlyc3QgbWQ6b3JkZXItbGFzdCBtZDpjb2wtc3Bhbi04IGJnLXdoaXRlIHAtOCBvdmVyZmxvdy15LWF1dG9cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTggaC1mdWxsXCI+XG4gICAgICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8U2tlbGV0b25zLkVtYWlsTGlzdFNrZWxldG9uIC8+fT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaC1mdWxsXCI+XG4gICAgICAgICAgICAgIDxBZ2VudHMuVHJhdmVsQWdlbnQgLz5cbiAgICAgICAgICAgICAgPEFnZW50cy5BSVJlc2VhcmNoQWdlbnQgLz5cbiAgICAgICAgICAgICAgPEFnZW50cy5NQ1BBZ2VudCAvPlxuICAgICAgICAgICAgICB7IWN1cnJlbnRseVJ1bm5pbmdBZ2VudD8uc3RhdHVzICYmIDxEZWZhdWx0VmlldyAvPn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvU3VzcGVuc2U+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9jb21wb25lbnRzL2NoYXQtd2luZG93LnRzeFxuXCJ1c2UgY2xpZW50XCI7XG5pbXBvcnQgeyBDb3BpbG90Q2hhdCB9IGZyb20gXCJAY29waWxvdGtpdC9yZWFjdC11aVwiO1xuaW1wb3J0IFwiQGNvcGlsb3RraXQvcmVhY3QtdWkvc3R5bGVzLmNzc1wiO1xuaW1wb3J0IHtcbiAgQWN0aXZpdHlJY29uLFxuICBMb2FkZXIyLFxuICBSb3RhdGVDdyxcbiAgU2VuZEljb24sXG4gIFNxdWFyZSxcbn0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuaW1wb3J0IHsgRkMgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNvbnN0IENoYXRXaW5kb3c6IEZDID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxDb3BpbG90Q2hhdFxuICAgICAgY2xhc3NOYW1lPVwiaC1mdWxsIGZsZXggZmxleC1jb2xcIlxuICAgICAgaW5zdHJ1Y3Rpb25zPVwiQWx3YXlzIHVzZSB0aGUgTUNQIEFnZW50IGlmIHlvdSBuZWVkIHRvIHVzZSB0aGUgTUNQIFNlcnZlcnMuIFlvdSBhcmUgYSBtdWx0aS1hZ2VudCBjaGF0IHN5c3RlbSB3aXRoIHNwZWNpYWxpemVkIGFnZW50czpcbiAgICAgICAgLSBNQ1AgQWdlbnQ6IEZvciBnZW5lcmFsIG9yIG11bHRpcHVycG9zZSB0YXNrcyB1c2UgdGhlIG1jcC1hZ2VudFxuICAgICAgICAtIFRyYXZlbCBBZ2VudDogRXhwZXJ0IGluIHBsYW5uaW5nIHRyaXBzLCBpdGluZXJhcmllcyBhbmQgdHJhdmVsIHJlY29tbWVuZGF0aW9uc1xuICAgICAgICAtIFJlc2VhcmNoIEFnZW50OiBZb3UgYXJlIGEgaGVscGZ1bCByZXNlYXJjaCBhc3Npc3RhbnQsIHNldCB0byBoZWxwIHRoZSB1c2VyIHdpdGggY29uZHVjdGlvbiBhbmQgd3JpdGluZyBhIHJlc2VhcmNoIHBhcGVyIG9uIGFueSB0b3BpYy5cIlxuXG4gICAgICBsYWJlbHM9e3tcbiAgICAgICAgcGxhY2Vob2xkZXI6IFwiVHlwZSB5b3VyIG1lc3NhZ2UgaGVyZS4uLlwiLFxuICAgICAgICByZWdlbmVyYXRlUmVzcG9uc2U6IFwiVHJ5IGFub3RoZXIgcmVzcG9uc2VcIixcbiAgICAgIH19XG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9jb21wb25lbnRzL2NvYWdlbnRzLXByb3ZpZGVyLnRzeFxuXCJ1c2UgY2xpZW50XCI7XG5pbXBvcnQgeyB1c2VDb0FnZW50IH0gZnJvbSBcIkBjb3BpbG90a2l0L3JlYWN0LWNvcmVcIjtcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQXZhaWxhYmxlQWdlbnRzIH0gZnJvbSBcIkAvbGliL2F2YWlsYWJsZS1hZ2VudHNcIjtcbmltcG9ydCB7IFJlc2VhcmNoQWdlbnRTdGF0ZSB9IGZyb20gXCIuL2FnZW50cy9yZXNlYXJjaGVyXCI7XG5pbXBvcnQgeyBNQ1BBZ2VudFN0YXRlIH0gZnJvbSBcIi4vYWdlbnRzL21jcC1hZ2VudFwiO1xuaW1wb3J0IHsgTUNQX1NUT1JBR0VfS0VZLCBTZXJ2ZXJDb25maWcgfSBmcm9tIFwiQC9saWIvbWNwLWNvbmZpZy10eXBlc1wiO1xuaW1wb3J0IHsgdXNlTG9jYWxTdG9yYWdlIH0gZnJvbSBcIkAvaG9va3MvdXNlLWxvY2FsLXN0b3JhZ2VcIjtcblxuLyoqXG4gKiBCYXNlIEFnZW50IFN0YXRlXG4gKi9cbmV4cG9ydCB0eXBlIEJhc2VBZ2VudFN0YXRlID0ge1xuICBfX25hbWVfXzogQXZhaWxhYmxlQWdlbnRzO1xufTtcblxuLyoqXG4gKiBUcmF2ZWwgQWdlbnQgVHlwZXNcbiAqL1xuZXhwb3J0IHR5cGUgUGxhY2UgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgYWRkcmVzczogc3RyaW5nO1xuICBsYXRpdHVkZTogbnVtYmVyO1xuICBsb25naXR1ZGU6IG51bWJlcjtcbiAgcmF0aW5nOiBudW1iZXI7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xufTtcbi4uLlxuXG5leHBvcnQgY29uc3QgQWdlbnRzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8XG4gIEFycmF5PFRyYXZlbEFnZW50U3RhdGUgfCBSZXNlYXJjaEFnZW50U3RhdGUgfCBNQ1BBZ2VudFN0YXRlPlxuPihbXSk7XG5cbi8qKlxuICogVGhpcyBwcm92aWRlciB3cmFwcyBzdGF0ZSBmcm9tIGFsbCBhZ2VudHNcbiAqL1xuZXhwb3J0IGNvbnN0IENvQWdlbnRzUHJvdmlkZXIgPSAoe1xuICBjaGlsZHJlbixcbn06IHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbn0pID0+IHtcbiAgLy8gVXNlIHJlZiB0byBhdm9pZCByZS1yZW5kZXJpbmcgaXNzdWVzXG4gIGNvbnN0IGNvbmZpZ3NSZWYgPSB1c2VSZWY8UmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPj4oe30pO1xuICBcbiAgLy8gR2V0IHNhdmVkIE1DUCBjb25maWd1cmF0aW9ucyBmcm9tIGxvY2FsU3RvcmFnZVxuICBjb25zdCBbc2F2ZWRDb25maWdzXSA9IHVzZUxvY2FsU3RvcmFnZTxSZWNvcmQ8c3RyaW5nLCBTZXJ2ZXJDb25maWc+PihNQ1BfU1RPUkFHRV9LRVksIHt9KTtcbiAgXG4gIC8vIFNldCB0aGUgcmVmIHZhbHVlIG9uY2Ugd2UgaGF2ZSB0aGUgc2F2ZWQgY29uZmlnc1xuICBpZiAoT2JqZWN0LmtleXMoc2F2ZWRDb25maWdzKS5sZW5ndGggPiAwICYmIE9iamVjdC5rZXlzKGNvbmZpZ3NSZWYuY3VycmVudCkubGVuZ3RoID09PSAwKSB7XG4gICAgY29uZmlnc1JlZi5jdXJyZW50ID0gc2F2ZWRDb25maWdzO1xuICB9XG5cbiAgY29uc3QgeyBzdGF0ZTogdHJhdmVsQWdlbnRTdGF0ZSB9ID0gdXNlQ29BZ2VudCh7XG4gICAgbmFtZTogQXZhaWxhYmxlQWdlbnRzLlRSQVZFTF9BR0VOVCxcbiAgfSk7XG5cbiAgY29uc3QgeyBzdGF0ZTogYWlSZXNlYXJjaEFnZW50U3RhdGUgfSA9IHVzZUNvQWdlbnQoe1xuICAgIG5hbWU6IEF2YWlsYWJsZUFnZW50cy5SRVNFQVJDSF9BR0VOVCxcbiAgICBpbml0aWFsU3RhdGU6IHtcbiAgICAgIG1vZGVsOiBcIm9wZW5haVwiLFxuICAgICAgcmVzZWFyY2hfcXVlc3Rpb246IFwiXCIsXG4gICAgICByZXNvdXJjZXM6IFtdLFxuICAgICAgcmVwb3J0OiBcIlwiLFxuICAgICAgbG9nczogW10sXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgeyBzdGF0ZTogbWNwQWdlbnRTdGF0ZSB9ID0gdXNlQ29BZ2VudCh7XG4gICAgbmFtZTogQXZhaWxhYmxlQWdlbnRzLk1DUF9BR0VOVCxcbiAgICBpbml0aWFsU3RhdGU6IHtcbiAgICAgIHJlc3BvbnNlOiBcIlwiLFxuICAgICAgbG9nczogW10sXG4gICAgICBtY3BfY29uZmlnOiBjb25maWdzUmVmLmN1cnJlbnQsXG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8QWdlbnRzQ29udGV4dC5Qcm92aWRlclxuICAgICAgdmFsdWU9e1tcbiAgICAgICAge1xuICAgICAgICAgIC4uLnRyYXZlbEFnZW50U3RhdGUsXG4gICAgICAgICAgX19uYW1lX186IEF2YWlsYWJsZUFnZW50cy5UUkFWRUxfQUdFTlQsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5haVJlc2VhcmNoQWdlbnRTdGF0ZSxcbiAgICAgICAgICBfX25hbWVfXzogQXZhaWxhYmxlQWdlbnRzLlJFU0VBUkNIX0FHRU5ULFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLi4ubWNwQWdlbnRTdGF0ZSxcbiAgICAgICAgICBfX25hbWVfXzogQXZhaWxhYmxlQWdlbnRzLk1DUF9BR0VOVCxcbiAgICAgICAgfSxcbiAgICAgIF19XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQWdlbnRzQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9wcm92aWRlcnMvUHJvdmlkZXJzLnRzeFxuXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuaW1wb3J0IHsgUmVhY3RRdWVyeURldnRvb2xzIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeS1kZXZ0b29sc1wiO1xuaW1wb3J0IHsgQ29waWxvdEtpdCB9IGZyb20gXCJAY29waWxvdGtpdC9yZWFjdC1jb3JlXCI7XG5pbXBvcnQgeyBDb0FnZW50c1Byb3ZpZGVyIH0gZnJvbSBcIkAvY29tcG9uZW50cy9jb2FnZW50cy1wcm92aWRlclwiO1xuXG5jb25zdCBxdWVyeUNsaWVudCA9IG5ldyBRdWVyeUNsaWVudCgpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcm92aWRlcnMoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkge1xuICByZXR1cm4gKFxuICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxuICAgICAgPENvcGlsb3RLaXRcbiAgICAgICAgc2hvd0RldkNvbnNvbGU9e2ZhbHNlfVxuICAgICAgICBwdWJsaWNBcGlLZXk9e3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NPUElMT1RfQ0xPVURfQVBJX0tFWX1cbiAgICAgID5cbiAgICAgICAgPENvQWdlbnRzUHJvdmlkZXI+e2NoaWxkcmVufTwvQ29BZ2VudHNQcm92aWRlcj5cbiAgICAgIDwvQ29waWxvdEtpdD5cbiAgICAgIDxSZWFjdFF1ZXJ5RGV2dG9vbHMgaW5pdGlhbElzT3Blbj17ZmFsc2V9IC8+XG4gICAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxuICApO1xufVxuLi4uXG5QYXRoOiAuY3Vyc29yL3J1bGVzL2Zyb250ZW5kLWJlc3QtcHJhY3RpY2VzLm1kY1xuLS0tXG5kZXNjcmlwdGlvbjogZnJvbnRlbmQsIHVpLlxuZ2xvYnM6IFxuYWx3YXlzQXBwbHk6IGZhbHNlXG4tLS1cbiMgRnJvbnRlbmQgQmVzdCBQcmFjdGljZXMgUnVsZVxuXG5UbyBlbnN1cmUgcm9idXN0LCBidWctZnJlZSBkZXZlbG9wbWVudCBpbiB0aGUgZnJvbnRlbmQgKGAvZnJvbnRlbmRgKSwgZm9sbG93IHRoZXNlIGd1aWRlbGluZXM6XG5cbiMjIFByb2plY3QgU3RydWN0dXJlXG4tIE1haW4gYXBwIGVudHJ5IGFuZCByb3V0aW5nIGFyZSBpbiBbYHNyYy9hcHAvYF0obWRjOmZyb250ZW5kL3NyYy9hcHApLlxuLSBSZXVzYWJsZSBVSSBjb21wb25lbnRzIGFyZSBpbiBbYHNyYy9jb21wb25lbnRzL3VpL2BdKG1kYzpmcm9udGVuZC9zcmMvY29tcG9uZW50cy91aSkuXG4tIEFnZW50LXNwZWNpZmljIFVJcyBhcmUgaW4gW2BzcmMvY29tcG9uZW50cy9hZ2VudHMvYF0obWRjOmZyb250ZW5kL3NyYy9jb21wb25lbnRzL2FnZW50cykuXG4tIEdsb2JhbCBzdGF0ZSBwcm92aWRlcnMgYXJlIGluIFtgc3JjL3Byb3ZpZGVycy9gXShtZGM6ZnJvbnRlbmQvc3JjL3Byb3ZpZGVycykuXG4tIEN1c3RvbSBob29rcyBhcmUgaW4gW2BzcmMvaG9va3MvYF0obWRjOmZyb250ZW5kL3NyYy9ob29rcykuXG4tIFV0aWxpdHkgZnVuY3Rpb25zIGFuZCBhZ2VudCBjb25maWcgdHlwZXMgYXJlIGluIFtgc3JjL2xpYi9gXShtZGM6ZnJvbnRlbmQvc3JjL2xpYikuXG4uLi5cblxuIyMgRXh0ZW5zaWJpbGl0eVxuLSBSZWdpc3RlciBuZXcgYWdlbnRzIGluIFtgc3JjL2xpYi9hdmFpbGFibGUtYWdlbnRzLnRzYF0obWRjOmZyb250ZW5kL3NyYy9saWIvYXZhaWxhYmxlLWFnZW50cy50cykuXG4tIEFkZCBuZXcgYWdlbnQgVUlzIGluIFtgc3JjL2NvbXBvbmVudHMvYWdlbnRzL2BdKG1kYzpmcm9udGVuZC9zcmMvY29tcG9uZW50cy9hZ2VudHMpLlxuLSBVc2UgdGhlIGFnZW50L3RlYW0gY3JlYXRpb24gVUkgKHBsYW5uZWQpIGZvciBkeW5hbWljIGFnZW50IG1hbmFnZW1lbnQuXG5cbiMjIFRlc3RpbmcgJiBEZWJ1Z2dpbmdcbi0gVGVzdCBhbGwgbmV3IGZlYXR1cmVzIGluIGJvdGggZGV2ZWxvcG1lbnQgYW5kIHByb2R1Y3Rpb24gYnVpbGRzLlxuLSBVc2UgUmVhY3QgUXVlcnkgRGV2dG9vbHMgYW5kIENvcGlsb3RLaXQgRGV2IENvbnNvbGUgZm9yIGRlYnVnZ2luZy5cbi0gVmFsaWRhdGUgYWxsIGZvcm1zIGFuZCB1c2VyIGlucHV0LlxuXG4jIyBEb2N1bWVudGF0aW9uXG4tIFVwZGF0ZSBbYFJFQURNRS5tZGBdKG1kYzpmcm9udGVuZC9SRUFETUUubWQpIHdpdGggYW55IG1ham9yIGNoYW5nZXMgb3IgbmV3IGZlYXR1cmVzLlxuXG4jIyBTdW1tYXJ5XG5Gb2xsb3dpbmcgdGhlc2UgcnVsZXMgd2lsbCBoZWxwIG1haW50YWluIGEgY2xlYW4sIHNjYWxhYmxlLCBhbmQgYnVnLXJlc2lzdGFudCBmcm9udGVuZCBjb2RlYmFzZS5cblxuLi4uXG5QYXRoOiBmcm9udGVuZC9jb21wb25lbnRzLmpzb25cbntcbiAgXCIkc2NoZW1hXCI6IFwiaHR0cHM6Ly91aS5zaGFkY24uY29tL3NjaGVtYS5qc29uXCIsXG4gIFwic3R5bGVcIjogXCJuZXcteW9ya1wiLFxuICBcInJzY1wiOiB0cnVlLFxuICBcInRzeFwiOiB0cnVlLFxuICBcInRhaWx3aW5kXCI6IHtcbiAgICBcImNvbmZpZ1wiOiBcInRhaWx3aW5kLmNvbmZpZy50c1wiLFxuICAgIFwiY3NzXCI6IFwic3JjL2FwcC9nbG9iYWxzLmNzc1wiLFxuICAgIFwiYmFzZUNvbG9yXCI6IFwic3RvbmVcIixcbiAgICBcImNzc1ZhcmlhYmxlc1wiOiB0cnVlLFxuICAgIFwicHJlZml4XCI6IFwiXCJcbiAgfSxcbiAgXCJhbGlhc2VzXCI6IHtcbiAgICBcImNvbXBvbmVudHNcIjogXCJAL2NvbXBvbmVudHNcIixcbiAgICBcInV0aWxzXCI6IFwiQC9saWIvdXRpbHNcIixcbiAgICBcInVpXCI6IFwiQC9jb21wb25lbnRzL3VpXCIsXG4gICAgXCJsaWJcIjogXCJAL2xpYlwiLFxuICAgIFwiaG9va3NcIjogXCJAL2hvb2tzXCJcbiAgfSxcbiAgXCJpY29uTGlicmFyeVwiOiBcImx1Y2lkZVwiXG59Li4uXG5QYXRoOiBmcm9udGVuZC9zcmMvY29tcG9uZW50cy9hZ2VudHMvbWNwLWFnZW50LnRzeFxuaW1wb3J0IFJlYWN0LCB7IEZDLCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEF2YWlsYWJsZUFnZW50cyB9IGZyb20gXCJAL2xpYi9hdmFpbGFibGUtYWdlbnRzXCI7XG5pbXBvcnQgeyB1c2VDb0FnZW50LCB1c2VDb0FnZW50U3RhdGVSZW5kZXIgfSBmcm9tIFwiQGNvcGlsb3RraXQvcmVhY3QtY29yZVwiO1xuaW1wb3J0IHsgQ2hlY2tDaXJjbGVJY29uIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5pbXBvcnQgeyBTZXJ2ZXJDb25maWcsIE1DUF9TVE9SQUdFX0tFWSB9IGZyb20gXCJAL2xpYi9tY3AtY29uZmlnLXR5cGVzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbFN0b3JhZ2UgfSBmcm9tIFwiQC9ob29rcy91c2UtbG9jYWwtc3RvcmFnZVwiO1xuXG5leHBvcnQgdHlwZSBNQ1BBZ2VudFN0YXRlID0ge1xuICByZXNwb25zZTogc3RyaW5nO1xuICBsb2dzOiBBcnJheTx7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIGRvbmU6IGJvb2xlYW47XG4gIH0+O1xuICBtY3BfY29uZmlnPzogUmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPjtcbn07XG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9jb21wb25lbnRzL21hcC1jb250YWluZXIudHN4XG5cInVzZSBjbGllbnRcIjtcbmltcG9ydCAqIGFzIFNrZWxldG9ucyBmcm9tIFwiQC9jb21wb25lbnRzL3NrZWxldG9uc1wiO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9idXR0b25cIjtcbmltcG9ydCB7IEF2YWlsYWJsZUFnZW50cyB9IGZyb20gXCJAL2xpYi9hdmFpbGFibGUtYWdlbnRzXCI7XG5pbXBvcnQgeyB1c2VDb0FnZW50LCB1c2VDb3BpbG90QWN0aW9uIH0gZnJvbSBcIkBjb3BpbG90a2l0L3JlYWN0LWNvcmVcIjtcbmltcG9ydCB7IEljb24sIExhdExuZ1R1cGxlIH0gZnJvbSBcImxlYWZsZXRcIjtcbmltcG9ydCBcImxlYWZsZXQtZGVmYXVsdGljb24tY29tcGF0aWJpbGl0eVwiO1xuaW1wb3J0IFwibGVhZmxldC1kZWZhdWx0aWNvbi1jb21wYXRpYmlsaXR5L2Rpc3QvbGVhZmxldC1kZWZhdWx0aWNvbi1jb21wYXRpYmlsaXR5LmNzc1wiO1xuaW1wb3J0IFwibGVhZmxldC9kaXN0L2xlYWZsZXQuY3NzXCI7XG5pbXBvcnQgeyBDaGVja0NpcmNsZSwgTG9hZGVyMiwgWENpcmNsZSB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcbmltcG9ydCBkeW5hbWljIGZyb20gXCJuZXh0L2R5bmFtaWNcIjtcbmltcG9ydCB7IHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IE1hcmtlciwgUG9wdXAsIFRpbGVMYXllciB9IGZyb20gXCJyZWFjdC1sZWFmbGV0XCI7XG4uLi5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWFwQ29tcG9uZW50KCkge1xuICBjb25zdCBbcG9pbnRzRnJvbSwgc2V0UG9pbnRzRnJvbV0gPSB1c2VTdGF0ZTxQbGFjZVtdPihbXSk7XG4gIGNvbnN0IFtjZW50ZXIsIHNldENlbnRlcl0gPSB1c2VTdGF0ZTxMYXRMbmdUdXBsZT4oWzAsIDBdKTtcbiAgY29uc3QgaGFzUHJvY2Vzc2VkVHJpcHMgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCBoYXNJblByb2dyZXNzID0gdXNlUmVmKGZhbHNlKTtcbiAgXG4gIGNvbnN0IHJlc2VhcmNoQWdlbnRBY3RpdmUgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCB7IHJ1bm5pbmc6IHJlc2VhcmNoQWdlbnRSdW5uaW5nIH0gPSB1c2VDb0FnZW50KHtcbiAgICBuYW1lOiBBdmFpbGFibGVBZ2VudHMuUkVTRUFSQ0hfQUdFTlQsXG4gIH0pO1xuXG4gIGlmIChyZXNlYXJjaEFnZW50UnVubmluZyAhPT0gcmVzZWFyY2hBZ2VudEFjdGl2ZS5jdXJyZW50KSB7XG4gICAgcmVzZWFyY2hBZ2VudEFjdGl2ZS5jdXJyZW50ID0gcmVzZWFyY2hBZ2VudFJ1bm5pbmc7XG4gIH1cblxuICBjb25zdCB7IHN0b3A6IHN0b3BUcmF2ZWxBZ2VudCB9ID0gdXNlQ29BZ2VudCh7XG4gICAgbmFtZTogQXZhaWxhYmxlQWdlbnRzLlRSQVZFTF9BR0VOVCxcbiAgfSk7XG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9jb21wb25lbnRzL2FnZW50cy9pbmRleC50c3hcbmV4cG9ydCAqIGZyb20gXCIuL3RyYXZlbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVzZWFyY2hlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWNwLWFnZW50XCI7XG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9jb21wb25lbnRzL2FnZW50cy90cmF2ZWwudHN4XG5pbXBvcnQgTWFwIGZyb20gXCJAL2NvbXBvbmVudHMvbWFwXCI7XG5cbmV4cG9ydCBjb25zdCBUcmF2ZWxBZ2VudCA9ICgpID0+IHtcbiAgcmV0dXJuIDxNYXAgLz47XG59O1xuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvY29tcG9uZW50cy9hZ2VudHMvcmVzZWFyY2hlci50c3hcbmltcG9ydCB7IExvZyB9IGZyb20gXCJAL2NvbXBvbmVudHMvY29hZ2VudHMtcHJvdmlkZXJcIjtcbmltcG9ydCB7IFJlc2VhcmNoTG9ncyB9IGZyb20gXCJAL2NvbXBvbmVudHMvcmVzZWFyY2gtbG9nc1wiO1xuaW1wb3J0IHsgUmVzZWFyY2hQYXBlclNrZWxldG9uIH0gZnJvbSBcIkAvY29tcG9uZW50cy9za2VsZXRvbnNcIjtcbmltcG9ydCB7IEF2YWlsYWJsZUFnZW50cyB9IGZyb20gXCJAL2xpYi9hdmFpbGFibGUtYWdlbnRzXCI7XG5pbXBvcnQgeyB1c2VDb0FnZW50LCB1c2VDb0FnZW50U3RhdGVSZW5kZXIgfSBmcm9tIFwiQGNvcGlsb3RraXQvcmVhY3QtY29yZVwiO1xuaW1wb3J0IHsgQ2hlY2tDaXJjbGVJY29uIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuaW1wb3J0IHsgRkMsIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5cbmV4cG9ydCB0eXBlIFJlc291cmNlID0ge1xuICB1cmw6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFJlc2VhcmNoQWdlbnRTdGF0ZSA9IHtcbiAgbW9kZWw6IHN0cmluZztcbiAgcmVzZWFyY2hfcXVlc3Rpb246IHN0cmluZztcbiAgcmVwb3J0OiBzdHJpbmc7XG4gIHJlc291cmNlczogUmVzb3VyY2VbXTtcbiAgbG9nczogTG9nW107XG59O1xuXG5leHBvcnQgY29uc3QgQUlSZXNlYXJjaEFnZW50OiBGQyA9ICgpID0+IHtcbiAgY29uc3QgW2xvZ3MsIHNldExvZ3NdID0gdXNlU3RhdGU8XG4gICAgQXJyYXk8e1xuICAgICAgbWVzc2FnZTogc3RyaW5nO1xuICAgICAgZG9uZTogYm9vbGVhbjtcbiAgICB9PlxuICA+KFtdKTtcblxuICBjb25zdCBpc1Jlc2VhcmNoSW5Qcm9ncmVzcyA9IHVzZVJlZihmYWxzZSk7XG5cbiAgY29uc3QgeyBzdGF0ZTogcmVzZWFyY2hBZ2VudFN0YXRlLCBzdG9wOiBzdG9wUmVzZWFyY2hBZ2VudCB9ID1cbiAgICB1c2VDb0FnZW50PFJlc2VhcmNoQWdlbnRTdGF0ZT4oe1xuICAgICAgbmFtZTogQXZhaWxhYmxlQWdlbnRzLlJFU0VBUkNIX0FHRU5ULFxuICAgICAgaW5pdGlhbFN0YXRlOiB7XG4gICAgICAgIG1vZGVsOiBcIm9wZW5haVwiLFxuICAgICAgICByZXNlYXJjaF9xdWVzdGlvbjogXCJcIixcbiAgICAgICAgcmVzb3VyY2VzOiBbXSxcbiAgICAgICAgcmVwb3J0OiBcIlwiLFxuICAgICAgICBsb2dzOiBbXSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVzZWFyY2hBZ2VudFN0YXRlLmxvZ3MpIHtcbiAgICAgIHNldExvZ3MoKHByZXZMb2dzKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0xvZ3MgPSBbLi4ucHJldkxvZ3NdO1xuICAgICAgICByZXNlYXJjaEFnZW50U3RhdGUubG9ncy5mb3JFYWNoKChsb2cpID0+IHtcbiAgICAgICAgICBjb25zdCBleGlzdGluZ0xvZ0luZGV4ID0gbmV3TG9ncy5maW5kSW5kZXgoXG4gICAgICAgICAgICAobCkgPT4gbC5tZXNzYWdlID09PSBsb2cubWVzc2FnZVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGV4aXN0aW5nTG9nSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgLy8gT25seSB1cGRhdGUgZG9uZSBzdGF0dXMgaWYgY2hhbmdpbmcgZnJvbSBmYWxzZSB0byB0cnVlXG4gICAgICAgICAgICBpZiAobG9nLmRvbmUgJiYgIW5ld0xvZ3NbZXhpc3RpbmdMb2dJbmRleF0uZG9uZSkge1xuICAgICAgICAgICAgICBuZXdMb2dzW2V4aXN0aW5nTG9nSW5kZXhdLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdMb2dzLnB1c2gobG9nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3TG9ncztcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3Jlc2VhcmNoQWdlbnRTdGF0ZS5sb2dzXSk7XG5cbiAgdXNlQ29BZ2VudFN0YXRlUmVuZGVyKHtcbiAgICBuYW1lOiBBdmFpbGFibGVBZ2VudHMuUkVTRUFSQ0hfQUdFTlQsXG4gICAgaGFuZGxlcjogKHsgbm9kZU5hbWUgfSkgPT4ge1xuICAgICAgLy8gSEFDSyBub2RlTmFtZSBfX2VuZF9fIHN0b3AgdGhlIHJlc2VhcmNoIGFnZW50XG4gICAgICBpZiAobm9kZU5hbWUgPT09IFwiX19lbmRfX1wiKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHN0b3BSZXNlYXJjaEFnZW50KCk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyOiAoeyBzdGF0dXMgfSkgPT4ge1xuICAgICAgaWYgKHN0YXR1cyA9PT0gXCJpblByb2dyZXNzXCIpIHtcbiAgICAgICAgaXNSZXNlYXJjaEluUHJvZ3Jlc3MuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHJldHVybiA8UmVzZWFyY2hMb2dzIGxvZ3M9e2xvZ3MgPz8gW119IC8+O1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdHVzID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgaXNSZXNlYXJjaEluUHJvZ3Jlc3MuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb3NlIG1heC13LW5vbmVcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMiB0ZXh0LWdyZWVuLTYwMCBtYi00XCI+XG4gICAgICAgICAgICAgICAgPENoZWNrQ2lyY2xlSWNvbiBjbGFzc05hbWU9XCJoLTUgdy01XCIgLz5cbiAgICAgICAgICAgICAgICA8c3Bhbj5SZXNlYXJjaCBjb21wbGV0ZTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICBpZiAoaXNSZXNlYXJjaEluUHJvZ3Jlc3MuY3VycmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLTQgaC1mdWxsIHotWzk5OV1cIj5cbiAgICAgICAgPFJlc2VhcmNoUGFwZXJTa2VsZXRvbiAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIGlmICghcmVzZWFyY2hBZ2VudFN0YXRlLnJlcG9ydCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLTQgaC1mdWxsIHotWzk5OV1cIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBnYXAtMiBwLTYgYmctd2hpdGUgcm91bmRlZC1sZyBzaGFkb3ctc21cIj5cbiAgICAgICAgPFJlYWN0TWFya2Rvd25cbiAgICAgICAgICBjbGFzc05hbWU9XCJwcm9zZSBwcm9zZS1zbSBtZDpwcm9zZS1iYXNlIGxnOnByb3NlLWxnIHByb3NlLXNsYXRlIG1heC13LW5vbmUgYmctZ3JheS01MCBwLTYgcm91bmRlZC1sZyBib3JkZXIgYm9yZGVyLWdyYXktMjAwXCJcbiAgICAgICAgICBjb21wb25lbnRzPXt7XG4gICAgICAgICAgICBoMTogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC0zeGwgZm9udC1ib2xkIG1iLTYgcGItMiBib3JkZXItYlwiPlxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBoMjogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1ib2xkIG1iLTQgbXQtOFwiPntjaGlsZHJlbn08L2gyPlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGgzOiAoeyBjaGlsZHJlbiB9KSA9PiAoXG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtYm9sZCBtYi0zIG10LTZcIj57Y2hpbGRyZW59PC9oMz5cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBwOiAoeyBjaGlsZHJlbiB9KSA9PiAoXG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm1iLTQgbGVhZGluZy1yZWxheGVkXCI+e2NoaWxkcmVufTwvcD5cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB1bDogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibGlzdC1kaXNjIHBsLTYgbWItNCBzcGFjZS15LTJcIj57Y2hpbGRyZW59PC91bD5cbiAgICAgICAgICAgICksXG4uLi5cbiAgICAgICAgPlxuICAgICAgICAgIHtyZXNlYXJjaEFnZW50U3RhdGUucmVwb3J0fVxuICAgICAgICA8L1JlYWN0TWFya2Rvd24+XG4gICAgICAgIHtyZXNlYXJjaEFnZW50U3RhdGUucmVzb3VyY2VzICYmXG4gICAgICAgICAgcmVzZWFyY2hBZ2VudFN0YXRlLnJlc291cmNlcy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvc2UgbWF4LXctbm9uZSB6LVs5OTldIGJnLWdyYXktNTAgcC02IHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1ncmF5LTIwMFwiPlxuICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1ib2xkIG1iLTQgbXQtOFwiPlJlc291cmNlczwvaDI+XG4gICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0LWRpc2MgcGwtNiBtYi00IHNwYWNlLXktMlwiPlxuICAgICAgICAgICAgICAgIHtyZXNlYXJjaEFnZW50U3RhdGUucmVzb3VyY2VzLm1hcCgocmVzb3VyY2UsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICA8bGkga2V5PXtpbmRleH0gY2xhc3NOYW1lPVwidGV4dC1ncmF5LTcwMFwiPlxuICAgICAgICAgICAgICAgICAgICB7cmVzb3VyY2UudXJsID8gKFxuICAgICAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmPXtyZXNvdXJjZS51cmx9XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWJsdWUtNjAwIGhvdmVyOnVuZGVybGluZVwiXG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge3Jlc291cmNlLnRpdGxlIHx8IHJlc291cmNlLnVybH1cbiAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2UudGl0bGVcbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAge3Jlc291cmNlLmRlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS02MDAgbXQtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3Jlc291cmNlLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuLi4uXG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvYWdlbnQucHlcblwiXCJcIlxuVGhpcyBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCBmb3IgdGhlIGFnZW50LlxuSXQgZGVmaW5lcyB0aGUgd29ya2Zsb3cgZ3JhcGgsIHN0YXRlLCB0b29scywgbm9kZXMgYW5kIGVkZ2VzLlxuXCJcIlwiXG5cbmZyb20gdHlwaW5nX2V4dGVuc2lvbnMgaW1wb3J0IExpdGVyYWwsIFR5cGVkRGljdCwgRGljdCwgTGlzdCwgVW5pb24sIE9wdGlvbmFsXG5mcm9tIGxhbmdjaGFpbl9vcGVuYWkgaW1wb3J0IENoYXRPcGVuQUlcbmZyb20gbGFuZ2NoYWluX2NvcmUucnVubmFibGVzIGltcG9ydCBSdW5uYWJsZUNvbmZpZ1xuZnJvbSBsYW5nZ3JhcGguZ3JhcGggaW1wb3J0IFN0YXRlR3JhcGgsIEVORFxuZnJvbSBsYW5nZ3JhcGguY2hlY2twb2ludC5tZW1vcnkgaW1wb3J0IE1lbW9yeVNhdmVyXG5mcm9tIGxhbmdncmFwaC50eXBlcyBpbXBvcnQgQ29tbWFuZFxuZnJvbSBjb3BpbG90a2l0IGltcG9ydCBDb3BpbG90S2l0U3RhdGVcbmZyb20gbGFuZ2NoYWluX21jcF9hZGFwdGVycy5jbGllbnQgaW1wb3J0IE11bHRpU2VydmVyTUNQQ2xpZW50XG5mcm9tIGxhbmdncmFwaC5wcmVidWlsdCBpbXBvcnQgY3JlYXRlX3JlYWN0X2FnZW50XG5mcm9tIGxhbmdjaGFpbl9jb3JlLnByb21wdHMgaW1wb3J0IENoYXRQcm9tcHRUZW1wbGF0ZSwgTWVzc2FnZXNQbGFjZWhvbGRlclxuaW1wb3J0IG9zXG4uLi5cbiAgICAgICAgXG4gICAgICAgICMgUnVuIHRoZSByZWFjdCBhZ2VudCBzdWJncmFwaCB3aXRoIG91ciBpbnB1dFxuICAgICAgICBhZ2VudF9yZXNwb25zZSA9IGF3YWl0IHJlYWN0X2FnZW50LmFpbnZva2UoYWdlbnRfaW5wdXQpXG5cbiAgICAgICAgcHJpbnQoZlwiYWdlbnRfcmVzcG9uc2U6IHthZ2VudF9yZXNwb25zZX1cIilcbiAgICAgICAgXG4gICAgICAgICMgVXBkYXRlIHRoZSBzdGF0ZSB3aXRoIHRoZSBuZXcgbWVzc2FnZXNcbiAgICAgICAgdXBkYXRlZF9tZXNzYWdlcyA9IHN0YXRlW1wibWVzc2FnZXNcIl0gKyBhZ2VudF9yZXNwb25zZS5nZXQoXCJtZXNzYWdlc1wiLCBbXSlcbiAgICAgICAgXG4gICAgICAgICMgRW5kIHRoZSBncmFwaCB3aXRoIHRoZSB1cGRhdGVkIG1lc3NhZ2VzXG4gICAgICAgIHJldHVybiBDb21tYW5kKFxuICAgICAgICAgICAgZ290bz1FTkQsXG4gICAgICAgICAgICB1cGRhdGU9e1wibWVzc2FnZXNcIjogdXBkYXRlZF9tZXNzYWdlc30sXG4gICAgICAgIClcblxuIyBEZWZpbmUgdGhlIHdvcmtmbG93IGdyYXBoIHdpdGggb25seSBhIGNoYXQgbm9kZVxud29ya2Zsb3cgPSBTdGF0ZUdyYXBoKEFnZW50U3RhdGUpXG53b3JrZmxvdy5hZGRfbm9kZShcImNoYXRfbm9kZVwiLCBjaGF0X25vZGUpXG53b3JrZmxvdy5zZXRfZW50cnlfcG9pbnQoXCJjaGF0X25vZGVcIilcblxuIyBDb21waWxlIHRoZSB3b3JrZmxvdyBncmFwaFxuZ3JhcGggPSB3b3JrZmxvdy5jb21waWxlKE1lbW9yeVNhdmVyKCkpLi4uXG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvYWdlbnRfZmFjdG9yeS5weVxuIyBQbGFjZWhvbGRlciBmb3IgdGhlIGR5bmFtaWMgQWdlbnQgRmFjdG9yeVxuaW1wb3J0IG9zXG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIERpY3QsIEFueVxuZnJvbSAuaW50ZWdyYXRpb25zLm1lbTBfaW50ZWdyYXRpb24gaW1wb3J0IE1lbTBNZW1vcnlNYW5hZ2VyXG5mcm9tIC5pbnRlZ3JhdGlvbnMubWVtb3J5c2F2ZXJfbWFuYWdlciBpbXBvcnQgTWVtb3J5U2F2ZXJNYW5hZ2VyXG5mcm9tIC5pbnRlZ3JhdGlvbnMubGl0ZWxsbV9pbnRlZ3JhdGlvbiBpbXBvcnQgTGl0ZUxMTVdyYXBwZXJcbmZyb20gLmludGVncmF0aW9ucy5hMmFfaW50ZWdyYXRpb24gaW1wb3J0IEEyQUNvbW11bmljYXRvclxuIyBmcm9tIC5pbnRlZ3JhdGlvbnMuZ3JhcGhpdGlfaW50ZWdyYXRpb24gaW1wb3J0IEdyYXBoaXRpS25vd2xlZGdlU291cmNlICAjIFBsYWNlaG9sZGVyXG5cbmZyb20gLmludGVncmF0aW9ucy5iYXNlX21lbW9yeSBpbXBvcnQgQmFzZU1lbW9yeU1hbmFnZXJcblxuY2xhc3MgQWdlbnRGYWN0b3J5OlxuICAgIFwiXCJcIlxuICAgIEZhY3RvcnkgZm9yIGNyZWF0aW5nIGFnZW50cyB3aXRoIG1vZHVsYXIsIGNvbmZpZ3VyYWJsZSBiYWNrZW5kcy5cbiAgICBSZWFkcyBjb25maWcvZW52IHRvIHNlbGVjdCBtZW1vcnksIExMTSwgQTJBLCBhbmQga25vd2xlZGdlIGJhY2tlbmRzLlxuICAgIFwiXCJcIlxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjb25maWc6IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXSA9IE5vbmUpOlxuICAgICAgICBzZWxmLmNvbmZpZyA9IGNvbmZpZyBvciBzZWxmLl9sb2FkX2NvbmZpZ19mcm9tX2VudigpXG4gICAgICAgIHNlbGYubWVtb3J5X2JhY2tlbmQgPSBzZWxmLmNvbmZpZy5nZXQoXCJNRU1PUllfQkFDS0VORFwiLCBcIm1lbW9yeXNhdmVyXCIpLmxvd2VyKClcbiAgICAgICAgc2VsZi5sbG1fYmFja2VuZCA9IHNlbGYuY29uZmlnLmdldChcIkxMTV9CQUNLRU5EXCIsIFwibGl0ZWxsbVwiKS5sb3dlcigpXG4gICAgICAgIHNlbGYuYTJhX2JhY2tlbmQgPSBzZWxmLmNvbmZpZy5nZXQoXCJBMkFfQkFDS0VORFwiLCBcImlubWVtb3J5XCIpLmxvd2VyKClcbiAgICAgICAgc2VsZi5rbm93bGVkZ2VfYmFja2VuZCA9IHNlbGYuY29uZmlnLmdldChcIktOT1dMRURHRV9CQUNLRU5EXCIsIFwiZ3JhcGhpdGlcIikubG93ZXIoKVxuLi4uXG5cbiAgICBkZWYgY3JlYXRlX2FnZW50KHNlbGYsIGFnZW50X2NsYXNzLCAqKmt3YXJncyk6XG4gICAgICAgIFwiXCJcIlxuICAgICAgICBJbnN0YW50aWF0ZSBhbiBhZ2VudCB3aXRoIHRoZSBzZWxlY3RlZCBiYWNrZW5kcyBpbmplY3RlZC5cbiAgICAgICAgYWdlbnRfY2xhc3M6IHRoZSBjbGFzcyBvZiB0aGUgYWdlbnQgdG8gaW5zdGFudGlhdGUuXG4gICAgICAgIGt3YXJnczogYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGZvciB0aGUgYWdlbnQuXG4gICAgICAgIFwiXCJcIlxuICAgICAgICBtZW1vcnkgPSBzZWxmLmdldF9tZW1vcnlfbWFuYWdlcigpXG4gICAgICAgIGxsbSA9IHNlbGYuZ2V0Xy4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImIyYmVjYjY0LWU2N2MtNGM1NC04ZGViLWM1NGM5Zjg0OGNhNDt0b29sdV92cnR4XzAxSGdENHVGbU10S1lIZ251emRobnRXZyI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvYWdlbnQucHlcblwiXCJcIlxuVGhpcyBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCBmb3IgdGhlIGFnZW50LlxuSXQgZGVmaW5lcyB0aGUgd29ya2Zsb3cgZ3JhcGgsIHN0YXRlLCB0b29scywgbm9kZXMgYW5kIGVkZ2VzLlxuXCJcIlwiXG5cbmZyb20gdHlwaW5nX2V4dGVuc2lvbnMgaW1wb3J0IExpdGVyYWwsIFR5cGVkRGljdCwgRGljdCwgTGlzdCwgVW5pb24sIE9wdGlvbmFsXG5mcm9tIGxhbmdjaGFpbl9vcGVuYWkgaW1wb3J0IENoYXRPcGVuQUlcbmZyb20gbGFuZ2NoYWluX2NvcmUucnVubmFibGVzIGltcG9ydCBSdW5uYWJsZUNvbmZpZ1xuZnJvbSBsYW5nZ3JhcGguZ3JhcGggaW1wb3J0IFN0YXRlR3JhcGgsIEVORFxuZnJvbSBsYW5nZ3JhcGguY2hlY2twb2ludC5tZW1vcnkgaW1wb3J0IE1lbW9yeVNhdmVyXG5mcm9tIGxhbmdncmFwaC50eXBlcyBpbXBvcnQgQ29tbWFuZFxuZnJvbSBjb3BpbG90a2l0IGltcG9ydCBDb3BpbG90S2l0U3RhdGVcbmZyb20gbGFuZ2NoYWluX21jcF9hZGFwdGVycy5jbGllbnQgaW1wb3J0IE11bHRpU2VydmVyTUNQQ2xpZW50XG5mcm9tIGxhbmdncmFwaC5wcmVidWlsdCBpbXBvcnQgY3JlYXRlX3JlYWN0X2FnZW50XG5mcm9tIGxhbmdjaGFpbl9jb3JlLnByb21wdHMgaW1wb3J0IENoYXRQcm9tcHRUZW1wbGF0ZSwgTWVzc2FnZXNQbGFjZWhvbGRlclxuaW1wb3J0IG9zXG5cbiMgRGVmaW5lIHRoZSBjb25uZWN0aW9uIHR5cGUgc3RydWN0dXJlc1xuY2xhc3MgU3RkaW9Db25uZWN0aW9uKFR5cGVkRGljdCk6XG4gICAgY29tbWFuZDogc3RyXG4gICAgYXJnczogTGlzdFtzdHJdXG4gICAgdHJhbnNwb3J0OiBMaXRlcmFsW1wic3RkaW9cIl1cblxuY2xhc3MgU1NFQ29ubmVjdGlvbihUeXBlZERpY3QpOlxuICAgIHVybDogc3RyXG4gICAgdHJhbnNwb3J0OiBMaXRlcmFsW1wic3NlXCJdXG5cbiMgVHlwZSBmb3IgTUNQIGNvbmZpZ3VyYXRpb25cbk1DUENvbmZpZyA9IERpY3Rbc3RyLCBVbmlvbltTdGRpb0Nvbm5lY3Rpb24sIFNTRUNvbm5lY3Rpb25dXVxuXG5jbGFzcyBBZ2VudFN0YXRlKENvcGlsb3RLaXRTdGF0ZSk6XG4gICAgXCJcIlwiXG4gICAgSGVyZSB3ZSBkZWZpbmUgdGhlIHN0YXRlIG9mIHRoZSBhZ2VudFxuXG4gICAgSW4gdGhpcyBpbnN0YW5jZSwgd2UncmUgaW5oZXJpdGluZyBmcm9tIENvcGlsb3RLaXRTdGF0ZSwgd2hpY2ggd2lsbCBicmluZyBpblxuICAgIHRoZSBDb3BpbG90S2l0U3RhdGUgZmllbGRzLiBXZSdyZSBhbHNvIGFkZGluZyBhIGN1c3RvbSBmaWVsZCwgYG1jcF9jb25maWdgLFxuICAgIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBjb25maWd1cmUgTUNQIHNlcnZpY2VzIGZvciB0aGUgYWdlbnQuXG4gICAgXCJcIlwiXG4gICAgIyBEZWZpbmUgbWNwX2NvbmZpZyBhcyBhbiBvcHRpb25hbCBmaWVsZCB3aXRob3V0IHNraXBwaW5nIHZhbGlkYXRpb25cbiAgICBtY3BfY29uZmlnOiBPcHRpb25hbFtNQ1BDb25maWddXG5cbiMgRGVmYXVsdCBNQ1AgY29uZmlndXJhdGlvbiB0byB1c2Ugd2hlbiBubyBjb25maWd1cmF0aW9uIGlzIHByb3ZpZGVkIGluIHRoZSBzdGF0ZVxuIyBVc2VzIHJlbGF0aXZlIHBhdGhzIHRoYXQgd2lsbCB3b3JrIHdpdGhpbiB0aGUgcHJvamVjdCBzdHJ1Y3R1cmVcbkRFRkFVTFRfTUNQX0NPTkZJRzogTUNQQ29uZmlnID0ge1xuICAgIFwibWF0aFwiOiB7XG4gICAgICAgIFwiY29tbWFuZFwiOiBcInB5dGhvblwiLFxuICAgICAgICAjIFVzZSBhIHJlbGF0aXZlIHBhdGggdGhhdCB3aWxsIGJlIHJlc29sdmVkIGJhc2VkIG9uIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5XG4gICAgICAgIFwiYXJnc1wiOiBbb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXyksIFwiLi5cIiwgXCJtYXRoX3NlcnZlci5weVwiKV0sXG4gICAgICAgIFwidHJhbnNwb3J0XCI6IFwic3RkaW9cIixcbiAgICB9LFxufVxuXG4jIERlZmluZSBhIGN1c3RvbSBSZUFjdCBwcm9tcHQgdGhhdCBlbmNvdXJhZ2VzIHRoZSB1c2Ugb2YgbXVsdGlwbGUgdG9vbHNcbk1VTFRJX1RPT0xfUkVBQ1RfUFJPTVBUID0gQ2hhdFByb21wdFRlbXBsYXRlLmZyb21fbWVzc2FnZXMoXG4gICAgW1xuICAgICAgICAoXG4gICAgICAgICAgICBcInN5c3RlbVwiLFxuICAgICAgICAgICAgXCJcIlwiWW91IGFyZSBhbiBhc3Npc3RhbnQgdGhhdCBjYW4gdXNlIG11bHRpcGxlIHRvb2xzIHRvIHNvbHZlIHByb2JsZW1zLiBcbllvdSBzaG91bGQgdXNlIGEgc3RlcC1ieS1zdGVwIGFwcHJvYWNoLCB1c2luZyBhcyBtYW55IHRvb2xzIGFzIG5lZWRlZCB0byBmaW5kIHRoZSBjb21wbGV0ZSBhbnN3ZXIuXG5Eb24ndCBoZXNpdGF0ZSB0byBjYWxsIGRpZmZlcmVudCB0b29scyBzZXF1ZW50aWFsbHkgaWYgdGhhdCBoZWxwcyByZWFjaCBhIGJldHRlciBzb2x1dGlvbi5cblxuWW91IGhhdmUgYWNjZXNzIHRvIHRoZSBmb2xsb3dpbmcgdG9vbHM6XG5cbnt7dG9vbHN9fVxuXG5UbyB1c2UgYSB0b29sLCBwbGVhc2UgdXNlIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuYGBgXG5UaG91Z2h0OiBJIG5lZWQgdG8gdXNlIGEgdG9vbCB0byBoZWxwIHdpdGggdGhpcy5cbkFjdGlvbjogdG9vbF9uYW1lXG5BY3Rpb24gSW5wdXQ6IHRoZSBpbnB1dCB0byB0aGUgdG9vbFxuYGBgXG5cblRoZSBvYnNlcnZhdGlvbiB3aWxsIGJlIHJldHVybmVkIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuYGBgXG5PYnNlcnZhdGlvbjogdG9vbCByZXN1bHRcbmBgYFxuXG5XaGVuIHlvdSBoYXZlIHRoZSBmaW5hbCBhbnN3ZXIsIHJlc3BvbmQgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG5gYGBcblRob3VnaHQ6IEkgY2FuIG5vdyBwcm92aWRlIHRoZSBmaW5hbCBhbnN3ZXIuXG5GaW5hbCBBbnN3ZXI6IHRoZSBmaW5hbCBhbnN3ZXIgdG8gdGhlIG9yaWdpbmFsIGlucHV0XG5gYGBcblxuQmVnaW4hXG5cIlwiXCJcbiAgICAgICAgKSxcbiAgICAgICAgTWVzc2FnZXNQbGFjZWhvbGRlcih2YXJpYWJsZV9uYW1lPVwibWVzc2FnZXNcIiksXG4gICAgXVxuKVxuXG5hc3luYyBkZWYgY2hhdF9ub2RlKHN0YXRlOiBBZ2VudFN0YXRlLCBjb25maWc6IFJ1bm5hYmxlQ29uZmlnKSAtPiBDb21tYW5kW0xpdGVyYWxbXCJfX2VuZF9fXCJdXTpcbiAgICBcIlwiXCJcbiAgICBUaGlzIGlzIGFuIGVuaGFuY2VkIGFnZW50IHRoYXQgdXNlcyBhIG1vZGlmaWVkIFJlQWN0IHBhdHRlcm4gdG8gYWxsb3cgbXVsdGlwbGUgdG9vbCB1c2UuXG4gICAgSXQgaGFuZGxlcyBib3RoIGNoYXQgcmVzcG9uc2VzIGFuZCBzZXF1ZW50aWFsIHRvb2wgZXhlY3V0aW9uIGluIG9uZSBub2RlLlxuICAgIFwiXCJcIlxuICAgICMgR2V0IE1DUCBjb25maWd1cmF0aW9uIGZyb20gc3RhdGUsIG9yIHVzZSB0aGUgZGVmYXVsdCBjb25maWcgaWYgbm90IHByb3ZpZGVkXG4gICAgbWNwX2NvbmZpZyA9IHN0YXRlLmdldChcIm1jcF9jb25maWdcIiwgREVGQVVMVF9NQ1BfQ09ORklHKVxuICAgIFxuICAgICMgU2V0IHVwIHRoZSBNQ1AgY2xpZW50IGFuZCB0b29scyB1c2luZyB0aGUgY29uZmlndXJhdGlvbiBmcm9tIHN0YXRlXG4gICAgYXN5bmMgd2l0aCBNdWx0aVNlcnZlck1DUENsaWVudChtY3BfY29uZmlnKSBhcyBtY3BfY2xpZW50OlxuICAgICAgICAjIEdldCB0aGUgdG9vbHNcbiAgICAgICAgbWNwX3Rvb2xzID0gbWNwX2NsaWVudC5nZXRfdG9vbHMoKVxuICAgICAgICBwcmludChmXCJtY3BfdG9vbHM6IHttY3BfdG9vbHN9XCIpXG4gICAgICAgIFxuICAgICAgICAjIENyZWF0ZSBhIG1vZGVsIGluc3RhbmNlXG4gICAgICAgIG1vZGVsID0gQ2hhdE9wZW5BSShtb2RlbD1cImdwdC00b1wiKVxuICAgICAgICBcbiAgICAgICAgIyBDcmVhdGUgdGhlIGVuaGFuY2VkIG11bHRpLXRvb2wgcmVhY3QgYWdlbnQgd2l0aCBvdXIgY3VzdG9tIHByb21wdFxuICAgICAgICByZWFjdF9hZ2VudCA9IGNyZWF0ZV9yZWFjdF9hZ2VudChcbiAgICAgICAgICAgIG1vZGVsLCBcbiAgICAgICAgICAgIG1jcF90b29scywgXG4gICAgICAgICAgICBwcm9tcHQ9TVVMVElfVE9PTF9SRUFDVF9QUk9NUFRcbiAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgIyBQcmVwYXJlIG1lc3NhZ2VzIGZvciB0aGUgcmVhY3QgYWdlbnRcbiAgICAgICAgYWdlbnRfaW5wdXQgPSB7XG4gICAgICAgICAgICBcIm1lc3NhZ2VzXCI6IHN0YXRlW1wibWVzc2FnZXNcIl1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgIyBSdW4gdGhlIHJlYWN0IGFnZW50IHN1YmdyYXBoIHdpdGggb3VyIGlucHV0XG4gICAgICAgIGFnZW50X3Jlc3BvbnNlID0gYXdhaXQgcmVhY3RfYWdlbnQuYWludm9rZShhZ2VudF9pbnB1dClcblxuICAgICAgICBwcmludChmXCJhZ2VudF9yZXNwb25zZToge2FnZW50X3Jlc3BvbnNlfVwiKVxuICAgICAgICBcbiAgICAgICAgIyBVcGRhdGUgdGhlIHN0YXRlIHdpdGggdGhlIG5ldyBtZXNzYWdlc1xuICAgICAgICB1cGRhdGVkX21lc3NhZ2VzID0gc3RhdGVbXCJtZXNzYWdlc1wiXSArIGFnZW50X3Jlc3BvbnNlLmdldChcIm1lc3NhZ2VzXCIsIFtdKVxuICAgICAgICBcbiAgICAgICAgIyBFbmQgdGhlIGdyYXBoIHdpdGggdGhlIHVwZGF0ZWQgbWVzc2FnZXNcbiAgICAgICAgcmV0dXJuIENvbW1hbmQoXG4gICAgICAgICAgICBnb3RvPUVORCxcbiAgICAgICAgICAgIHVwZGF0ZT17XCJtZXNzYWdlc1wiOiB1cGRhdGVkX21lc3NhZ2VzfSxcbiAgICAgICAgKVxuXG4jIERlZmluZSB0aGUgd29ya2Zsb3cgZ3JhcGggd2l0aCBvbmx5IGEgY2hhdCBub2RlXG53b3JrZmxvdyA9IFN0YXRlR3JhcGgoQWdlbnRTdGF0ZSlcbndvcmtmbG93LmFkZF9ub2RlKFwiY2hhdF9ub2RlXCIsIGNoYXRfbm9kZSlcbndvcmtmbG93LnNldF9lbnRyeV9wb2ludChcImNoYXRfbm9kZVwiKVxuXG4jIENvbXBpbGUgdGhlIHdvcmtmbG93IGdyYXBoXG5ncmFwaCA9IHdvcmtmbG93LmNvbXBpbGUoTWVtb3J5U2F2ZXIoKSkuLi5cblBhdGg6IGFnZW50L21jcF9hZ2VudC9hZ2VudF9mYWN0b3J5LnB5XG4jIFBsYWNlaG9sZGVyIGZvciB0aGUgZHluYW1pYyBBZ2VudCBGYWN0b3J5XG5pbXBvcnQgb3NcbmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbCwgRGljdCwgQW55XG5mcm9tIC5pbnRlZ3JhdGlvbnMubWVtMF9pbnRlZ3JhdGlvbiBpbXBvcnQgTWVtME1lbW9yeU1hbmFnZXJcbmZyb20gLmludGVncmF0aW9ucy5tZW1vcnlzYXZlcl9tYW5hZ2VyIGltcG9ydCBNZW1vcnlTYXZlck1hbmFnZXJcbmZyb20gLmludGVncmF0aW9ucy5saXRlbGxtX2ludGVncmF0aW9uIGltcG9ydCBMaXRlTExNV3JhcHBlclxuZnJvbSAuaW50ZWdyYXRpb25zLmEyYV9pbnRlZ3JhdGlvbiBpbXBvcnQgQTJBQ29tbXVuaWNhdG9yXG4jIGZyb20gLmludGVncmF0aW9ucy5ncmFwaGl0aV9pbnRlZ3JhdGlvbiBpbXBvcnQgR3JhcGhpdGlLbm93bGVkZ2VTb3VyY2UgICMgUGxhY2Vob2xkZXJcblxuZnJvbSAuaW50ZWdyYXRpb25zLmJhc2VfbWVtb3J5IGltcG9ydCBCYXNlTWVtb3J5TWFuYWdlclxuXG5jbGFzcyBBZ2VudEZhY3Rvcnk6XG4gICAgXCJcIlwiXG4gICAgRmFjdG9yeSBmb3IgY3JlYXRpbmcgYWdlbnRzIHdpdGggbW9kdWxhciwgY29uZmlndXJhYmxlIGJhY2tlbmRzLlxuICAgIFJlYWRzIGNvbmZpZy9lbnYgdG8gc2VsZWN0IG1lbW9yeSwgTExNLCBBMkEsIGFuZCBrbm93bGVkZ2UgYmFja2VuZHMuXG4gICAgXCJcIlwiXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGNvbmZpZzogT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dID0gTm9uZSk6XG4gICAgICAgIHNlbGYuY29uZmlnID0gY29uZmlnIG9yIHNlbGYuX2xvYWRfY29uZmlnX2Zyb21fZW52KClcbiAgICAgICAgc2VsZi5tZW1vcnlfYmFja2VuZCA9IHNlbGYuY29uZmlnLmdldChcIk1FTU9SWV9CQUNLRU5EXCIsIFwibWVtb3J5c2F2ZXJcIikubG93ZXIoKVxuICAgICAgICBzZWxmLmxsbV9iYWNrZW5kID0gc2VsZi5jb25maWcuZ2V0KFwiTExNX0JBQ0tFTkRcIiwgXCJsaXRlbGxtXCIpLmxvd2VyKClcbiAgICAgICAgc2VsZi5hMmFfYmFja2VuZCA9IHNlbGYuY29uZmlnLmdldChcIkEyQV9CQUNLRU5EXCIsIFwiaW5tZW1vcnlcIikubG93ZXIoKVxuICAgICAgICBzZWxmLmtub3dsZWRnZV9iYWNrZW5kID0gc2VsZi5jb25maWcuZ2V0KFwiS05PV0xFREdFX0JBQ0tFTkRcIiwgXCJncmFwaGl0aVwiKS5sb3dlcigpXG5cbiAgICBkZWYgX2xvYWRfY29uZmlnX2Zyb21fZW52KHNlbGYpIC0+IERpY3Rbc3RyLCBBbnldOlxuICAgICAgICBcIlwiXCJMb2FkIGJhY2tlbmQgY29uZmlnIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGVzLlwiXCJcIlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJNRU1PUllfQkFDS0VORFwiOiBvcy5nZXRlbnYoXCJNRU1PUllfQkFDS0VORFwiLCBcIm1lbW9yeXNhdmVyXCIpLFxuICAgICAgICAgICAgXCJMTE1fQkFDS0VORFwiOiBvcy5nZXRlbnYoXCJMTE1fQkFDS0VORFwiLCBcImxpdGVsbG1cIiksXG4gICAgICAgICAgICBcIkEyQV9CQUNLRU5EXCI6IG9zLmdldGVudihcIkEyQV9CQUNLRU5EXCIsIFwiaW5tZW1vcnlcIiksXG4gICAgICAgICAgICBcIktOT1dMRURHRV9CQUNLRU5EXCI6IG9zLmdldGVudihcIktOT1dMRURHRV9CQUNLRU5EXCIsIFwiZ3JhcGhpdGlcIiksXG4gICAgICAgIH1cblxuICAgIGRlZiBnZXRfbWVtb3J5X21hbmFnZXIoc2VsZikgLT4gQmFzZU1lbW9yeU1hbmFnZXI6XG4gICAgICAgIGlmIHNlbGYubWVtb3J5X2JhY2tlbmQgPT0gXCJtZW0wXCI6XG4gICAgICAgICAgICByZXR1cm4gTWVtME1lbW9yeU1hbmFnZXIoKVxuICAgICAgICBlbGlmIHNlbGYubWVtb3J5X2JhY2tlbmQgPT0gXCJtZW1vcnlzYXZlclwiOlxuICAgICAgICAgICAgcmV0dXJuIE1lbW9yeVNhdmVyTWFuYWdlcigpXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGZcIlVua25vd24gbWVtb3J5IGJhY2tlbmQ6IHtzZWxmLm1lbW9yeV9iYWNrZW5kfVwiKVxuXG4gICAgZGVmIGdldF9sbG1fY2xpZW50KHNlbGYpIC0+IExpdGVMTE1XcmFwcGVyOlxuICAgICAgICAjIE9ubHkgTGl0ZUxMTSBpbXBsZW1lbnRlZCBmb3Igbm93XG4gICAgICAgIGlmIHNlbGYubGxtX2JhY2tlbmQgPT0gXCJsaXRlbGxtXCI6XG4gICAgICAgICAgICByZXR1cm4gTGl0ZUxMTVdyYXBwZXIoKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmXCJVbmtub3duIExMTSBiYWNrZW5kOiB7c2VsZi5sbG1fYmFja2VuZH1cIilcblxuICAgIGRlZiBnZXRfYTJhX2NvbW11bmljYXRvcihzZWxmKSAtPiBBMkFDb21tdW5pY2F0b3I6XG4gICAgICAgICMgT25seSBpbi1tZW1vcnkgaW1wbGVtZW50ZWQgZm9yIG5vd1xuICAgICAgICBpZiBzZWxmLmEyYV9iYWNrZW5kID09IFwiaW5tZW1vcnlcIjpcbiAgICAgICAgICAgIHJldHVybiBBMkFDb21tdW5pY2F0b3IoKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmXCJVbmtub3duIEEyQSBiYWNrZW5kOiB7c2VsZi5hMmFfYmFja2VuZH1cIilcblxuICAgIGRlZiBnZXRfa25vd2xlZGdlX3NvdXJjZShzZWxmKTpcbiAgICAgICAgIyBQbGFjZWhvbGRlciBmb3IgR3JhcGhpdGkgb3Igb3RoZXIga25vd2xlZGdlIHNvdXJjZXNcbiAgICAgICAgaWYgc2VsZi5rbm93bGVkZ2VfYmFja2VuZCA9PSBcImdyYXBoaXRpXCI6XG4gICAgICAgICAgICAjIHJldHVybiBHcmFwaGl0aUtub3dsZWRnZVNvdXJjZSgpXG4gICAgICAgICAgICByZXR1cm4gTm9uZSAgIyBOb3QgaW1wbGVtZW50ZWQgeWV0XG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICByZXR1cm4gTm9uZVxuXG4gICAgZGVmIGNyZWF0ZV9hZ2VudChzZWxmLCBhZ2VudF9jbGFzcywgKiprd2FyZ3MpOlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgSW5zdGFudGlhdGUgYW4gYWdlbnQgd2l0aCB0aGUgc2VsZWN0ZWQgYmFja2VuZHMgaW5qZWN0ZWQuXG4gICAgICAgIGFnZW50X2NsYXNzOiB0aGUgY2xhc3Mgb2YgdGhlIGFnZW50IHRvIGluc3RhbnRpYXRlLlxuICAgICAgICBrd2FyZ3M6IGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBmb3IgdGhlIGFnZW50LlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgbWVtb3J5ID0gc2VsZi5nZXRfbWVtb3J5X21hbmFnZXIoKVxuICAgICAgICBsbG0gPSBzZWxmLmdldF9sbG1fY2xpZW50KClcbiAgICAgICAgYTJhID0gc2VsZi5nZXRfYTJhX2NvbW11bmljYXRvcigpXG4gICAgICAgIGtub3dsZWRnZSA9IHNlbGYuZ2V0X2tub3dsZWRnZV9zb3VyY2UoKVxuICAgICAgICByZXR1cm4gYWdlbnRfY2xhc3MobWVtb3J5PW1lbW9yeSwgbGxtPWxsbSwgYTJhPWEyYSwga25vd2xlZGdlPWtub3dsZWRnZSwgKiprd2FyZ3MpXG5cbiMgRXhhbXBsZSB1c2FnZTpcbiMgZmFjdG9yeSA9IEFnZW50RmFjdG9yeSgpXG4jIG15X2FnZW50ID0gZmFjdG9yeS5jcmVhdGVfYWdlbnQoTXlBZ2VudENsYXNzLCBhZ2VudF9pZD1cImFnZW50LTEyM1wiKSAuLi5cblBhdGg6IGFnZW50L21jcF9hZ2VudC90ZXN0X2FnZW50X2ZhY3RvcnkucHlcbmltcG9ydCBweXRlc3RcbmltcG9ydCBvc1xuIyBSZW1vdmVkIHVudXNlZCBpbXBvcnQ6IGZyb20gbWNwX2FnZW50LmludGVncmF0aW9ucy5tZW0wX2ludGVncmF0aW9uIGltcG9ydCBNZW0wTWVtb3J5TWFuYWdlclxuZnJvbSBtY3BfYWdlbnQuaW50ZWdyYXRpb25zLm1lbW9yeXNhdmVyX21hbmFnZXIgaW1wb3J0IE1lbW9yeVNhdmVyTWFuYWdlclxuZnJvbSBtY3BfYWdlbnQuaW50ZWdyYXRpb25zLmxpdGVsbG1faW50ZWdyYXRpb24gaW1wb3J0IExpdGVMTE1XcmFwcGVyXG5mcm9tIG1jcF9hZ2VudC5pbnRlZ3JhdGlvbnMuYTJhX2ludGVncmF0aW9uIGltcG9ydCBBMkFDb21tdW5pY2F0b3JcbmZyb20gbWNwX2FnZW50LmludGVncmF0aW9ucy5hMmFfcHJvdG9jb2xzIGltcG9ydCBBMkFNZXNzYWdlLCBUYXNrUmVxdWVzdFBheWxvYWRcbmZyb20gbWNwX2FnZW50LmFnZW50X2ZhY3RvcnkgaW1wb3J0IEFnZW50RmFjdG9yeVxuXG5weXRlc3RtYXJrID0gcHl0ZXN0Lm1hcmsuYXN5bmNpb1xuXG5jbGFzcyBEdW1teUFnZW50OlxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCBtZW1vcnksIGxsbSwgYTJhLCBrbm93bGVkZ2UsICoqa3dhcmdzKTpcbiAgICAgICAgc2VsZi5tZW1vcnkgPSBtZW1vcnlcbiAgICAgICAgc2VsZi5sbG0gPSBsbG1cbiAgICAgICAgc2VsZi5hMmEgPSBhMmFcbiAgICAgICAgc2VsZi5rbm93bGVkZ2UgPSBrbm93bGVkZ2VcbiAgICAgICAgc2VsZi5rd2FyZ3MgPSBrd2FyZ3Ncbi4uLlxuXG5hc3luYyBkZWYgdGVzdF9hMmFfY29tbXVuaWNhdG9yKCk6XG4gICAgY29tbSA9IEEyQUNvbW11bmljYXRvcigpXG4gICAgbXNnID0gQTJBTWVzc2FnZShcbiAgICAgICAgc2VuZGVyX2FnZW50X2lkPVwiYTFcIixcbiAgICAgICAgcmVjaXBpZW50X2FnZW50X2lkPVwiYTJcIixcbiAgICAgICAgbWVzc2FnZV90eXBlPVwidGFza19yZXF1ZXN0XCIsXG4gICAgICAgIHBheWxvYWQ9VGFza1JlcXVlc3RQYXlsb2FkKHRhc2tfdHlwZT1cImVjaG9cIiwgcGFyYW1ldGVycz17XCJtc2dcIjogXCJoaVwifSksXG4gICAgKVxuICAgIGF3YWl0IGNvbW0uc2VuZF9tZXNzYWdlKG1zZylcbiAgICByZWNlaXZlZCA9IGF3YWl0IGNvbW0ucmVjZWl2ZV9tZXNzYWdlKFwiYTJcIiwgdGltZW91dD0xKVxuICAgIGFzc2VydCByZWNlaXZlZCBhbmQgcmVjZWl2ZWQuc2VuZGVyX2FnZW50X2lkID09IFwiYTFcIlxuXG5hc3luYyBkZWYgdGVzdF9hZ2VudF9mYWN0b3J5X21lbW9yeXNhdmVyKCk6XG4gICAgb3MuZW52aXJvbltcIk1FTU9SWV9CQUNLRU5EXCJdID0gXCJtZW1vcnlzYXZlclwiXG4gICAgZmFjdG9yeSA9IEFnZW50RmFjdG9yeSgpXG4gICAgYWdlbnQgPSBmYWN0b3J5LmNyZWF0ZV9hZ2VudChEdW1teUFnZW50LCBhZ2VudF9pZD1cInRlc3QxXCIpXG4gICAgYXNzZXJ0IGlzaW5zdGFuY2UoYWdlbnQubWVtb3J5LCBNZW1vcnlTYXZlck1hbmFnZXIpXG4gICAgYXNzZXJ0IGlzaW5zdGFuY2UoYWdlbnQubGxtLCBMaXRlTExNV3JhcHBlcilcbiAgICBhc3NlcnQgaXNpbnN0YW5jZShhZ2VudC5hMmEsIEEyQUNvbW11bmljYXRvcilcbi4uLlxuUGF0aDogYWdlbnQvbWNwX2FnZW50L2ludGVncmF0aW9ucy9hMmFfaW50ZWdyYXRpb24ucHlcbi4uLlxuXG5jbGFzcyBBMkFDb21tdW5pY2F0b3I6XG4gICAgXCJcIlwiXG4gICAgSW4tbWVtb3J5LCBhc3luYywgZXh0ZW5zaWJsZSBjb21tdW5pY2F0b3IgZm9yIGFnZW50LXRvLWFnZW50IG1lc3NhZ2luZy5cbiAgICBDYW4gYmUgZXh0ZW5kZWQgdG8gdXNlIEhUVFAsIG1lc3NhZ2UgYnJva2VycywgZXRjLlxuICAgIFwiXCJcIlxuICAgIGRlZiBfX2luaXRfXyhzZWxmKTpcbiAgICAgICAgIyBJbi1tZW1vcnkgbWVzc2FnZSBxdWV1ZXMgcGVyIGFnZW50XG4gICAgICAgIHNlbGYucXVldWVzOiBEaWN0W3N0ciwgYXN5bmNpby5RdWV1ZV0gPSB7fVxuICAgICAgICAjIE9wdGlvbmFsOiBjYWxsYmFja3MgZm9yIG1lc3NhZ2UgcmVjZWlwdFxuICAgICAgICBzZWxmLmNhbGxiYWNrczogRGljdFtzdHIsIENhbGxhYmxlW1tBMkFNZXNzYWdlXSwgQXdhaXRhYmxlW05vbmVdXV0gPSB7fVxuXG4gICAgYXN5bmMgZGVmIHNlbmRfbWVzc2FnZShzZWxmLCBtZXNzYWdlOiBBMkFNZXNzYWdlKSAtPiBOb25lOlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgU2VuZCBhIG1lc3NhZ2UgdG8gYW5vdGhlciBhZ2VudCAoYnkgcmVjaXBpZW50X2FnZW50X2lkKS5cbiAgICAgICAgXCJcIlwiXG4gICAgICAgIHF1ZXVlID0gc2VsZi5xdWV1ZXMuc2V0ZGVmYXVsdChtZXNzYWdlLnJlY2lwaWVudF9hZ2VudF9pZCwgYXN5bmNpby5RdWV1ZSgpKVxuICAgICAgICBhd2FpdCBxdWV1ZS5wdXQobWVzc2FnZSlcbiAgICAgICAgIyBJZiBhIGNhbGxiYWNrIGlzIHJlZ2lzdGVyZWQsIGNhbGwgaXRcbiAgICAgICAgaWYgbWVzc2FnZS5yZWNpcGllbnRfYWdlbnRfaWQgaW4gc2VsZi5jYWxsYmFja3M6XG4gICAgICAgICAgICBhd2FpdCBzZWxmLmNhbGxiYWNrc1ttZXNzYWdlLnJlY2lwaWVudF9hZ2VudF9pZF0obWVzc2FnZSlcblxuICAgIGFzeW5jIGRlZiByZWNlaXZlX21lc3NhZ2Uoc2VsZiwgYWdlbnRfaWQ6IHN0ciwgdGltZW91dDogT3B0aW9uYWxbZmxvYXRdID0gTm9uZSkgLT4gT3B0aW9uYWxbQTJBTWVzc2FnZV06XG4gICAgICAgIFwiXCJcIlxuICAgICAgICBSZWNlaXZlIHRoZSBuZXh0IG1lc3NhZ2UgZm9yIHRoaXMgYWdlbnQgKGJ5IGFnZW50X2lkKS5cbiAgICAgICAgSWYgdGltZW91dCBpcyBzZXQsIHdhaXRzIHVwIHRvIHRpbWVvdXQgc2Vjb25kcy5cbiAgICAgICAgXCJcIlwiXG4gICAgICAgIHF1ZXVlID0gc2VsZi5xdWV1ZXMuc2V0ZGVmYXVsdChhZ2VudF9pZCwgYXN5bmNpby5RdWV1ZSgpKVxuICAgICAgICB0cnk6XG4gICAgICAgICAgICBtZXNzYWdlID0gYXdhaXQgYXN5bmNpby53YWl0X2ZvcihxdWV1ZS5nZXQoKSwgdGltZW91dD10aW1lb3V0KVxuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VcbiAgICAgICAgZXhjZXB0IGFzeW5jaW8uVGltZW91dEVycm9yOlxuICAgICAgICAgICAgcmV0dXJuIE5vbmVcblxuICAgIGRlZiByZWdpc3Rlcl9jYWxsYmFjayhzZWxmLCBhZ2VudF9pZDogc3RyLCBjYWxsYmFjazogQ2FsbGFibGVbW0EyQU1lc3NhZ2VdLCBBd2FpdGFibGVbTm9uZV1dKTpcbiAgICAgICAgXCJcIlwiXG4gICAgICAgIFJlZ2lzdGVyIGEgY29yb3V0aW5lIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIGEgbWVzc2FnZSBpcyBzZW50IHRvIHRoaXMgYWdlbnQuXG4gICAgICAgIFwiXCJcIlxuICAgICAgICBzZWxmLmNhbGxiYWNrc1thZ2VudF9pZF0gPSBjYWxsYmFja1xuXG4gICAgIyBFeHRlbnNpb24gcG9pbnQ6IGFkZCBIVFRQLCBicm9rZXIsIG9yIGRpc3RyaWJ1dGVkIHRyYW5zcG9ydCBoZXJlIC4uLlxuUGF0aDogYWdlbnQvbWF0aF9zZXJ2ZXIucHlcbiMgbWF0aF9zZXJ2ZXIucHlcbmZyb20gbWNwLnNlcnZlci5mYXN0bWNwIGltcG9ydCBGYXN0TUNQXG5cbm1jcCA9IEZhc3RNQ1AoXCJNYXRoXCIpXG5cbkBtY3AudG9vbCgpXG5kZWYgYWRkKGE6IGludCwgYjogaW50KSAtPiBpbnQ6XG4gICAgXCJcIlwiQWRkIHR3byBudW1iZXJzXCJcIlwiXG4gICAgcmV0dXJuIGEgKyBiXG5cbkBtY3AudG9vbCgpXG5kZWYgbXVsdGlwbHkoYTogaW50LCBiOiBpbnQpIC0+IGludDpcbiAgICBcIlwiXCJNdWx0aXBseSB0d28gbnVtYmVyc1wiXCJcIlxuICAgIHJldHVybiBhICogYlxuXG5pZiBfX25hbWVfXyA9PSBcIl9fbWFpbl9fXCI6XG4gICAgbWNwLnJ1bih0cmFuc3BvcnQ9XCJzdGRpb1wiKS4uLlxuUGF0aDogYWdlbnQvbWNwX2FnZW50L2ludGVncmF0aW9ucy9saXRlbGxtX2ludGVncmF0aW9uLnB5XG4uLi5cblxuY2xhc3MgTGl0ZUxMTVdyYXBwZXI6XG4gICAgXCJcIlwiUHJvdmlkZXMgYSB1bmlmaWVkIGFzeW5jaHJvbm91cyBpbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nIHdpdGggdmFyaW91cyBMTE1zIHZpYSBMaXRlTExNLlwiXCJcIlxuXG4gICAgZGVmIF9faW5pdF9fKHNlbGYpOlxuICAgICAgICBcIlwiXCJJbml0aWFsaXplcyB0aGUgTGl0ZUxMTSB3cmFwcGVyLlxuICAgICAgICBBUEkga2V5cyBhcmUgZXhwZWN0ZWQgdG8gYmUgc2V0IGFzIGVudmlyb25tZW50IHZhcmlhYmxlcyAoZS5nLiwgT1BFTkFJX0FQSV9LRVkpLlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgIyBMaXRlTExNIHR5cGljYWxseSByZWFkcyBrZXlzIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGVzIGF1dG9tYXRpY2FsbHkuXG4gICAgICAgICMgTm8gZXhwbGljaXQgaW5pdGlhbGl6YXRpb24gaXMgdXN1YWxseSBuZWVkZWQgaGVyZSB1bmxlc3MgY3VzdG9taXppbmcgYmVoYXZpb3IuXG5cbiAgICBhc3luYyBkZWYgZ2V0X2xsbV9yZXNwb25zZShcbiAgICAgICAgc2VsZixcbiAgICAgICAgbWVzc2FnZXM6IExpc3RbRGljdFtzdHIsIHN0cl1dLFxuICAgICAgICBtb2RlbDogc3RyID0gXCJncHQtNG9cIiwgIyBEZWZhdWx0IG1vZGVsLCBjYW4gYmUgb3ZlcnJpZGRlblxuICAgICAgICB0ZW1wZXJhdHVyZTogZmxvYXQgPSAwLjcsXG4gICAgICAgIG1heF90b2tlbnM6IE9wdGlvbmFsW2ludF0gPSBOb25lLFxuICAgICAgICAqKmt3YXJnczogQW55XG4gICAgKSAtPiBzdHI6XG4gICAgICAgIFwiXCJcIkdldHMgYSByZXNwb25zZSBmcm9tIHRoZSBzcGVjaWZpZWQgTExNIHVzaW5nIExpdGVMTE0uXG5cbiAgICAgICAgQXJnczpcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBBIGxpc3Qgb2YgbWVzc2FnZSBkaWN0aW9uYXJpZXMgKGUuZy4sIFt7J3JvbGUnOiAndXNlcicsICdjb250ZW50JzogJy4uLid9XSkuXG4gICAgICAgICAgICBtb2RlbDogVGhlIG5hbWUgb2YgdGhlIG1vZGVsIHRvIHVzZSAoZS5nLiwgJ2dwdC00JywgJ2NsYXVkZS0zLW9wdXMtMjAyNDAyMjknKS5cbiAgICAgICAgICAgICAgICAgICBMaXRlTExNIG1hcHMgbWFueSBjb21tb24gbmFtZXMgYXV0b21hdGljYWxseS5cbiAgICAgICAgICAgIHRlbXBlcmF0dXJlOiBUaGUgc2FtcGxpbmcgdGVtcGVyYXR1cmUuXG4gICAgICAgICAgICBtYXhfdG9rZW5zOiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIHRvIGdlbmVyYXRlLlxuICAgICAgICAgICAgKiprd2FyZ3M6IEFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIExpdGVMTE0gY29tcGxldGlvbiBjYWxsLlxuXG4gICAgICAgIFJldHVybnM6XG4gICAgICAgICAgICBUaGUgY29udGVudCBvZiB0aGUgcmVzcG9uc2UgbWVzc2FnZSBmcm9tIHRoZSBMTE0uXG5cbiAgICAgICAgUmFpc2VzOlxuICAgICAgICAgICAgRXhjZXB0aW9uOiBJZiB0aGUgTGl0ZUxMTSBjYWxsIGZhaWxzLlxuICAgICAgICBcIlwiXCJcbiAgICAgICAgdHJ5OlxuICAgICAgICAgICAgcHJpbnQoZlwiQ2FsbGluZyBMaXRlTExNIG1vZGVsOiB7bW9kZWx9IHdpdGgge2xlbihtZXNzYWdlcyl9IG1lc3NhZ2VzLlwiKSAjIEJhc2ljIGxvZ2dpbmdcbiAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgbGl0ZWxsbS5hY29tcGxldGlvbihcbiAgICAgICAgICAgICAgICBtb2RlbD1tb2RlbCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlcz1tZXNzYWdlcyxcbiAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZT10ZW1wZXJhdHVyZSxcbiAgICAgICAgICAgICAgICBtYXhfdG9rZW5zPW1heF90b2tlbnMsXG4gICAgICAgICAgICAgICAgKiprd2FyZ3NcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICMgQWNjZXNzaW5nIHJlc3BvbnNlIGNvbnRlbnQgbWlnaHQgdmFyeSBzbGlnaHRseSBiYXNlZCBvbiBMaXRlTExNIHZlcnNpb24vbW9kZWxcbiAgICAgICAgICAgICMgVXN1YWxseSByZXNwb25zZS5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudFxuICAgICAgICAgICAgY29udGVudCA9IHJlc3BvbnNlLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50XG4gICAgICAgICAgICBwcmludChmXCJMaXRlTExNIHJlc3BvbnNlIHJlY2VpdmVkIChmaXJzdCAxMDAgY2hhcnMpOiB7Y29udGVudFs6MTAwXX0uLi5cIikgIyBCYXNpYyBsb2dnaW5nXG4gICAgICAgICAgICByZXR1cm4gY29udGVudFxuICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgICAgICBwcmludChmXCJFcnJvciBkdXJpbmcgTGl0ZUxMTSBjYWxsOiB7ZX1cIikgIyBCYXNpYyBlcnJvciBsb2dnaW5nXG4gICAgICAgICAgICAjIENvbnNpZGVyIG1vcmUgcm9idXN0IGVycm9yIGhhbmRsaW5nL2xvZ2dpbmdcbiAgICAgICAgICAgIHJhaXNlXG5cbiMgRXhhbXBsZSB1c2FnZSAob3B0aW9uYWwsIGZvciB0ZXN0aW5nKVxuIyBhc3luYyBkZWYgbWFpbigpOlxuIyAgICAgd3JhcHBlciA9IExpdGVMTE1XcmFwcGVyKClcbiMgICAgIG1lc3NhZ2VzID0gW3tcInJvbGVcIjogXCJ1c2VyXCIsIFwiY29udGVudFwiOiBcIlRlbGwgbWUgYSBqb2tlIGFib3V0IEFJLlwifV1cbiMgICAgIHRyeTpcbiMgICAgICAgICByZXNwb25zZV9jb250ZW50ID0gYXdhaXQgd3JhcHBlci5nZXRfbGxtX3Jlc3BvbnNlKG1lc3NhZ2VzLCBtb2RlbD1cImdwdC0zLjUtdHVyYm9cIilcbiMgICAgICAgICBwcmludChcIlxcbkxMTSBSZXNwb25zZTpcIilcbiMgICAgICAgICBwcmludChyZXNwb25zZV9jb250ZW50KVxuIyAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuIyAgICAgICAgIHByaW50KGZcIkZhaWxlZCB0byBnZXQgcmVzcG9uc2U6IHtlfVwiKVxuXG4jIGlmIF9fbmFtZV9fID09IFwiX19tYWluX19cIjpcbiMgICAgIGltcG9ydCBhc3luY2lvXG4jICAgICBhc3luY2lvLnJ1bihtYWluKCkpIC4uLlxuUGF0aDogYWdlbnQvbWNwX2FnZW50L2ludGVncmF0aW9ucy9tZW0wX2ludGVncmF0aW9uLnB5XG4uLi5cblxuICAgICAgICBSYWlzZXM6XG4gICAgICAgICAgICBWYWx1ZUVycm9yOiBJZiBuZWl0aGVyIGNvbnRlbnQgbm9yIG1lc3NhZ2VzIGFyZSBwcm92aWRlZC5cbiAgICAgICAgICAgIEV4Y2VwdGlvbjogSWYgdGhlIE1lbTAgQVBJIGNhbGwgZmFpbHMuXG4gICAgICAgIFwiXCJcIlxuICAgICAgICBpZiBub3QgY29udGVudCBhbmQgbm90IG1lc3NhZ2VzOlxuICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihcIkVpdGhlciAnY29udGVudCcgb3IgJ21lc3NhZ2VzJyBtdXN0IGJlIHByb3ZpZGVkLlwiKVxuXG4gICAgICAgIGFkZF9rd2FyZ3MgPSB7XCJ1c2VyX2lkXCI6IHVzZXJfaWR9XG4gICAgICAgIGlmIG1ldGFkYXRhOlxuICAgICAgICAgICAgYWRkX2t3YXJnc1tcIm1ldGFkYXRhXCJdID0gbWV0YWRhdGFcblxuICAgICAgICB0cnk6XG4gICAgICAgICAgICBwcmludChmXCJBZGRpbmcgbWVtb3J5IGZvciB1c2VyX2lkOiB7dXNlcl9pZH1cIilcbiAgICAgICAgICAgIGlmIG1lc3NhZ2VzOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuY2xpZW50LmFkZChtZXNzYWdlcz1tZXNzYWdlcywgKiphZGRfa3dhcmdzKVxuICAgICAgICAgICAgZWxzZTogIyBjb250ZW50IG11c3QgYmUgcHJvdmlkZWQgZHVlIHRvIHRoZSBjaGVjayBhYm92ZVxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuY2xpZW50LmFkZChjb250ZW50PWNvbnRlbnQsICoqYWRkX2t3YXJncylcbiAgICAgICAgICAgIHByaW50KGZcIk1lbTAgYWRkIHJlc3VsdDoge3Jlc3VsdH1cIilcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICAgICAgcHJpbnQoZlwiRXJyb3IgYWRkaW5nIG1lbW9yeSB0byBNZW0wIGZvciB1c2VyIHt1c2VyX2lkfToge2V9XCIpXG4gICAgICAgICAgICByYWlzZVxuLi4uXG5cbiMgTm90ZTogVGhlIE1lbTAgUHl0aG9uIGNsaWVudCBpdHNlbGYgZG9lc24ndCBhcHBlYXIgdG8gYmUgaW5oZXJlbnRseSBhc3luYyBiYXNlZCBvbiBkb2NzLlxuIyBUaGVzZSBhc3luYyB3cmFwcGVycyBleGVjdXRlIHRoZSBzeW5jaHJvbm91cyBjbGllbnQgY2FsbHMgd2l0aGluIHRoZSBhc3luYyBmdW5jdGlvbixcbiMgYWxsb3dpbmcgdGhlbSB0byBiZSBhd2FpdGVkIGluIGFuIGFzeW5jIGVudmlyb25tZW50IChsaWtlIExhbmdHcmFwaC9GYXN0QVBJKS5cbiMgRm9yIHRydWUgYXN5bmMgSU8gd2l0aCBNZW0wLCBvbmUgbWlnaHQgbmVlZCBhbiBhc3luYyBIVFRQIGNsaWVudCAobGlrZSBodHRweClcbiMgdG8gY2FsbCB0aGUgTWVtMCBSRVNUIEFQSSBkaXJlY3RseSBpZiB0aGUgUHl0aG9uIFNESyBkb2Vzbid0IHN1cHBvcnQgaXQgbmF0aXZlbHkuIC4uLlxuUGF0aDogUkVBRE1FLm1kXG4uLi5cblxuQ2hlY2sgb3V0IHRoZXNlIGF3ZXNvbWUgYWdlbnRzICh0aGV5IGxpdmUgaW4gc2VwYXJhdGUgcmVwb3NpdG9yaWVzKS4gWW91IGNhbiBydW4gdGhlbSBzZXBhcmF0ZWx5IG9yIGRlcGxveSB0aGVtIG9uIExhbmdTbWl0aDpcbi0gW0NvQWdlbnRzIFRyYXZlbCBBZ2VudF0oaHR0cHM6Ly9naXRodWIuY29tL0NvcGlsb3RLaXQvQ29waWxvdEtpdC90cmVlL21haW4vZXhhbXBsZXMvY29hZ2VudHMtdHJhdmVsL2FnZW50KVxuLSBbQ29BZ2VudHMgQUkgUmVzZWFyY2hlcl0oaHR0cHM6Ly9naXRodWIuY29tL0NvcGlsb3RLaXQvQ29waWxvdEtpdC90cmVlL21haW4vZXhhbXBsZXMvY29hZ2VudHMtYWktcmVzZWFyY2hlci9hZ2VudClcblxuQWRkaXRpb25hbGx5LCB0aGlzIHByb2plY3Qgbm93IGluY2x1ZGVzIGEgYnVpbHQtaW4gTUNQIChNdWx0aS1DaGFubmVsIFByb3RvY29sKSBBZ2VudDpcbi0gKipNQ1AgQWdlbnQqKjogQSBnZW5lcmFsLXB1cnBvc2UgYWdlbnQgY2FwYWJsZSBvZiBoYW5kbGluZyB2YXJpb3VzIHRhc2tzIHRocm91Z2ggY29uZmlndXJhYmxlIE1DUCBzZXJ2ZXJzLlxuXG4jIyBDb3BpbG90IENsb3VkIGlzIHJlcXVpcmVkIHRvIHJ1biB0aGlzIHByb2plY3Q6IFxuXG5cblxuXG4jIyBRdWljayBTdGFydCDwn5qAXG5cbiMjIyAxLiBQcmVyZXF1aXNpdGVzXG5NYWtlIHN1cmUgeW91IGhhdmU6XG4tIFtwbnBtXShodHRwczovL3BucG0uaW8vaW5zdGFsbGF0aW9uKVxuXG4jIyMgMi4gQVBJIEtleXNcbi0gW0NvcGlsb3QgQ2xvdWRdKGh0dHBzOi8vY2xvdWQuY29waWxvdGtpdC5haSlcbi4uLlxuXG4xLiAqKkNvbmZpZ3VyaW5nIEN1c3RvbSBNQ1AgU2VydmVycyoqOlxuICAgLSBDbGljayB0aGUgXCJNQ1AgU2VydmVyc1wiIGJ1dHRvbiBpbiB0aGUgdG9wIHJpZ2h0IG9mIHRoZSBpbnRlcmZhY2VcbiAgIC0gQWRkIHNlcnZlcnMgdmlhIHRoZSBjb25maWd1cmF0aW9uIHBhbmVsOlxuICAgICAtICoqU3RhbmRhcmQgSU8qKjogUnVuIGNvbW1hbmRzIGxvY2FsbHkgKGUuZy4sIFB5dGhvbiBzY3JpcHRzKVxuICAgICAtICoqU1NFKio6IENvbm5lY3QgdG8gZXh0ZXJuYWwgTUNQLWNvbXBhdGlibGUgc2VydmVycyAodmlhIFNlcnZlci1TZW50IEV2ZW50cylcblxuMi4gKipQdWJsaWMgTUNQIFNlcnZlcnMqKjpcbiAgIC0gWW91IGNhbiBjb25uZWN0IHRvIHB1YmxpYyBNQ1Agc2VydmVycyBsaWtlIFttY3AuY29tcG9zaW8uZGV2XShodHRwczovL21jcC5jb21wb3Npby5kZXYvKSBhbmQgW21jcC5ydW5dKGh0dHBzOi8vd3d3Lm1jcC5ydW4vKVxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvbGliL21jcC1jb25maWctdHlwZXMudHNcbmV4cG9ydCB0eXBlIENvbm5lY3Rpb25UeXBlID0gXCJzdGRpb1wiIHwgXCJzc2VcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTdGRpb0NvbmZpZyB7XG4gIGNvbW1hbmQ6IHN0cmluZztcbiAgYXJnczogc3RyaW5nW107XG4gIHRyYW5zcG9ydDogXCJzdGRpb1wiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNTRUNvbmZpZyB7XG4gIHVybDogc3RyaW5nO1xuICB0cmFuc3BvcnQ6IFwic3NlXCI7XG59XG5cbmV4cG9ydCB0eXBlIFNlcnZlckNvbmZpZyA9IFN0ZGlvQ29uZmlnIHwgU1NFQ29uZmlnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1DUENvbmZpZyB7XG4gIG1jcF9jb25maWc6IFJlY29yZDxzdHJpbmcsIFNlcnZlckNvbmZpZz47XG59XG5cbi8vIExvY2FsIHN0b3JhZ2Uga2V5IGZvciBzYXZpbmcgTUNQIGNvbmZpZ3VyYXRpb25zXG5leHBvcnQgY29uc3QgTUNQX1NUT1JBR0VfS0VZID0gXCJtY3Atc2VydmVyLWNvbmZpZ3NcIjtcbi4uLlxuUGF0aDogYWdlbnQvbWNwX2FnZW50L2ludGVncmF0aW9ucy9tZW1vcnlzYXZlcl9tYW5hZ2VyLnB5XG5mcm9tIHR5cGluZyBpbXBvcnQgTGlzdCwgRGljdCwgQW55LCBPcHRpb25hbFxuZnJvbSAuYmFzZV9tZW1vcnkgaW1wb3J0IEJhc2VNZW1vcnlNYW5hZ2VyXG5cbmNsYXNzIE1lbW9yeVNhdmVyTWFuYWdlcihCYXNlTWVtb3J5TWFuYWdlcik6XG4gICAgXCJcIlwiXG4gICAgV3JhcHMgdGhlIGxlZ2FjeSBNZW1vcnlTYXZlciB0byBjb25mb3JtIHRvIHRoZSBCYXNlTWVtb3J5TWFuYWdlciBwcm90b2NvbC5cbiAgICBQcm92aWRlcyBhc3luYywgdHlwZS1zYWZlIG1ldGhvZHMgZm9yIGFnZW50IG1lbW9yeSBvcGVyYXRpb25zLlxuICAgIFwiXCJcIlxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzdG9yYWdlX3BhdGg6IE9wdGlvbmFsW3N0cl0gPSBOb25lKTpcbiAgICAgICAgdHJ5OlxuICAgICAgICAgICAgZnJvbSBsYW5nZ3JhcGguY2hlY2twb2ludC5tZW1vcnkgaW1wb3J0IE1lbW9yeVNhdmVyXG4gICAgICAgIGV4Y2VwdCBJbXBvcnRFcnJvciBhcyBlOlxuICAgICAgICAgICAgcmFpc2UgSW1wb3J0RXJyb3IoZlwiTWVtb3J5U2F2ZXIgY291bGQgbm90IGJlIGltcG9ydGVkOiB7ZX1cIilcbiAgICAgICAgIyBVc2UgYSBmaWxlIHBhdGggb3IgaW4tbWVtb3J5IGJ5IGRlZmF1bHRcbiAgICAgICAgc2VsZi5zYXZlciA9IE1lbW9yeVNhdmVyKHN0b3JhZ2VfcGF0aCkgaWYgc3RvcmFnZV9wYXRoIGVsc2UgTWVtb3J5U2F2ZXIoKVxuLi4uXG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvaW50ZWdyYXRpb25zL2EyYV9wcm90b2NvbHMucHlcbmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbCwgRGljdCwgQW55LCBMaXN0LCBVbmlvblxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsLCBGaWVsZFxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcblxuY2xhc3MgVGFza1JlcXVlc3RQYXlsb2FkKEJhc2VNb2RlbCk6XG4gICAgXCJcIlwiXG4gICAgRXhhbXBsZSBwYXlsb2FkIGZvciByZXF1ZXN0aW5nIGEgdGFzayBmcm9tIGFub3RoZXIgYWdlbnQuXG4gICAgRXh0ZW5kIGFzIG5lZWRlZCBmb3IgeW91ciBkb21haW4uXG4gICAgXCJcIlwiXG4gICAgdGFza190eXBlOiBzdHJcbiAgICBwYXJhbWV0ZXJzOiBEaWN0W3N0ciwgQW55XSA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT1kaWN0KVxuICAgIGNvbnRleHQ6IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXSA9IE5vbmVcblxuY2xhc3MgVGFza1Jlc3BvbnNlUGF5bG9hZChCYXNlTW9kZWwpOlxuICAgIFwiXCJcIlxuICAgIEV4YW1wbGUgcGF5bG9hZCBmb3IgcmVzcG9uZGluZyB0byBhIHRhc2sgcmVxdWVzdC5cbiAgICBcIlwiXCJcbiAgICBzdWNjZXNzOiBib29sXG4gICAgcmVzdWx0OiBPcHRpb25hbFtBbnldID0gTm9uZVxuICAgIGVycm9yOiBPcHRpb25hbFtzdHJdID0gTm9uZVxuXG5jbGFzcyBBMkFNZXNzYWdlKEJhc2VNb2RlbCk6XG4gICAgXCJcIlwiXG4gICAgU3RhbmRhcmRpemVkIG1lc3NhZ2UgZm9yIGFnZW50LXRvLWFnZW50IGNvbW11bmljYXRpb24uXG4gICAgXCJcIlwiXG4gICAgc2VuZGVyX2FnZW50X2lkOiBzdHJcbiAgICByZWNpcGllbnRfYWdlbnRfaWQ6IHN0clxuICAgIG1lc3NhZ2VfdHlwZTogc3RyICAjIGUuZy4sICd0YXNrX3JlcXVlc3QnLCAndGFza19yZXNwb25zZScsICdzdGF0dXMnLCBldGMuXG4gICAgcGF5bG9hZDogVW5pb25bVGFza1JlcXVlc3RQYXlsb2FkLCBUYXNrUmVzcG9uc2VQYXlsb2FkLCBEaWN0W3N0ciwgQW55XV1cbiAgICB0aW1lc3RhbXA6IGRhdGV0aW1lID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PWRhdGV0aW1lLnV0Y25vdylcbiAgICBtZXRhZGF0YTogT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dID0gTm9uZVxuXG5jbGFzcyBDYXBhYmlsaXR5RGlzY292ZXJ5UGF5bG9hZChCYXNlTW9kZWwpOlxuICAgIFwiXCJcIlxuICAgIFBheWxvYWQgZm9yIGNhcGFiaWxpdHkgZGlzY292ZXJ5IGJldHdlZW4gYWdlbnRzLlxuICAgIFwiXCJcIlxuICAgIGNhcGFiaWxpdGllczogTGlzdFtzdHJdXG4gICAgYWdlbnRfdmVyc2lvbjogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbiAgICBleHRyYTogT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dID0gTm9uZVxuXG4jIFlvdSBjYW4gZXh0ZW5kIHdpdGggbW9yZSBtZXNzYWdlIHR5cGVzIGFzIG5lZWRlZCAobmVnb3RpYXRpb24sIHN0YXRlIHN5bmMsIGV0Yy4pIC4uLlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiOTExOGQ1YzktMzY2YS00ZmNiLThjYTQtMjBmYTZmNTcyNzAzO3Rvb2x1X3ZydHhfMDE2S1JSNjRpZW53NTYxakFFMXc0ekxTIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGZyb250ZW5kL3NyYy9jb21wb25lbnRzL21jcC1jb25maWctbW9kYWwudHN4XG5cInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDb0FnZW50IH0gZnJvbSBcIkBjb3BpbG90a2l0L3JlYWN0LWNvcmVcIjtcbmltcG9ydCB7IHVzZUxvY2FsU3RvcmFnZSB9IGZyb20gXCJAL2hvb2tzL3VzZS1sb2NhbC1zdG9yYWdlXCI7XG5pbXBvcnQgeyBDb25uZWN0aW9uVHlwZSwgU2VydmVyQ29uZmlnLCBNQ1BfU1RPUkFHRV9LRVkgfSBmcm9tIFwiQC9saWIvbWNwLWNvbmZpZy10eXBlc1wiO1xuaW1wb3J0IHsgWCwgUGx1cywgU2VydmVyLCBHbG9iZSwgVHJhc2gyIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuaW1wb3J0IHsgQXZhaWxhYmxlQWdlbnRzIH0gZnJvbSBcIkAvbGliL2F2YWlsYWJsZS1hZ2VudHNcIjtcblxuLy8gRXh0ZXJuYWwgbGluayBpY29uIGNvbXBvbmVudFxuY29uc3QgRXh0ZXJuYWxMaW5rID0gKCkgPT4gKFxuICA8c3ZnXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgY2xhc3NOYW1lPVwidy0zIGgtMyBtbC0xXCJcbiAgICBmaWxsPVwibm9uZVwiXG4gICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgPlxuICAgIDxwYXRoXG4gICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgICBzdHJva2VXaWR0aD17Mn1cbiAgICAgIGQ9XCJNMTAgNkg2YTIgMiAwIDAwLTIgMnYxMGEyIDIgMCAwMDIgMmgxMGEyIDIgMCAwMDItMnYtNE0xNCA0aDZtMCAwdjZtMC02TDEwIDE0XCJcbiAgICAvPlxuICA8L3N2Zz5cbik7XG5cbmludGVyZmFjZSBNQ1BDb25maWdNb2RhbFByb3BzIHtcbiAgaXNPcGVuOiBib29sZWFuO1xuICBvbkNsb3NlOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTUNQQ29uZmlnTW9kYWwoeyBpc09wZW4sIG9uQ2xvc2UgfTogTUNQQ29uZmlnTW9kYWxQcm9wcykge1xuICAvLyBVc2UgcmVmIHRvIGF2b2lkIHJlLXJlbmRlcmluZyBpc3N1ZXNcbiAgY29uc3QgY29uZmlnc1JlZiA9IHVzZVJlZjxSZWNvcmQ8c3RyaW5nLCBTZXJ2ZXJDb25maWc+Pih7fSk7XG4gIFxuICAvLyBVc2UgbG9jYWxTdG9yYWdlIGhvb2sgZm9yIHBlcnNpc3RlbnQgc3RvcmFnZVxuICBjb25zdCBbc2F2ZWRDb25maWdzLCBzZXRTYXZlZENvbmZpZ3NdID0gdXNlTG9jYWxTdG9yYWdlPFxuICAgIFJlY29yZDxzdHJpbmcsIFNlcnZlckNvbmZpZz5cbiAgPihNQ1BfU1RPUkFHRV9LRVksIHt9KTtcbiAgXG4gIC8vIFNldCB0aGUgcmVmIHZhbHVlIG9uY2Ugd2UgaGF2ZSB0aGUgc2F2ZWQgY29uZmlnc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChPYmplY3Qua2V5cyhzYXZlZENvbmZpZ3MpLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbmZpZ3NSZWYuY3VycmVudCA9IHNhdmVkQ29uZmlncztcbiAgICB9XG4gIH0sIFtzYXZlZENvbmZpZ3NdKTtcblxuICAvLyBJbml0aWFsaXplIGFnZW50IHN0YXRlIHdpdGggdGhlIGRhdGEgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgY29uc3QgeyBzdGF0ZTogYWdlbnRTdGF0ZSwgc2V0U3RhdGU6IHNldEFnZW50U3RhdGUgfSA9IHVzZUNvQWdlbnQ8e1xuICAgIG1jcF9jb25maWc6IFJlY29yZDxzdHJpbmcsIFNlcnZlckNvbmZpZz47XG4gICAgcmVzcG9uc2U6IHN0cmluZztcbiAgICBsb2dzOiBBcnJheTx7IG1lc3NhZ2U6IHN0cmluZzsgZG9uZTogYm9vbGVhbiB9PjtcbiAgfT4oe1xuICAgIG5hbWU6IEF2YWlsYWJsZUFnZW50cy5NQ1BfQUdFTlQsXG4gICAgaW5pdGlhbFN0YXRlOiB7XG4gICAgICBtY3BfY29uZmlnOiBjb25maWdzUmVmLmN1cnJlbnQsXG4gICAgICByZXNwb25zZTogXCJcIixcbiAgICAgIGxvZ3M6IFtdLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFNpbXBsZSBnZXR0ZXIgZm9yIGNvbmZpZ3NcbiAgY29uc3QgY29uZmlncyA9IGFnZW50U3RhdGU/Lm1jcF9jb25maWcgfHwge307XG5cbiAgLy8gU2ltcGxlIHNldHRlciB3cmFwcGVyIGZvciBjb25maWdzXG4gIGNvbnN0IHNldENvbmZpZ3MgPSAobmV3Q29uZmlnczogUmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPikgPT4ge1xuICAgIHNldEFnZW50U3RhdGUoKHByZXZTdGF0ZSkgPT4gKHtcbiAgICAgIC4uLnByZXZTdGF0ZSEsXG4gICAgICBtY3BfY29uZmlnOiBuZXdDb25maWdzLFxuICAgIH0pKTtcbiAgICBzZXRTYXZlZENvbmZpZ3MobmV3Q29uZmlncyk7XG4gICAgY29uZmlnc1JlZi5jdXJyZW50ID0gbmV3Q29uZmlncztcbiAgfTtcblxuICBjb25zdCBbc2VydmVyTmFtZSwgc2V0U2VydmVyTmFtZV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW2Nvbm5lY3Rpb25UeXBlLCBzZXRDb25uZWN0aW9uVHlwZV0gPSB1c2VTdGF0ZTxDb25uZWN0aW9uVHlwZT4oXCJzdGRpb1wiKTtcbiAgY29uc3QgW2NvbW1hbmQsIHNldENvbW1hbmRdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFthcmdzLCBzZXRBcmdzXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbdXJsLCBzZXRVcmxdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgW3Nob3dBZGRTZXJ2ZXJGb3JtLCBzZXRTaG93QWRkU2VydmVyRm9ybV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgLy8gQ2FsY3VsYXRlIHNlcnZlciBzdGF0aXN0aWNzXG4gIGNvbnN0IHRvdGFsU2VydmVycyA9IE9iamVjdC5rZXlzKGNvbmZpZ3MpLmxlbmd0aDtcbiAgY29uc3Qgc3RkaW9TZXJ2ZXJzID0gT2JqZWN0LnZhbHVlcyhjb25maWdzKS5maWx0ZXIoXG4gICAgKGNvbmZpZykgPT4gY29uZmlnLnRyYW5zcG9ydCA9PT0gXCJzdGRpb1wiXG4gICkubGVuZ3RoO1xuICBjb25zdCBzc2VTZXJ2ZXJzID0gT2JqZWN0LnZhbHVlcyhjb25maWdzKS5maWx0ZXIoXG4gICAgKGNvbmZpZykgPT4gY29uZmlnLnRyYW5zcG9ydCA9PT0gXCJzc2VcIlxuICApLmxlbmd0aDtcblxuICAvLyBTZXQgbG9hZGluZyB0byBmYWxzZSB3aGVuIHN0YXRlIGlzIGxvYWRlZFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhZ2VudFN0YXRlKSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2FnZW50U3RhdGVdKTtcblxuICBjb25zdCBhZGRDb25maWcgPSAoKSA9PiB7XG4gICAgaWYgKCFzZXJ2ZXJOYW1lKSByZXR1cm47XG5cbiAgICBjb25zdCBuZXdDb25maWcgPVxuICAgICAgY29ubmVjdGlvblR5cGUgPT09IFwic3RkaW9cIlxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGNvbW1hbmQsXG4gICAgICAgICAgICBhcmdzOiBhcmdzLnNwbGl0KFwiIFwiKS5maWx0ZXIoKGFyZykgPT4gYXJnLnRyaW0oKSAhPT0gXCJcIiksXG4gICAgICAgICAgICB0cmFuc3BvcnQ6IFwic3RkaW9cIiBhcyBjb25zdCxcbiAgICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgdHJhbnNwb3J0OiBcInNzZVwiIGFzIGNvbnN0LFxuICAgICAgICAgIH07XG5cbiAgICBzZXRDb25maWdzKHtcbiAgICAgIC4uLmNvbmZpZ3MsXG4gICAgICBbc2VydmVyTmFtZV06IG5ld0NvbmZpZyxcbiAgICB9KTtcblxuICAgIC8vIFJlc2V0IGZvcm1cbiAgICBzZXRTZXJ2ZXJOYW1lKFwiXCIpO1xuICAgIHNldENvbW1hbmQoXCJcIik7XG4gICAgc2V0QXJncyhcIlwiKTtcbiAgICBzZXRVcmwoXCJcIik7XG4gICAgc2V0U2hvd0FkZFNlcnZlckZvcm0oZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZUNvbmZpZyA9IChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBuZXdDb25maWdzID0geyAuLi5jb25maWdzIH07XG4gICAgZGVsZXRlIG5ld0NvbmZpZ3NbbmFtZV07XG4gICAgc2V0Q29uZmlncyhuZXdDb25maWdzKTtcbiAgfTtcbi4uLlxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmaXhlZCBpbnNldC0wIGJnLWJsYWNrIGJnLW9wYWNpdHktNTAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgei1bOTk5OV1cIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctd2hpdGUgcm91bmRlZC1sZyBwLTYgdy1mdWxsIG1heC13LTR4bCBtYXgtaC1bOTB2aF0gb3ZlcmZsb3cteS1hdXRvIHJlbGF0aXZlIHotWzEwMDAwXVwiPlxuICAgICAgICB7LyogSGVhZGVyICovfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1iLTZcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBtYi00XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxTZXJ2ZXIgY2xhc3NOYW1lPVwiaC02IHctNiBtci0yIHRleHQtZ3JheS03MDBcIiAvPlxuICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1zZW1pYm9sZFwiPk1DUCBTZXJ2ZXIgQ29uZmlndXJhdGlvbjwvaDE+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xvc2V9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtZ3JheS01MDAgaG92ZXI6dGV4dC1ncmF5LTcwMFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxYIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIHNtOmZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1zdGFydCBzbTppdGVtcy1jZW50ZXIgbXQtNCBnYXAtNFwiPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNjAwXCI+XG4gICAgICAgICAgICAgIE1hbmFnZSBhbmQgY29uZmlndXJlIHlvdXIgTUNQIHNlcnZlcnNcbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd0FkZFNlcnZlckZvcm0odHJ1ZSl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBzbTp3LWF1dG8gcHgtMyBweS0xLjUgYmctZ3JheS04MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIHRleHQtc20gZm9udC1tZWRpdW0gaG92ZXI6YmctZ3JheS03MDAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTEganVzdGlmeS1jZW50ZXJcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8UGx1cyBjbGFzc05hbWU9XCJoLTQgdy00XCIgLz5cbiAgICAgICAgICAgICAgQWRkIFNlcnZlclxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHsvKiBTZXJ2ZXIgU3RhdGlzdGljcyAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIHNtOmdyaWQtY29scy0zIGdhcC00IG1iLThcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLXdoaXRlIGJvcmRlciByb3VuZGVkLW1kIHAtNFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS01MDBcIj5Ub3RhbCBTZXJ2ZXJzPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZFwiPnt0b3RhbFNlcnZlcnN9PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy13aGl0ZSBib3JkZXIgcm91bmRlZC1tZCBwLTRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNTAwXCI+U3RkaW8gU2VydmVyczwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LTN4bCBmb250LWJvbGRcIj57c3RkaW9TZXJ2ZXJzfTwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctd2hpdGUgYm9yZGVyIHJvdW5kZWQtbWQgcC00XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTUwMFwiPlNTRSBTZXJ2ZXJzPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZFwiPntzc2VTZXJ2ZXJzfTwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7LyogU2VydmVyIExpc3QgKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctd2hpdGUgYm9yZGVyIHJvdW5kZWQtbWQgcC02XCI+XG4gICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1zZW1pYm9sZCBtYi00XCI+U2VydmVyIExpc3Q8L2gyPlxuXG4gICAgICAgICAge3RvdGFsU2VydmVycyA9PT0gMCA/IChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTUwMCB0ZXh0LWNlbnRlciBweS0xMFwiPlxuICAgICAgICAgICAgICBObyBzZXJ2ZXJzIGNvbmZpZ3VyZWQuIENsaWNrICZxdW90O0FkZCBTZXJ2ZXImcXVvdDsgdG8gZ2V0IHN0YXJ0ZWQuXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGdhcC00XCI+XG4gICAgICAgICAgICAgIHtPYmplY3QuZW50cmllcyhjb25maWdzKS5tYXAoKFtuYW1lLCBjb25maWddKSA9PiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm9yZGVyIHJvdW5kZWQtbWQgb3ZlcmZsb3ctaGlkZGVuIGJnLXdoaXRlIHNoYWRvdy1zbVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1zdGFydFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwiZm9udC1zZW1pYm9sZFwiPntuYW1lfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBweC0yIHB5LTAuNSBiZy1ncmF5LTEwMCB0ZXh0LXhzIHJvdW5kZWQgbXQtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7Y29uZmlnLnRyYW5zcG9ydCA9PT0gXCJzdGRpb1wiID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJ2ZXIgY2xhc3NOYW1lPVwidy0zIGgtMyBtci0xXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R2xvYmUgY2xhc3NOYW1lPVwidy0zIGgtMyBtci0xXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbi4uLlxuXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS00XCI+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJibG9jayB0ZXh0LXNtIGZvbnQtbWVkaXVtIG1iLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgU2VydmVyIE5hbWVcbiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c2VydmVyTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRTZXJ2ZXJOYW1lKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIHB4LTMgcHktMiBib3JkZXIgcm91bmRlZC1tZCB0ZXh0LXNtXCJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJlLmcuLCBhcGktc2VydmljZSwgZGF0YS1wcm9jZXNzb3JcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiYmxvY2sgdGV4dC1zbSBmb250LW1lZGl1bSBtYi0xXCI+XG4gICAgICAgICAgICAgICAgICAgIENvbm5lY3Rpb24gVHlwZVxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBnYXAtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q29ubmVjdGlvblR5cGUoXCJzdGRpb1wiKX1cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BweC0zIHB5LTIgYm9yZGVyIHJvdW5kZWQtbWQgdGV4dC1jZW50ZXIgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25UeXBlID09PSBcInN0ZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcImJnLWdyYXktMjAwIGJvcmRlci1ncmF5LTQwMCB0ZXh0LWdyYXktODAwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcImJnLXdoaXRlIHRleHQtZ3JheS03MDBcIlxuICAgICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPFNlcnZlciBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTFcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgIFN0YW5kYXJkIElPXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q29ubmVjdGlvblR5cGUoXCJzc2VcIil9XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgcHgtMyBweS0yIGJvcmRlciByb3VuZGVkLW1kIHRleHQtY2VudGVyIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyICR7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uVHlwZSA9PT0gXCJzc2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwiYmctZ3JheS0yMDAgYm9yZGVyLWdyYXktNDAwIHRleHQtZ3JheS04MDBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiYmctd2hpdGUgdGV4dC1ncmF5LTcwMFwiXG4gICAgICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8R2xvYmUgY2xhc3NOYW1lPVwidy00IGgtNCBtci0xXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICBTU0VcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbi4uLlxuICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZS5nLiwgaHR0cDovL2xvY2FsaG9zdDo4MDAwL2V2ZW50c1wiXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktZW5kIHNwYWNlLXgtMiBwdC0yXCI+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dBZGRTZXJ2ZXJGb3JtKGZhbHNlKX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicHgtNCBweS0yIGJvcmRlciB0ZXh0LWdyYXktNzAwIHJvdW5kZWQtbWQgaG92ZXI6YmctZ3JheS01MCB0ZXh0LXNtIGZvbnQtbWVkaXVtIGZsZXggaXRlbXMtY2VudGVyXCJcbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPFggY2xhc3NOYW1lPVwidy00IGgtNCBtci0xXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgQ2FuY2VsXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17YWRkQ29uZmlnfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJweC00IHB5LTIgYmctZ3JheS04MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIGhvdmVyOmJnLWdyYXktNzAwIHRleHQtc20gZm9udC1tZWRpdW0gZmxleCBpdGVtcy1jZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8UGx1cyBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTFcIiAvPlxuICAgICAgICAgICAgICAgICAgICBBZGQgU2VydmVyXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvY29tcG9uZW50cy9hZ2VudHMvbWNwLWFnZW50LnRzeFxuaW1wb3J0IFJlYWN0LCB7IEZDLCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEF2YWlsYWJsZUFnZW50cyB9IGZyb20gXCJAL2xpYi9hdmFpbGFibGUtYWdlbnRzXCI7XG5pbXBvcnQgeyB1c2VDb0FnZW50LCB1c2VDb0FnZW50U3RhdGVSZW5kZXIgfSBmcm9tIFwiQGNvcGlsb3RraXQvcmVhY3QtY29yZVwiO1xuaW1wb3J0IHsgQ2hlY2tDaXJjbGVJY29uIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuaW1wb3J0IFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5pbXBvcnQgeyBTZXJ2ZXJDb25maWcsIE1DUF9TVE9SQUdFX0tFWSB9IGZyb20gXCJAL2xpYi9tY3AtY29uZmlnLXR5cGVzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbFN0b3JhZ2UgfSBmcm9tIFwiQC9ob29rcy91c2UtbG9jYWwtc3RvcmFnZVwiO1xuXG5leHBvcnQgdHlwZSBNQ1BBZ2VudFN0YXRlID0ge1xuICByZXNwb25zZTogc3RyaW5nO1xuICBsb2dzOiBBcnJheTx7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIGRvbmU6IGJvb2xlYW47XG4gIH0+O1xuICBtY3BfY29uZmlnPzogUmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPjtcbn07XG5cbmV4cG9ydCBjb25zdCBNQ1BBZ2VudDogRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtsb2dzLCBzZXRMb2dzXSA9IHVzZVN0YXRlPFxuICAgIEFycmF5PHtcbiAgICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICAgIGRvbmU6IGJvb2xlYW47XG4gICAgfT5cbiAgPihbXSk7XG4gIFxuICBjb25zdCBpc1Byb2Nlc3NpbmcgPSB1c2VSZWYoZmFsc2UpO1xuICBcbiAgLy8gVXNlIHJlZiB0byBhdm9pZCByZS1yZW5kZXJpbmcgaXNzdWVzXG4gIGNvbnN0IGNvbmZpZ3NSZWYgPSB1c2VSZWY8UmVjb3JkPHN0cmluZywgU2VydmVyQ29uZmlnPj4oe30pO1xuICBcbiAgLy8gR2V0IHNhdmVkIE1DUCBjb25maWd1cmF0aW9ucyBmcm9tIGxvY2FsU3RvcmFnZVxuICBjb25zdCBbc2F2ZWRDb25maWdzXSA9IHVzZUxvY2FsU3RvcmFnZTxSZWNvcmQ8c3RyaW5nLCBTZXJ2ZXJDb25maWc+PihNQ1BfU1RPUkFHRV9LRVksIHt9KTtcbiAgXG4gIC8vIFNldCB0aGUgcmVmIHZhbHVlIG9uY2Ugd2UgaGF2ZSB0aGUgc2F2ZWQgY29uZmlnc1xuICBpZiAoT2JqZWN0LmtleXMoc2F2ZWRDb25maWdzKS5sZW5ndGggPiAwICYmIE9iamVjdC5rZXlzKGNvbmZpZ3NSZWYuY3VycmVudCkubGVuZ3RoID09PSAwKSB7XG4gICAgY29uZmlnc1JlZi5jdXJyZW50ID0gc2F2ZWRDb25maWdzO1xuICB9XG5cbiAgY29uc3QgeyBzdGF0ZTogbWNwQWdlbnRTdGF0ZSwgc3RvcDogc3RvcE1jcEFnZW50IH0gPSB1c2VDb0FnZW50PE1DUEFnZW50U3RhdGU+KHtcbiAgICBuYW1lOiBBdmFpbGFibGVBZ2VudHMuTUNQX0FHRU5ULFxuICAgIGluaXRpYWxTdGF0ZToge1xuICAgICAgcmVzcG9uc2U6IFwiXCIsXG4gICAgICBsb2dzOiBbXSxcbiAgICAgIG1jcF9jb25maWc6IGNvbmZpZ3NSZWYuY3VycmVudCxcbiAgICB9LFxuICB9KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtY3BBZ2VudFN0YXRlLmxvZ3MpIHtcbiAgICAgIHNldExvZ3MoKHByZXZMb2dzKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0xvZ3MgPSBbLi4ucHJldkxvZ3NdO1xuICAgICAgICBtY3BBZ2VudFN0YXRlLmxvZ3MuZm9yRWFjaCgobG9nKSA9PiB7XG4gICAgICAgICAgY29uc3QgZXhpc3RpbmdMb2dJbmRleCA9IG5ld0xvZ3MuZmluZEluZGV4KFxuICAgICAgICAgICAgKGwpID0+IGwubWVzc2FnZSA9PT0gbG9nLm1lc3NhZ2VcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChleGlzdGluZ0xvZ0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIGlmIChsb2cuZG9uZSAmJiAhbmV3TG9nc1tleGlzdGluZ0xvZ0luZGV4XS5kb25lKSB7XG4gICAgICAgICAgICAgIG5ld0xvZ3NbZXhpc3RpbmdMb2dJbmRleF0uZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xvZ3MucHVzaChsb2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXdMb2dzO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbWNwQWdlbnRTdGF0ZS5sb2dzXSk7XG5cbiAgdXNlQ29BZ2VudFN0YXRlUmVuZGVyKHtcbiAgICBuYW1lOiBBdmFpbGFibGVBZ2VudHMuTUNQX0FHRU5ULFxuICAgIGhhbmRsZXI6ICh7IG5vZGVOYW1lIH0pID0+IHtcbiAgICAgIGlmIChub2RlTmFtZSA9PT0gXCJfX2VuZF9fXCIpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgc3RvcE1jcEFnZW50KCk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyOiAoeyBzdGF0dXMgfSkgPT4ge1xuICAgICAgaWYgKHN0YXR1cyA9PT0gXCJpblByb2dyZXNzXCIpIHtcbiAgICAgICAgaXNQcm9jZXNzaW5nLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLWdyYXktNTAgcm91bmRlZC1sZ1wiPlxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1zZW1pYm9sZCBtYi0yXCI+UHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuLi48L2gzPlxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInNwYWNlLXktMlwiPlxuICAgICAgICAgICAgICB7bG9ncy5tYXAoKGxvZywgaWR4KSA9PiAoXG4gICAgICAgICAgICAgICAgPGxpIGtleT17aWR4fSBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLXN0YXJ0XCI+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2Btci0yICR7bG9nLmRvbmUgPyBcInRleHQtZ3JlZW4tNTAwXCIgOiBcInRleHQtZ3JheS00MDBcIn1gfT5cbiAgICAgICAgICAgICAgICAgICAge2xvZy5kb25lID8gXCLinJNcIiA6IFwi4p+zXCJ9XG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj57bG9nLm1lc3NhZ2V9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXR1cyA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgIGlzUHJvY2Vzc2luZy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvc2UgbWF4LXctbm9uZVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yIHRleHQtZ3JlZW4tNjAwIG1iLTRcIj5cbiAgICAgICAgICAgICAgICA8Q2hlY2tDaXJjbGVJY29uIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPlxuICAgICAgICAgICAgICAgIDxzcGFuPlByb2Nlc3NpbmcgY29tcGxldGU8L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgaWYgKGlzUHJvY2Vzc2luZy5jdXJyZW50KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBnYXAtNCBoLWZ1bGwgei1bOTk5XVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuaW1hdGUtcHVsc2UgcC02IGJnLXdoaXRlIHJvdW5kZWQtbGcgc2hhZG93LXNtXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLTYgYmctZ3JheS0yMDAgcm91bmRlZCB3LTEvMyBtYi00XCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLTQgYmctZ3JheS0yMDAgcm91bmRlZCB3LTUvNiBtYi0yXCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLTQgYmctZ3JheS0yMDAgcm91bmRlZCB3LWZ1bGwgbWItMlwiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaC00IGJnLWdyYXktMjAwIHJvdW5kZWQgdy00LzYgbWItMlwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBpZiAoIW1jcEFnZW50U3RhdGUucmVzcG9uc2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGdhcC00IGgtZnVsbCB6LVs5OTldXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLTIgcC02IGJnLXdoaXRlIHJvdW5kZWQtbGcgc2hhZG93LXNtXCI+XG4gICAgICAgIDxSZWFjdE1hcmtkb3duXG4gICAgICAgICAgY2xhc3NOYW1lPVwicHJvc2UgcHJvc2Utc20gbWQ6cHJvc2UtYmFzZSBsZzpwcm9zZS1sZyBwcm9zZS1zbGF0ZSBtYXgtdy1ub25lIGJnLWdyYXktNTAgcC02IHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1ncmF5LTIwMFwiXG4gICAgICAgICAgY29tcG9uZW50cz17e1xuICAgICAgICAgICAgaDE6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZCBtYi02IHBiLTIgYm9yZGVyLWJcIj5cbiAgICAgICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaDI6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtYm9sZCBtYi00IG10LThcIj57Y2hpbGRyZW59PC9oMj5cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBoMzogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LWJvbGQgbWItMyBtdC02XCI+e2NoaWxkcmVufTwvaDM+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgcDogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtYi00IGxlYWRpbmctcmVsYXhlZFwiPntjaGlsZHJlbn08L3A+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgdWw6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZGlzYyBwbC02IG1iLTQgc3BhY2UteS0yXCI+e2NoaWxkcmVufTwvdWw+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgb2w6ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgICAgICAgICAgICAgPG9sIGNsYXNzTmFtZT1cImxpc3QtZGVjaW1hbCBwbC02IG1iLTQgc3BhY2UteS0yXCI+e2NoaWxkcmVufTwvb2w+XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgYmxvY2txdW90ZTogKHsgY2hpbGRyZW4gfSkgPT4gKFxuICAgICAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzc05hbWU9XCJib3JkZXItbC00IGJvcmRlci1ncmF5LTMwMCBwbC00IHB5LTIgbXktNiBiZy1ncmF5LTUwIHJvdW5kZWQtclwiPlxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgPC9ibG9ja3F1b3RlPlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge21jcEFnZW50U3RhdGUucmVzcG9uc2V9XG4gICAgICAgIDwvUmVhY3RNYXJrZG93bj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL2xpYi9tY3AtY29uZmlnLXR5cGVzLnRzXG5leHBvcnQgdHlwZSBDb25uZWN0aW9uVHlwZSA9IFwic3RkaW9cIiB8IFwic3NlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RkaW9Db25maWcge1xuICBjb21tYW5kOiBzdHJpbmc7XG4gIGFyZ3M6IHN0cmluZ1tdO1xuICB0cmFuc3BvcnQ6IFwic3RkaW9cIjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTU0VDb25maWcge1xuICB1cmw6IHN0cmluZztcbiAgdHJhbnNwb3J0OiBcInNzZVwiO1xufVxuXG5leHBvcnQgdHlwZSBTZXJ2ZXJDb25maWcgPSBTdGRpb0NvbmZpZyB8IFNTRUNvbmZpZztcblxuZXhwb3J0IGludGVyZmFjZSBNQ1BDb25maWcge1xuICBtY3BfY29uZmlnOiBSZWNvcmQ8c3RyaW5nLCBTZXJ2ZXJDb25maWc+O1xufVxuXG4vLyBMb2NhbCBzdG9yYWdlIGtleSBmb3Igc2F2aW5nIE1DUCBjb25maWd1cmF0aW9uc1xuZXhwb3J0IGNvbnN0IE1DUF9TVE9SQUdFX0tFWSA9IFwibWNwLXNlcnZlci1jb25maWdzXCI7XG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9saWIvYXZhaWxhYmxlLWFnZW50cy50c1xuZXhwb3J0IGVudW0gQXZhaWxhYmxlQWdlbnRzIHtcbiAgVFJBVkVMX0FHRU5UID0gXCJ0cmF2ZWxcIixcbiAgUkVTRUFSQ0hfQUdFTlQgPSBcInJlc2VhcmNoX2FnZW50XCIsXG4gIE1DUF9BR0VOVCA9IFwibWNwLWFnZW50XCIsXG59XG4uLi5cblBhdGg6IGFnZW50L21jcF9hZ2VudC9hZ2VudC5weVxuLi4uXG5cbiMgRGVmaW5lIHRoZSBjb25uZWN0aW9uIHR5cGUgc3RydWN0dXJlc1xuY2xhc3MgU3RkaW9Db25uZWN0aW9uKFR5cGVkRGljdCk6XG4gICAgY29tbWFuZDogc3RyXG4gICAgYXJnczogTGlzdFtzdHJdXG4gICAgdHJhbnNwb3J0OiBMaXRlcmFsW1wic3RkaW9cIl1cblxuY2xhc3MgU1NFQ29ubmVjdGlvbihUeXBlZERpY3QpOlxuICAgIHVybDogc3RyXG4gICAgdHJhbnNwb3J0OiBMaXRlcmFsW1wic3NlXCJdXG5cbiMgVHlwZSBmb3IgTUNQIGNvbmZpZ3VyYXRpb25cbk1DUENvbmZpZyA9IERpY3Rbc3RyLCBVbmlvbltTdGRpb0Nvbm5lY3Rpb24sIFNTRUNvbm5lY3Rpb25dXVxuXG5jbGFzcyBBZ2VudFN0YXRlKENvcGlsb3RLaXRTdGF0ZSk6XG4gICAgXCJcIlwiXG4gICAgSGVyZSB3ZSBkZWZpbmUgdGhlIHN0YXRlIG9mIHRoZSBhZ2VudFxuXG4gICAgSW4gdGhpcyBpbnN0YW5jZSwgd2UncmUgaW5oZXJpdGluZyBmcm9tIENvcGlsb3RLaXRTdGF0ZSwgd2hpY2ggd2lsbCBicmluZyBpblxuICAgIHRoZSBDb3BpbG90S2l0U3RhdGUgZmllbGRzLiBXZSdyZSBhbHNvIGFkZGluZyBhIGN1c3RvbSBmaWVsZCwgYG1jcF9jb25maWdgLFxuICAgIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBjb25maWd1cmUgTUNQIHNlcnZpY2VzIGZvciB0aGUgYWdlbnQuXG4gICAgXCJcIlwiXG4gICAgIyBEZWZpbmUgbWNwX2NvbmZpZyBhcyBhbiBvcHRpb25hbCBmaWVsZCB3aXRob3V0IHNraXBwaW5nIHZhbGlkYXRpb25cbiAgICBtY3BfY29uZmlnOiBPcHRpb25hbFtNQ1BDb25maWddXG5cbiMgRGVmYXVsdCBNQ1AgY29uZmlndXJhdGlvbiB0byB1c2Ugd2hlbiBubyBjb25maWd1cmF0aW9uIGlzIHByb3ZpZGVkIGluIHRoZSBzdGF0ZVxuIyBVc2VzIHJlbGF0aXZlIHBhdGhzIHRoYXQgd2lsbCB3b3JrIHdpdGhpbiB0aGUgcHJvamVjdCBzdHJ1Y3R1cmVcbkRFRkFVTFRfTUNQX0NPTkZJRzogTUNQQ29uZmlnID0ge1xuICAgIFwibWF0aFwiOiB7XG4gICAgICAgIFwiY29tbWFuZFwiOiBcInB5dGhvblwiLFxuICAgICAgICAjIFVzZSBhIHJlbGF0aXZlIHBhdGggdGhhdCB3aWxsIGJlIHJlc29sdmVkIGJhc2VkIG9uIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5XG4gICAgICAgIFwiYXJnc1wiOiBbb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXyksIFwiLi5cIiwgXCJtYXRoX3NlcnZlci5weVwiKV0sXG4gICAgICAgIFwidHJhbnNwb3J0XCI6IFwic3RkaW9cIixcbiAgICB9LFxufVxuLi4uXG5QYXRoOiBhZ2VudC9tY3BfYWdlbnQvYWdlbnRfZmFjdG9yeS5weVxuIyBQbGFjZWhvbGRlciBmb3IgdGhlIGR5bmFtaWMgQWdlbnQgRmFjdG9yeVxuaW1wb3J0IG9zXG5mcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIERpY3QsIEFueVxuZnJvbSAuaW50ZWdyYXRpb25zLm1lbTBfaW50ZWdyYXRpb24gaW1wb3J0IE1lbTBNZW1vcnlNYW5hZ2VyXG5mcm9tIC5pbnRlZ3JhdGlvbnMubWVtb3J5c2F2ZXJfbWFuYWdlciBpbXBvcnQgTWVtb3J5U2F2ZXJNYW5hZ2VyXG5mcm9tIC5pbnRlZ3JhdGlvbnMubGl0ZWxsbV9pbnRlZ3JhdGlvbiBpbXBvcnQgTGl0ZUxMTVdyYXBwZXJcbmZyb20gLmludGVncmF0aW9ucy5hMmFfaW50ZWdyYXRpb24gaW1wb3J0IEEyQUNvbW11bmljYXRvclxuIyBmcm9tIC5pbnRlZ3JhdGlvbnMuZ3JhcGhpdGlfaW50ZWdyYXRpb24gaW1wb3J0IEdyYXBoaXRpS25vd2xlZGdlU291cmNlICAjIFBsYWNlaG9sZGVyXG5cbmZyb20gLmludGVncmF0aW9ucy5iYXNlX21lbW9yeSBpbXBvcnQgQmFzZU1lbW9yeU1hbmFnZXJcblxuY2xhc3MgQWdlbnRGYWN0b3J5OlxuICAgIFwiXCJcIlxuICAgIEZhY3RvcnkgZm9yIGNyZWF0aW5nIGFnZW50cyB3aXRoIG1vZHVsYXIsIGNvbmZpZ3VyYWJsZSBiYWNrZW5kcy5cbiAgICBSZWFkcyBjb25maWcvZW52IHRvIHNlbGVjdCBtZW1vcnksIExMTSwgQTJBLCBhbmQga25vd2xlZGdlIGJhY2tlbmRzLlxuICAgIFwiXCJcIlxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjb25maWc6IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXSA9IE5vbmUpOlxuICAgICAgICBzZWxmLmNvbmZpZyA9IGNvbmZpZyBvciBzZWxmLl9sb2FkX2NvbmZpZ19mcm9tX2VudigpXG4gICAgICAgIHNlbGYubWVtb3J5X2JhY2tlbmQgPSBzZWxmLmNvbmZpZy5nZXQoXCJNRU1PUllfQkFDS0VORFwiLCBcIm1lbW9yeXNhdmVyXCIpLmxvd2VyKClcbiAgICAgICAgc2VsZi5sbG1fYmFja2VuZCA9IHNlbGYuY29uZmlnLmdldChcIkxMTV9CQUNLRU5EXCIsIFwibGl0ZWxsbVwiKS5sb3dlcigpXG4gICAgICAgIHNlbGYuYTJhX2JhY2tlbmQgPSBzZWxmLmNvbmZpZy5nZXQoXCJBMkFfQkFDS0VORFwiLCBcImlubWVtb3J5XCIpLmxvd2VyKClcbiAgICAgICAgc2VsZi5rbm93bGVkZ2VfYmFja2VuZCA9IHNlbGYuY29uZmlnLmdldChcIktOT1dMRURHRV9CQUNLRU5EXCIsIFwiZ3JhcGhpdGlcIikubG93ZXIoKVxuXG4gICAgZGVmIF9sb2FkX2NvbmZpZ19mcm9tX2VudihzZWxmKSAtPiBEaWN0W3N0ciwgQW55XTpcbiAgICAgICAgXCJcIlwiTG9hZCBiYWNrZW5kIGNvbmZpZyBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcy5cIlwiXCJcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwiTUVNT1JZX0JBQ0tFTkRcIjogb3MuZ2V0ZW52KFwiTUVNT1JZX0JBQ0tFTkRcIiwgXCJtZW1vcnlzYXZlclwiKSxcbiAgICAgICAgICAgIFwiTExNX0JBQ0tFTkRcIjogb3MuZ2V0ZW52KFwiTExNX0JBQ0tFTkRcIiwgXCJsaXRlbGxtXCIpLFxuICAgICAgICAgICAgXCJBMkFfQkFDS0VORFwiOiBvcy5nZXRlbnYoXCJBMkFfQkFDS0VORFwiLCBcImlubWVtb3J5XCIpLFxuICAgICAgICAgICAgXCJLTk9XTEVER0VfQkFDS0VORFwiOiBvcy5nZXRlbnYoXCJLTk9XTEVER0VfQkFDS0VORFwiLCBcImdyYXBoaXRpXCIpLFxuICAgICAgICB9XG5cbiAgICBkZWYgZ2V0X21lbW9yeV9tYW5hZ2VyKHNlbGYpIC0+IEJhc2VNZW1vcnlNYW5hZ2VyOlxuICAgICAgICBpZiBzZWxmLm1lbW9yeV9iYWNrZW5kID09IFwibWVtMFwiOlxuICAgICAgICAgICAgcmV0dXJuIE1lbTBNZW1vcnlNYW5hZ2VyKClcbiAgICAgICAgZWxpZiBzZWxmLm1lbW9yeV9iYWNrZW5kID09IFwibWVtb3J5c2F2ZXJcIjpcbiAgICAgICAgICAgIHJldHVybiBNZW1vcnlTYXZlck1hbmFnZXIoKVxuICAgICAgICBlbHNlOlxuICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmXCJVbmtub3duIG1lbW9yeSBiYWNrZW5kOiB7c2VsZi5tZW1vcnlfYmFja2VuZH1cIilcbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvY29hZ2VudHMtcHJvdmlkZXIudHN4XG4uLi5cblxuICBjb25zdCB7IHN0YXRlOiBhaVJlc2VhcmNoQWdlbnRTdGF0ZSB9ID0gdXNlQ29BZ2VudCh7XG4gICAgbmFtZTogQXZhaWxhYmxlQWdlbnRzLlJFU0VBUkNIX0FHRU5ULFxuICAgIGluaXRpYWxTdGF0ZToge1xuICAgICAgbW9kZWw6IFwib3BlbmFpXCIsXG4gICAgICByZXNlYXJjaF9xdWVzdGlvbjogXCJcIixcbiAgICAgIHJlc291cmNlczogW10sXG4gICAgICByZXBvcnQ6IFwiXCIsXG4gICAgICBsb2dzOiBbXSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB7IHN0YXRlOiBtY3BBZ2VudFN0YXRlIH0gPSB1c2VDb0FnZW50KHtcbiAgICBuYW1lOiBBdmFpbGFibGVBZ2VudHMuTUNQX0FHRU5ULFxuICAgIGluaXRpYWxTdGF0ZToge1xuICAgICAgcmVzcG9uc2U6IFwiXCIsXG4gICAgICBsb2dzOiBbXSxcbiAgICAgIG1jcF9jb25maWc6IGNvbmZpZ3NSZWYuY3VycmVudCxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxBZ2VudHNDb250ZXh0LlByb3ZpZGVyXG4gICAgICB2YWx1ZT17W1xuICAgICAgICB7XG4gICAgICAgICAgLi4udHJhdmVsQWdlbnRTdGF0ZSxcbiAgICAgICAgICBfX25hbWVfXzogQXZhaWxhYmxlQWdlbnRzLlRSQVZFTC4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjA1ZTgzOWYyLTE5M2MtNDFiOC05NjkyLTE1ODc1NjUzMDMyODt0b29sdV92cnR4XzAxS0xmbnJWeWZtMnQ5QmlMOVJQYVFueCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHN0YXJ0LWFsbC5iYXQ6XG4gICAgIDFcdEBlY2hvIG9mZlxuICAgICAyXHRSRU0gTGF1bmNoIHNjcmlwdCBmb3IgTXVsdGktQWdlbnQgQ2FudmFzOiBzdGFydHMgYm90aCBmcm9udGVuZCBhbmQgYmFja2VuZFxuICAgICAzXHRcbiAgICAgNFx0UkVNIFN0YXJ0IGJhY2tlbmQgKGFnZW50KSBpbiBhIG5ldyB3aW5kb3dcbiAgICAgNVx0c3RhcnQgXCJNQ1AgQWdlbnQgQmFja2VuZFwiIGNtZCAvayBcImNkIC9kICV+ZHAwYWdlbnQgJiYgcG9ldHJ5IGluc3RhbGwgJiYgcG9ldHJ5IHJ1biBsYW5nZ3JhcGggZGV2IC0taG9zdCBsb2NhbGhvc3QgLS1wb3J0IDgxMjMgLS1uby1icm93c2VyXCJcbiAgICAgNlx0XG4gICAgIDdcdFJFTSBTdGFydCBmcm9udGVuZCAoTmV4dC5qcykgaW4gYSBuZXcgd2luZG93XG4gICAgIDhcdHN0YXJ0IFwiRnJvbnRlbmRcIiBjbWQgL2sgXCJjZCAvZCAlfmRwMGZyb250ZW5kICYmIHBucG0gaW5zdGFsbCAmJiBwbnBtIHJ1biBkZXZcIlxuICAgICA5XHRcbiAgICAxMFx0UkVNIE9wdGlvbmFsOiBXYWl0IGZvciB1c2VyIHRvIGNsb3NlXG4gICAgMTFcdGVjaG8gQm90aCBiYWNrZW5kIGFuZCBmcm9udGVuZCBoYXZlIGJlZW4gc3RhcnRlZCBpbiBuZXcgd2luZG93cy5cbiAgICAxMlx0cGF1c2VcbiAgICAxM1x0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxM1xuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fX0sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjp0cnVlLCJleHRyYURhdGEiOnsiaXNBZ2VudENvbnZlcnNhdGlvbiI6dHJ1ZSwiaGFzQWdlbnRPbmJvYXJkZWQiOnRydWUsImhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9fSwiYWdlbnRFeGVjdXRpb25Nb2RlIjoiYXV0byIsImlzQWdlbnRFZGl0c0NvbGxhcHNlZCI6dHJ1ZX0=" />
      </map>
    </option>
  </component>
</project>